#+title:      building development notes website with Emacs
#+date:       [2023-12-15 Fri 18:25]
#+filetags:   :emacs:websites:
#+identifier: 20231215T182523
#+STARTUP:    overview

* Research
** Why build a website for development notes anyway

I have a lot of notes. Over a few systems(at home, at work, under descriptions
of various projects).

So I wanted to gather everything in one place and somehow link them together.
It is also nice if I can share that with others. Also, as of [2023-12-16 Sat],
having everything about you/your way of working, etc written in one place, is a
perfect for AI systems to grab. All in one place, no need to scrape the whole
Internet. So the AI will for sure know how I like to work and my weak
spots(what I usually write here is what I just learned or don't want to
forget).

Also, of my notes are in .org files written in emacs, so of course my website
will also be written in Emacs

There are also many [[file:20231214T150411--inspirational-websites__emacs_websites.org][inspirational websites]] that look nice, are clean and
simple, but not necessarily do the purpose of "development notes storage".
Unless maybe this one - http://tips.defun.work/, which is also my initial
inspiration.

Have your devnotes reachable anywhere + be able to share them with others(in a
readable html format in a form of a blog). I am in.

** Why use emacs for it

[[file:20231215T140448--why-build-a-website-with-emacs-and-not-with-something-else__emacs_websites.org][Why build a website with emacs and not with something else]]

** Choosing an Emacs tool to build such website

Emacs has both built in and external packages that help you to generate .html
files from .org note files.

Some of them are:

- org-export-dispatcher(export one file at a time) [[https://github.com/arvydasg/codeacademy][Codeacademy example]]
- ox-publish(alist, export all pages of a project) ([[https://github.com/arvydasg/org-publish-project-blog][ox-publish]], [[https://github.com/arvydasg/emacs_blog/tree/master][emacs blog]],
  [[https://github.com/arvydasg/PKC_AFK/blob/main/AFK/src/pkcwiki/pkc-mano-build-site.el][pkcwiki]], [[https://github.com/arvydasg/pkc_wiki][pkcwiki2]], [[file:20231217T064942--build-a-website-with-emacs-and-ox-publish__emacs_websites.org][my notes about ox-publish]])
- [[file:20231215T101410--create-a-blog-with-emacs-easy-hugo__emacs_hugo_websites.org][create a blog with emacs-easy-hugo]]
- [[file:20231215T203400--create-a-website-with-ox-hugo__emacs_hugo_websites.org][create a website with ox hugo]]
- org-static-blog, [[https://github.com/arvydasg/org-static-blog][example]]

** ox-publish VS org-static-blog

At first([2023-12-15 Fri]) I was thinking to write the website with
=org-static-blog=, almost had the blog setup and ready, converted around 50
pages to html already, displayed them under my domain. But then kept seeing
some features that ox-publish has and org-static-blog does not. Thought okay,
let's rethink that. Asked ChatGPT for help:

#+begin_quote
The choice between using the default ox-publish functionality in Org Mode or
the org-static-blog package to create your Emacs website depends on your
specific requirements and preferences. Let's explore both options:

*ox-publish in Org Mode*:

=Pros=:

Flexibility: ox-publish is part of Org Mode and provides considerable
flexibility in customizing your website. You can define various publishing
options, including different output formats and configurations.

Integration: It seamlessly integrates with Org Mode, making it easy to manage
content directly within Emacs.

Customization: Allows extensive customization using Emacs Lisp, enabling you to
tailor your website to your preferences.

=Cons=:

Steep Learning Curve: Setting up and configuring ox-publish might have a
learning curve, especially if you're new to Emacs Lisp and detailed
configuration.

*org-static-blog Package*:

=Pros=:

Simplicity: org-static-blog is designed specifically for creating simple blogs
or websites using Org Mode. It's relatively straightforward to set up and use,
making it ideal if you want a quick solution.

Minimal Configuration: It requires minimal configuration, making it accessible
for beginners.

Focused Purpose: Primarily built for blogs, it might suit your needs if you're
looking for a straightforward blogging platform within Emacs.

=Cons=:

Limited Features: It might lack certain advanced features or customization
options compared to ox-publish, especially if you need more complex
functionality.

Less Flexible: As it's tailored for static blogs, if your website needs evolve
beyond blogging, you might face limitations.

*Decision Factors*:

Complexity vs. Simplicity: Consider how complex or simple you want your website
setup to be.

Customization Needs: Evaluate how much flexibility and customization options
you require for your website.

Future Growth: Consider whether your website's needs might expand beyond a blog
and if you need features beyond what a blogging-centric package provides.

Familiarity with Emacs Lisp: Assess your comfort level with Emacs Lisp, as
ox-publish might require more familiarity.

*Recommendation*:

If you prioritize simplicity, quick setup, and your website's focus is
primarily a blog, org-static-blog could be a good starting point.

If you foresee needing extensive customization, flexibility, or plan for
features beyond a blog, investing time in learning and using ox-publish might
be more beneficial in the long run.

Experiment with both to understand their functionalities and how they align
with your specific website goals. You can start with org-static-blog for a
quick setup and later explore ox-publish for more intricate customization and
flexibility if needed.
#+end_quote

These were my thoughts AFTER I have read the ChatGPT response:

#+begin_quote

Of course after reading this I leaned toward =ox-publish= instead of
org-static-blog. True, I have noticed that it lacks configuration options and
is kind of restraining. I read other people's tutorials on how they use
ox-publish and all the settings they have and I can not try to reuse them with
org-static-blog. Not nice..

Also there is this issue that I am facing today(re renders each post). -
https://github.com/bastibe/org-static-blog/issues/126

I just hope that tag feature works in ox-publish(it should) - then I am all
good. Let's dive in.
#+end_quote

[2023-12-16 Sat] Unfortunately, the tags don't work in ox-publish way of making
a website, so I will have to stick with org-static-blog. Not complaining. It
will force me to read thought the source code more often and and see how I can
use pieces of ox-publish in org-static-blog configuration.

[2023-12-19 Tue] The issue I have mentioned above still bugs me. I can use tags in my website,
BUT I can not compile it from the comfortable place of a custom script(instead
of having the config in my main config), it is not native Emacs, stuff is built
on top of it.. I once again decided to switch my mind and build my website with
built in tools - [[file:20231217T064942--build-a-website-with-emacs-and-ox-publish__emacs_websites.org][Build a website with emacs and ox-publish]]. I will have ALL the
features of org mode and standard publishing tools, exports will be clean, I
will also be able to have multiple configs for each blog/website and. I will
simply not have the tags.. which I will build on top by myself with the
inspiration of =org-static-blog=(someday in the future). The notes will not be
rendered into html that often, they won't be categorized by tags, but that's
not a big deal. Primary audience for these notes is still - me. I need to be
able to search through them and find the information in them. If it's not as
easy to do that on the web - so be it. I will work on that later.

* Implementation
** Get to know to =ox-publish=

First things first of course:

- Publishing Org-mode files to HTML - https://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html
- HTML specific export settings - https://orgmode.org/manual/HTML-Export.html#HTML-export
- My personal notes about building websites with =ox-publish= - [[file:20231217T064942--build-a-website-with-emacs-and-ox-publish__emacs_websites.org][Build a website
  with emacs and ox-publish]]
- I recommend to get to know to the source code if you like:
  #+begin_src bash
    /org/ox-html.el.gz
    /org/ox-publish.el.gz
  #+end_src
- =C-c C-e #= (org-export-dispatch) plus "template" - ALL possible in-file options
- =org-html-preamble-format= some useful %a %c %T functions

** Installation
*** Install the package

It is already installed with Emacs by default.

*** Decide where to place the configuration

Ox-publish configuration might get large if you start modifying the head,
preamble, postamble.. Also if you have multiple blogs/websites that you want to
publish this way, you need to have two separate configurations.

Eventually you realize that you can't store multiple configurations in your
emacs config file.

So the solution to this is to create a "build" folder and in it have such
files:

#+begin_src bash
devnotes/build/
├── build.sh
└── build-site.el
#+end_src

build.sh should be made to be executable =chmo o+x build.sh= and it's contents
are:
#+begin_src bash
  #!/bin/sh
  emacs -Q --script build-site.el
#+end_src

and =build-site.el= content would contain your ox-publish configuration(we will
remove the configuration from our emacs config and place it in this file with a
couple of additions).

#+begin_src emacs-lisp
  TODO ADD CONFIG
#+end_src

That's it. Now when we will run the bash script (=./build.sh=), it will fetch
the dependencies into the /build directory. It will then do the html conversion
from org files as you have specified and at the end it will print out "Build
complete!"

** Creating .org files to be rendered

You can simply create a .org file and then render it or:

*** Creating new notes with Denote

I am using Denote package, so I can use it's functionality to create a new
entry. Here are some [[file:20231125T212326--denote-features__emacs.org][denote features]].

I use Denote for my personal note taking, now I will also use it for
development note taking. Win win.

*** Creating a HTML page with my .emacs configuration

Simply made a symlink to my .org configuration file and it renders it together
with the rest of the .org files.

#+begin_src bash
   [nixos@nixos:~/GIT/devnotes/build]$ ln -s ../../dotfiles/.emacs.d/init.org init.org
#+end_src

UNFORTUNATELY - if you will chose to deploy to github pages, it will not
understand the symlink, the build will fail with such message:

#+begin_quote
Error: No such file or directory @ rb_check_realpath_internal - /github/workspace/org/init.org
#+end_quote

So I ditched this idea of having a symlink to my init.org. IF I will ever host
this site on another platform - I might try this workaround again.

*** You can also include other content from other files!

Like such - https://orgmode.org/manual/Include-Files.html

I have done this to include recent posts into index.org page.

*** Adding date to post title in sitemap

Inspiration here - https://taingram.org/blog/org-mode-blog.html

We can customize the entry format with a =sitemap-format-entry= function. In my
case I wanted to show the date inline with the blog post listings:

#+begin_src emacs-lisp
  (defun ag/org-sitemap-date-entry-format (entry style project)
    "Format ENTRY in org-publish PROJECT Sitemap format ENTRY ENTRY STYLE format that includes date."
    (let ((filename (org-publish-find-title entry project)))
      (if (= (length filename) 0)
          (format "*%s*" entry)
        (format "{{{timestamp(%s)}}} [[file:%s][%s]]"
                (format-time-string "%Y-%m-%d"
                                    (org-publish-find-date entry project))
                entry
                filename))))
#+end_src

Notice above we insert an [[https://orgmode.org/manual/Macro-Replacement.html][Org macro]] called timestamp, it is defined as follows:

#+begin_src emacs-lisp
  (setq org-export-global-macros
        '(("timestamp" . "@@html:<span class=\"timestamp\">[$1]</span>@@")))
#+end_src

We then also must inform =org-static-project-alist= about this change by using
our custom function in:

#+begin_src emacs-lisp
  :sitemap-format-entry ag/org-sitemap-date-entry-format
#+end_src

Re-render your .org files.

This macro adds some HTML around the timestamp for CSS styling, it has to be
done as a macro as otherwise Org escapes the HTML tags. The results are:

#+INCLUDE: "sitemap.org" :lines "-6"

** Linking

As of [2023-12-17 Sun] denote links do not work with exporting to html. Talked
with Prod about it, there is no fix for it now. So what I do now is I create
file links(C-c C-l file: <and your filename>) instead of denote links, these do
work. Also, if you get a link wrong and it is not possible to render it, the
compilation of html pages will break. That's good, because by checking the logs
you will see the broken link and can fix it. If you don't want the compilation
to stop, you can add this in your config:

#+begin_src emacs-lisp
  (setq org-export-with-broken-links 'mark)
#+end_src

You will simply see this in your html page(I prefer to know that there are
broken links during the html compilation, so I don't put the code above in my config).

#+begin_quote
[BROKEN LINK: denote:20231125T212326]
#+end_quote

Naming the links:

Example taken from here - https://orgmode.org/manual/Links-in-HTML-export.html

#+begin_src org
#+ATTR_HTML: :title The Org mode website :style color:red;
[[https://orgmode.org]]
#+end_src

** Previewing the generated site

Now that we have a few .org file notes in our directory and we have exported
them into html, we can preview them. Open the .html file and it will open in
the browser.

*** Preview the html file in the browser
If the file on my wsl lies here:

file://wsl.localhost/NixOS/home/nixos/GIT/devnotes/html/index.html, I would
open the whole html directory instead of a single file
(file://wsl.localhost/NixOS/home/nixos/GIT/devnotes/html/) to preview the
contents of it in the browser. This allows me to quickly open the files that I
want and see what has changed.

how to implement - here
https://systemcrafters.net/publishing-websites-with-org-mode/building-the-site/

*** Preview with simple-httpd
Or you can use =simple-httpd=. It's a package that can host your files as a
website on your local machine so that you can pull it up in your browser.

You can install simple-httpd from MELPA using M-x package-install or by putting
the following snippet in your Emacs configuration if you have use-package
installed and MELPA configured as a package source(install it globally in your
emacs config, not in build-site.el file):

#+begin_src emacs-lisp
  (use-package simple-httpd
    :ensure t)
#+end_src

Now you can run M-x httpd-serve-directory. It will prompt you for a directory
to serve from within Emacs.

Select the path of your public/ directory and then open your browser to
http://localhost:8080 to see the preview of your site! Set httpd-port to change
the default port if necessary.

Any time you regenerate the site files, you can just reload the page to see the
result of changes you made! (if you need to do a refresh, then it's the same as
opening in the browser...). That's why I don't bother with simple-httpd.

** CSS support in HTML export

Official docs for css support in HTML export - https://orgmode.org/manual/CSS-support.html

There are a few options when it comes to custom CSS on your website generated
with Emacs.

*** Use the default styles from ox-html

You have to do nothing, =ox-html= - =org-html-style-default= got you covered.
And it looks pretty good already by default.

But you can do like I did, went to =org-html-style-default= and copied the CSS
from there, placed in my own stylesheet. I can customize the look myself now a
little. Don't have to rewrite everything - just the parts that I want.

Also it's good to have the default styles as a reference close to me rather
than somewhere deep in the emacs docs.

*** Add custom classes to blocks of text/code

https://orgmode.org/manual/HTML-doctypes.html

*** import custom css
Default html export engine already has us covered with basic css, you can
enable/disable it like so:

#+begin_src emacs-lisp
  :html-head-include-default-style t/nil
#+end_src

But you might want to change the default css. Best bet is to do something like
this:

#+begin_src emacs-lisp
  :html-head "<link rel=\"stylesheet\" href=\"../static/style.css\" type=\"text/css\"/>"
#+end_src

Basically whatever you put in =style.css= now will end up in every html page of
yours. We can add any information you like there. But for now I am concerned
about css and favicon. This will link to my own style.css file, but you can
also use CDN's or bootstrap or whatever else.

Use your own config from another website/blog for example:

#+begin_src emacs-lisp
  :html-head-extra "<link rel=\"stylesheet\" href=\"https://arvydas.dev/static/style.css\" type=\"text/css\"/>"
#+end_src

*** org-html-themes
ORRR last thing that you can try when it comes to styling your website, try
using one of these, [[https://github.com/fniessen/org-html-themes][org-html-themes]].

You can point to one of these themes like such, by placing this code at the top
of your.org file:
#+begin_src org :tangle no
  #+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-NAME.setup
#+end_src

Or if you have downloaded the code(more future proof solution), add such line
at the top of your .org file.
#+begin_src org :tangle no
  #+SETUPFILE: PATH/TO/GIT/REPO/org/theme-NAME-local.setup
#+end_src

Of course we can also modify our =setq org-static-blog-page-header= to contain
the =org-html-themes=, but I won't do that this time since I know I will be
using my own custom stylesheet.

*** Note to self

Some css examples here(built with ox-publish though) -
https://github.com/arvydasg/emacs_blog/blob/master/css/style.css
** Javascript support in HTML export

Official docs - https://orgmode.org/manual/JavaScript-support.html

Add the .js files the same way as you would add .css file.

** Images in HTML export

*** Display images

Official docs - https://orgmode.org/manual/Images-in-HTML-export.html
My docs - [[file:20231126T003746--images-in-org-files__emacs.org][images in org files]]

*** One option is to add images as plain html

But then you can not change the size of it in lightbox.

#+BEGIN_EXPORT html
<figure>
  <img src="../media/Screenshot 2023-11-17 163344 - very quaint.png" alt="1.png" width="300px">
</figure>
#+END_EXPORT

*** Another option is to include a link to a file(the usual way)

To toggle the images(show/hide), use =org-toggle-inline-images=.

#+attr_html: :width 1200px
#+ATTR_ORG: :width 600
[[../media/water.jpg]]

Okay, so no now we know that we can create a yasnippet for this(I have mine
bound to =img=) and then I can drop images wherever.

*** Org download package for inserting images in org files

Optional, does not really work if in WSL - [[file:20231219T090909--using-org-download-package-in-wsl__emacs_windows_wsl.org][using org download package in WSL]]

*** Add a lightbox effect on the images

Follow - [[file:20231219T091704--add-a-lightbox-effect-for-images-in-html__javascript_websites.org][add a lightbox effect for images in html]]

** Preamble(nav) and postamble(footer)

Docs about them -  https://orgmode.org/manual/HTML-preamble-and-postamble.html

Postamble - https://taingram.org/blog/org-mode-blog.html
Postamble - nice footer and more? -
https://ict4g.net/adolfo/notes/emacs/linking-my-html-pages-to-source-code.html

Check other [[file:20231214T150411--inspirational-websites__emacs_websites.org][inspirational websites]] that are build with Emacs for some
inspiration.

Then simply modify - :html-preamble and :html-postamble in your config.

** Publishing

*** Free method with github
First, Github pages - [[file:20231212T123552--deploy-a-static-website-with-github-pages__git_websites.org][deploy a static website with github pages]]

Second, custom domain name - [[file:20231214T094426--setup-custom-domain-for-github-pages__git_websites.org][setup custom domain for github pages]]

*** Possibly non-free with a server(have not tried)

Also possible to server your html files over apache. And then simply push your
them over tramp with rsync - https://taingram.org/blog/org-mode-blog.html

*** Automatically publish your pages?(have not tried)

Automatically like so - https://ravi.pro/blog/blogging-with-emacs-org-mode.html

Or like so - https://systemcrafters.net/publishing-websites-with-org-mode/automated-site-publishing/

** Extra's

*** Add scroll to top button

Follow - [[file:20231219T172622--scroll-to-top-button__javascript_websites.org][scroll to top button]]

*** Adding analytics

**** Plausible

Follow - [[file:20231219T153629--add-website-analytics-with-plausible__websites.org][add website analytics with plausible]]

**** Google tag analytics

Follow - [[file:20231219T153712--add-website-analytics-with-google-tag-manager__websites.org][add website analytics with google tag manager]]

*** Table of contents at the side - inspiration

https://ckeditor.com/docs/ckeditor4/latest/features/codesnippet.html#hooking-a-custom-syntax-highlighter

*** short and clean links like here

https://diego.codes/post/blogging-with-org/

*** Print out proper underscore

add #+OPTIONS: ^:nil to all files

and write a post about it how it looks wiht and without

https://emacs.stackexchange.com/questions/10549/org-mode-how-to-export-underscore-as-underscore-instead-of-highlight-in-html
*** Tables in HTML export

https://orgmode.org/manual/Tables-in-HTML-export.html
*** Create editable text areas

Docs - https://orgmode.org/manual/Text-areas-in-HTML-export.html

If you ever want to try using this feature, here is an example:

#+ATTR_HTML: :textarea t :width 40
#+BEGIN_EXAMPLE
  (defun org-xor (a b)
     "Exclusive or."
     (if a (not b) b))
#+END_EXAMPLE

*** Tags solution

**** tags in the sidebar with JS

https://manateelazycat.github.io/tags.html

solution:

https://github.com/bastibe/org-static-blog/issues/125

use some js? Mobile content atrodo labai nice taip pat.

**** TODO create this functionality

build a tagging functionalitylike org static blog

*** presentation mode?

https://orgmode.org/worg/code/org-info-js/index.html#undefined

this guy uses it -
https://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html

"As I use org-info.js and track Worg git, I use "inherit-org-info-js" in all my
org projects:"

*** search function with agolia like Bozhidar

https://docs.projectile.mx/projectile/installation.html
