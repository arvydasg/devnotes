#+title:      expanding user model
#+date:       [2023-11-28 Tue 13:22]
#+filetags:   :code:django:
#+identifier: 20231128T132201

* expanding user model

https://simpleisbetterthancomplex.com/tutorial/2016/07/22/how-to-extend-django-user-model.html#onetoone
** Extending User Model Using a One-To-One Link

There is a good chance that this is what you want. Personally that is
the method I use for the most part. We will be creating a new Django
Model to store the extra information that relates to the User Model.

Bear in mind that using this strategy results in additional queries or
joins to retrieve the related data. Basically all the time you access
an related data, Django will fire an additional query. But this can be
avoided for the most cases. I will get back to that later on.

I usually name the Django Model as Profile:

#+begin_src python
  from django.db import models
  from django.contrib.auth.models import User

  class Profile(models.Model):
      user = models.OneToOneField(User, on_delete=models.CASCADE)
      bio = models.TextField(max_length=500, blank=True)
      location = models.CharField(max_length=30, blank=True)
      birth_date = models.DateField(null=True, blank=True)
#+end_src

Now this is where the magic happens: we will now define signals so our
Profile model will be automatically created/updated when we
create/update User instances.

#+begin_src python
  from django.db import models
  from django.contrib.auth.models import User
  from django.db.models.signals import post_save
  from django.dispatch import receiver

  class Profile(models.Model):
      user = models.OneToOneField(User, on_delete=models.CASCADE)
      bio = models.TextField(max_length=500, blank=True)
      location = models.CharField(max_length=30, blank=True)
      birth_date = models.DateField(null=True, blank=True)

  @receiver(post_save, sender=User)
  def create_user_profile(sender, instance, created, **kwargs):
      if created:
	  Profile.objects.create(user=instance)

  @receiver(post_save, sender=User)
  def save_user_profile(sender, instance, **kwargs):
      instance.profile.save()
#+end_src

Basically we are hooking the create_user_profile and save_user_profile
methods to the User model, whenever a save event occurs. This kind of
signal is called post_save.

in html:

#+begin_src html
  <h2>{{ user.get_full_name }}</h2>
  <ul>
    <li>Username: {{ user.username }}</li>
    <li>Location: {{ user.profile.location }}</li>
    <li>Birth Date: {{ user.profile.birth_date }}</li>
  </ul>
#+end_src

or in view:

#+begin_src python
  def update_profile(request, user_id):
      user = User.objects.get(pk=user_id)
      user.profile.bio = 'Lorem ipsum dolor sit amet, consectetur adipisicing elit...'
      user.save()
#+end_src
