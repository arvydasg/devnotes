#+title:      seb nixos installation
#+date:       [2023-11-30 Thu 20:34]
#+filetags:   :linux:nixos:wsl:
#+identifier: 20231130T203401
#+STARTUP:    overview

<2023-11-30 Thu> While trying to figure out how sebwsl works, I was
chatting with the Swedish guy, master linux guy, master computers guy,
master automatisations guy and has mentioned nixos a few times. I
decided to give it a try since I have such a willing helping me with
everything. Fun fact - he is the first person I was chatting with that
is using emacs. His config must be sick, can't wait to check it.

sebnix repo - https://github.sebank.se/sebnix/sebnix
kurejo configas - https://github.sebank.se/s2450g/config
docs? - https://nix-community.github.io/home-manager/options.html

* Install NixOS



check savo wsl info:
wsl --status
wsl --version
wsl --help

check ar kartais neturi nixos already isntalled:
wsl --list --verbose

download nix installation

https://github.sebank.se/sebnix/sebnix/releases/download/v0.3.2/nixos-wsl.tar.gz

probably its in downloads. go to downloads folder, open cmd and run:

wsl --import nixos .\nixos .\nixos-wsl.tar.gz

wsl --setdefault nixos

wsl --list --verbose (you can see that it also installed the
wsl-vpnkit(kad kol kas butu prisjunges prie vpn galeciau pasiekti
external ir sebinius resources. Jeigu atsiungiu nuo vpn - tuomet galiu
viska pasiekti. Bet iprastai juk mes dirbam per vpn, tai del to ir
reikia tokio paejimo. Naudojant sebwsl sita vpn-kit reiketu runinti su
atskira komanda - "wsl.exe -d wsl-vpnkit --cd /app wsl-vpnkit"))

wsl --list --verbose

wsl --distribution nixos

you are in.

random username, random location. Plain configuration, nothing in it yet.

Check if you can do ping.. quite important aht vpn-kit is running. It is built in
into sebnix, or otherwise sebwsl has that one also. `sebwsl apply vpnkit-install`
installs it. Check if its running also.

can run it like so manually in another terminal, dont stop the process. It allows
you to access things over wsl and over vpn - `wsl.exe -d wsl-vpnkit --cd /app wsl-vpnkit`

If nixos is running and you try to launch sebwsl - it will say that the stuff is taken.

So what worked for me is to:
- wsl --shutdown
- wsl -l -v
- make sure viskas shuttinosi down
- run dis(not sure if needed) - wsl.exe -d wsl-vpnkit --cd /app wsl-vpnkit
- wsl -d nixos

Customize your system with(runs emacs command temporarily just to edit the
config file, it does not install emacs(that we specify in nixos config files):

#+begin_src bash
  # Make system customizations
  sudo nix run nixpkgs#emacs /etc/nixos/system.nix
  # Make user
  sudo nix run nixpkgs#emacs /etc/nixos/home.nix
#+end_src

* Clone your own customization to NixOS

rm -rf /etc/nixos
git clone https://github.sebank.se/s2753g/nixos.gi into /etc

if asks, do this:

git config --global --add safe.directory /etc/nixos

then this:

sudo git checkout -b master

* Generate a GPG key

** preparation

we need gpg key for further configs. Curerntly we can not generate the
gpg key since it is not installed on nix by default.

make config to look like this to be able to generate gpg key:

flake.nix:

#+begin_src bash
{
  description = "A SEBNix WSL configuration";

  inputs = {
    sebnix.url = "git+https://github.sebank.se/sebnix/sebnix.git";
    nixpkgs.follows = "sebnix/nixpkgs";
  };

  outputs = inputs: {
    nixosConfigurations.wsl = inputs.nixpkgs.lib.nixosSystem {
      system = "x86_64-linux";
      modules = [
        inputs.sebnix.nixosModules.seb
        ./system.nix
      ];
    };
  };
}
#+end_src

system.nix:

#+begin_src bash
{
  networking.hostName = "wsl";

  seb = {
    sid = "s2753g";
    name = "Arvydas Gasparavicius";

    home = ./home.nix;
    wsl.enable = true;
  };

  wsl = {
    tarball.configPath = ./.;
    usbip.enable = true;
  };

  system.stateVersion = "23.05";
}
#+end_src


home.nix:

#+begin_src bash
  {pkgs, ...}: {
      programs.gpg.enable = true;
      services.gpg-agent.enable = true;

    home.packages = [
      pkgs.direnv
      pkgs.ghq
    ];

    home.stateVersion = "23.05";
  }
#+end_src


check if wsl-vpnkit-auto works

#+begin_src bash
  sudo systemctl status wsl-vpnkit-auto
  sudo systemctl restart wsl-vpnkit-auto
#+end_src

Apply configuration
sudo nixos-rebuild switch

after rebuild shutdown wsl:
wsl --shutdown

start wsl again and enter it
wsl -d nixos

now you should see your own username, you are logged in as it

** generating the key

try to run generate gpg key by following:
https://docs.github.com/en/authentication/managing-commit-signature-verification/generating-a-new-gpg-key

gpg --full-generate-key

enter enter enter everything

passphrase unsafe like usual

finally got this:

#+begin_src bash
  We need to generate a lot of random bytes. It is a good idea to perform
  some other action (type on the keyboard, move the mouse, utilize the
  disks) during the prime generation; this gives the random number
  generator a better chance to gain enough entropy.
  We need to generate a lot of random bytes. It is a good idea to perform
  some other action (type on the keyboard, move the mouse, utilize the
  disks) during the prime generation; this gives the random number
  generator a better chance to gain enough entropy.
  gpg: /home/s2753g/.gnupg/trustdb.gpg: trustdb created
  gpg: directory '/home/s2753g/.gnupg/openpgp-revocs.d' created
  gpg: revocation certificate stored as '/home/s2753g/.gnupg/openpgp-revocs.d/F6BCF177EBC0A2DADCEB5CCC7D173F66C85AEC43.rev'
  public and secret key created and signed.

  pub   ed25519/0x7D173F66C85AEC43 2023-11-30 [SC]
        Key fingerprint = F6BC F177 EBC0 A2DA DCEB  5CCC 7D17 3F66 C85A EC43
  uid                              s2753g (for nixos) <arvydas.gasparavicius@gmail.com>
  sub   cv25519/0xB0ADB1A712558C6E 2023-11-30 [E]
#+end_src

#+begin_src bash
[s2753g@wsl:~]$ gpg --list-secret-keys --keyid-format=long
gpg: checking the trustdb
gpg: marginals needed: 3  completes needed: 1  trust model: pgp
gpg: depth: 0  valid:   1  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 1u
/home/s2753g/.gnupg/pubring.kbx
-------------------------------
sec   ed25519/7D173F66C85AEC43 2023-11-30 [SC]
      Key fingerprint = F6BC F177 EBC0 A2DA DCEB  5CCC 7D17 3F66 C85A EC43
uid                 [ultimate] s2753g (for nixos) <arvydas.gasparavicius@gmail.com>
ssb   cv25519/B0ADB1A712558C6E 2023-11-30 [E]
#+end_src

follow the instructions further and use the key, which in this case is ~7D173F66C85AEC43~.

* Running Eamcs in NixOS

Currently experiencing the glitching bug, but can run emacs this way after installing it with:

sudo nix run nixpkgs#emacs29-pgtk
and then run it:
sudo , emacs -nw (you can run any application like that without installing)

To install the application yo need to add it to home.nix:

{pkgs, ...}: {
  programs.gpg.enable = true;
  services.gpg-agent.enable = true;

  home.packages = [
    pkgs.direnv
    pkgs.ghq
    pkgs.vim # new
    pkgs.tmux # new
    pkgs.emacs29 # new
  ];

  home.stateVersion = "23.05";
}

then run `sudo nixos-rebuild switch` to install the packages. (hopefully youll have vpnkit active to fetch the things)

can now run vim, emacs, tmux usually like you would. Sadly emacs still has gliches and can run it only wiht emacs -nw


* GIT authentication
