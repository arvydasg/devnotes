#+title:      multiple ways to blog with emacs
#+date:       [2023-12-12 Tue 20:03]
#+filetags:   :emacs:
#+identifier: 20231212T200335
#+STARTUP:    overview
#+OPTIONS: toc:t num:nil ^:nil ':t

explains how to build a blog wiht org mode - https://taingram.org/blog/org-mode-blog.html

* two blog examples

This way of creating a blog, unlike
https://github.com/arvydasg/org-static-blog, does not have a possibility to do
anything with tags. It does not generate separate pages for tags. In theory it
could be custom made with html/javascript, but if org-static-blog is there and
you need tags, use it instead.

This is good if you have a few org files that contain ALL the information a
bout a certain topic. For example - about Emacs, you have one file called
"emacs.org" and in it you have tens or hundreds of subheadings. You open one
file - search - find what you need. This is how I built codeacademy page.

what https://github.com/arvydasg/org-static-blog does is splits that 1
"emacs.org" file in to 100 small files(if you had 100 headlines as an example)
and creates separate blog post(html page) out of it, which can also be tagged
and later sorted by tags. This way you are closer to creating a network of
thoughts where you link one with another by using links. This blog is built
using denote notes, but linking wiht simple org-insert-link because as of
[2023-12-14 Thu], denote links do not work and are not being onderstood by
emacs html backend engine. This is how my arvydas.dev page is built.

* multiple ways to blog with emacs

In all ways - to deploy to github, must have index.html in the directory! Other
wise git will not know what to serve. Can use special symbols(bottom of the
page - https://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html)

#+begin_src emacs-lisp
  (setq org-publish-project-alist
        '(
          ("my-org-site"
           :base-directory "/home/nixos/GIT/org-publish/org/" ;tells Org the folder of files that we want to publish to HTML
           :publishing-directory "/home/nixos/GIT/org-publish/html/" ;configures the output folder for all published files
           :base-extension "org"
           :publishing-function org-html-publish-to-html ;tells Org that we want to publish the files as HTML
           :recursive t			;tells Org to publish .org files under all subdirectories of :base-directory
           :with-author nil           ; Don't include author name
           :with-creator t            ; Include Emacs and Org versions in footer
           :with-toc t                ; Include a table of contents
           :section-numbers nil       ; Don't include section numbers
           :time-stamp-file nil    ; Don't include time stamp in file
           :auto-sitemap t			;creates sitemap, a place with all the links
           )
          ("build-site.el" :components ("my-org-site"))))
#+end_src

** simple export with C-c C-e h o
*** PROS
- no dependencies, can do anywhere
- built in

*** CONS
- can't export more than one file
- unclear about links, have not tried, but probs dont work

** ox-publish C-c C-e P p

Can do basic batch export with header, footer, no need to use additional package.

More info here how it could be built from PKC times -
https://github.com/arvydasg/PKC_AFK/tree/main/AFK/src/pkcwiki

and from this guy's video -
https://www.youtube.com/watch?v=Elynmb3kTE4&ab_channel=ChrisMaiorana

and official docs -
https://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html

if the org file has not changed and you have deleted the html file and you try
to publish project again - it will say that the file is unmodified and will not
export to html. What we do then, we can forcefully publish it by setting a
prefix in org dispacher:

#+begin_quote
The export dispatcher, which you can summon with C-c C-e in the Org mode,
provides the relevant "Force publishing" option under C-f. Thus, to
force-publish the current file, type C-c C-e C-f P f.
#+end_quote

It will then publish ALL the files once again?

note(look for prefix) - https://orgmode.org/guide/Publishing.html#Publishing,
similar here also -
https://stackoverflow.com/questions/21258769/using-emacs-org-mode-how-to-publish-the-unchanged-files-in-a-project

can actually make links with C-c C-l to file, that's good.

you can also create a script instead of going the default way. explain why its
good and how to do  both ways.

script - dont export when link problems, nicer preview, logs, see what has been
done. no need to use the menus etc.

Check the docs for more options here -
[[help:org-publish-project-alist][org-publish-project-alist]] docs

*** PROS
- can work with multiple projects
- each project can be specified in a separate config
- built in
- many options to customise the site
- worked in pkc, should work for me now also

*** CONS
- links don't work

** org-static-blog-publish

*** PROS
- does everything for you
- tags
- archives
- rss feed
- especially good for blogs, but for other things - overkill?

*** CONS
- big program(installable package, not built in)
- links don't work
- can't handle multiple projects
** weblorg?

David tried -
https://www.youtube.com/watch?v=5R7ad5xz5wo&t=5746s&ab_channel=SystemCrafters
* Checkout
** TODO Cool check this out!
https://ict4g.net/adolfo/notes/emacs/linking-my-html-pages-to-source-code.html

amazing guide kaip org publish veikia - https://systemcrafters.net/publishing-websites-with-org-mode/building-the-site/

kaip jis prideda postamble ir style nice ir galiakas nice ir javascript
naudoja?

** TODO  bro what??? automatic to github?

https://systemcrafters.net/publishing-websites-with-org-mode/building-the-site/

In the next video Iâ€™ll show you how to automatically publish an Org-based
website to Git hosting services like GitHub Pages and Sourcehut Pages!

** TODO check his postamble/preamble things

https://ict4g.net/adolfo/notes/emacs/linking-my-html-pages-to-source-code.html
