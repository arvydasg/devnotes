<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<title><![CDATA[arvydasg.github.io]]></title>
<description><![CDATA[arvydasg.github.io]]></description>
<link>https://arvydasg.github.io/devnotes/html</link>
<lastBuildDate>Thu, 14 Dec 2023 16:33:37 +0000</lastBuildDate>
<item>
  <title><![CDATA[inspirational websites]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org58febd7">1. Websites made with Emacs and org-mode</a></li>
<li><a href="#org1364bf7">2. Other</a></li>
</ul>
</div>
</nav>

<div id="outline-container-org58febd7" class="outline-2">
<h2 id="org58febd7"><span class="section-number-2">1.</span> Websites made with Emacs and org-mode</h2>
<div class="outline-text-2" id="text-1">
<p>
-<a href="https://nicolas.petton.fr/blog/blogging-with-org-mode.html">https://nicolas.petton.fr/blog/blogging-with-org-mode.html</a>
</p>
<ul class="org-ul">
<li><a href="https://ogbe.net/">https://ogbe.net/</a></li>
<li><a href="https://bastibe.de/">https://bastibe.de/</a></li>
<li><a href="https://writepermission.com/">https://writepermission.com/</a></li>
<li><a href="https://config.daviwil.com/">https://config.daviwil.com/</a></li>
<li><a href="https://opensource.com/article/20/3/blog-emacs">https://opensource.com/article/20/3/blog-emacs</a></li>
<li><a href="https://psachin.gitlab.io/">https://psachin.gitlab.io/</a></li>
</ul>
</div>
</div>

<div id="outline-container-org1364bf7" class="outline-2">
<h2 id="org1364bf7"><span class="section-number-2">2.</span> Other</h2>
<div class="outline-text-2" id="text-2">
<ul class="org-ul">
<li><a href="https://drewdevault.com/">https://drewdevault.com/</a></li>
<li><a href="https://sourcehut.org/consultancy/">https://sourcehut.org/consultancy/</a></li>
<li><a href="https://www.jarmalavicius.lt/">https://www.jarmalavicius.lt/</a></li>
<li><a href="https://bitfehler.srht.site/">https://bitfehler.srht.site/</a></li>
<li><a href="https://bastibe.de/projects.html">https://bastibe.de/projects.html</a></li>
<li><a href="https://braindump.jethro.dev/">org-roam creator</a></li>
<li><a href="https://thibaultmarin.github.io/blog/posts/2016-11-13-Personal_website_in_org.html#orgb5773b9">this guy is org pro</a></li>
<li><a href="https://orgmode.org/worg/org-web.html">webpages made with org</a></li>
<li><a href="https://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html">original tut making sites with ORG not roam</a></li>
<li>crazy site with nodes - <a href="https://hugocisneros.com/notes/">https://hugocisneros.com/notes/</a></li>
<li>org roam creator website - <a href="https://braindump.jethro.dev/">https://braindump.jethro.dev/</a></li>
<li>crazy - <a href="https://anagora.org/index">https://anagora.org/index</a></li>
</ul>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> <a href="https://arvydasg.github.io/devnotes/html/tag-websites.html">websites</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[websites]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231214T150411--inspirational-websites__emacs_websites.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231214T150411--inspirational-websites__emacs_websites.html</guid>
  <pubDate>Thu, 14 Dec 2023 16:33:37 +0000</pubDate>
</item>
<item>
  <title><![CDATA[enable wsl on windows]]></title>
  <description><![CDATA[
<p>
<a href="https://web02.gonzaga.edu/faculty/talarico/vlsi/wsl.html">https://web02.gonzaga.edu/faculty/talarico/vlsi/wsl.html</a>
</p>

<p>
Then you have to install an image, whether its ubuntu, nixos, alpine or
anything else.
</p>

<p>
Guide how to do that here - <a href="20231128T165324--install-linux-distro-over-wsl__windows_wsl.html">install wsl repo on windows</a>.
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-windows.html">windows</a> <a href="https://arvydasg.github.io/devnotes/html/tag-wsl.html">wsl</a> </div>]]></description>
  <category><![CDATA[windows]]></category>
  <category><![CDATA[wsl]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231214T142532--enable-wsl-on-windows__windows_wsl.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231214T142532--enable-wsl-on-windows__windows_wsl.html</guid>
  <pubDate>Thu, 14 Dec 2023 16:33:37 +0000</pubDate>
</item>
<item>
  <title><![CDATA[my dev environment]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org268ed77">1. <span class="todo TODO">TODO</span> apie my computer setup</a></li>
</ul>
</div>
</nav>

<figure id="org9b1cbba">
<img src="../media/Screenshot 2023-11-17 163344 - very quaint.png" alt="Screenshot 2023-11-17 163344 - very quaint.png" width="400px">

</figure>

<div id="outline-container-org268ed77" class="outline-2">
<h2 id="org268ed77"><span class="section-number-2">1.</span> <span class="todo TODO">TODO</span> apie my computer setup</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>windows</li>
<li>wsl nixos</li>
<li>etc</li>
<li><a href="20231130T065309--fetch-and-pull-changes-automatically__git_wsl.html">kokie scriptai runina automatically</a></li>
<li>kaip darau savo bloga ir pan(yep)</li>
<li>kaip takinu notes(denote)</li>
<li>kaip codinu(vscode or emacs?)</li>
</ul>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-git.html">git</a> <a href="https://arvydasg.github.io/devnotes/html/tag-scripting.html">scripting</a> <a href="https://arvydasg.github.io/devnotes/html/tag-wsl.html">wsl</a> </div>]]></description>
  <category><![CDATA[git]]></category>
  <category><![CDATA[scripting]]></category>
  <category><![CDATA[wsl]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231214T105653--my-dev-environment__git_scripting_wsl.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231214T105653--my-dev-environment__git_scripting_wsl.html</guid>
  <pubDate>Thu, 14 Dec 2023 16:33:37 +0000</pubDate>
</item>
<item>
  <title><![CDATA[setup custom domain for github pages]]></title>
  <description><![CDATA[
<p>
This video below has a good explanation - <a href="https://www.youtube.com/watch?v=rKz6kIW4Uos&amp;ab_channel=MichaelSolorio">https://www.youtube.com/watch?v=rKz6kIW4Uos&amp;ab_channel=MichaelSolorio</a>
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-git.html">git</a> <a href="https://arvydasg.github.io/devnotes/html/tag-websites.html">websites</a> </div>]]></description>
  <category><![CDATA[git]]></category>
  <category><![CDATA[websites]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231214T094426--setup-custom-domain-for-github-pages__git_websites.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231214T094426--setup-custom-domain-for-github-pages__git_websites.html</guid>
  <pubDate>Thu, 14 Dec 2023 16:33:37 +0000</pubDate>
</item>
<item>
  <title><![CDATA[authenticate to git with gpg key]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org0a972ab">1. <span class="todo TODO">TODO</span> gpg key method</a></li>
</ul>
</div>
</nav>

<div id="outline-container-org0a972ab" class="outline-2">
<h2 id="org0a972ab"><span class="section-number-2">1.</span> <span class="todo TODO">TODO</span> gpg key method</h2>
<div class="outline-text-2" id="text-1">
<p>
Colleague gave some tutorials in work notes.
</p>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-git.html">git</a> <a href="https://arvydasg.github.io/devnotes/html/tag-gpg.html">gpg</a> </div>]]></description>
  <category><![CDATA[git]]></category>
  <category><![CDATA[gpg]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231214T061312--authenticate-to-git-with-gpg-key__git_gpg.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231214T061312--authenticate-to-git-with-gpg-key__git_gpg.html</guid>
  <pubDate>Thu, 14 Dec 2023 16:33:37 +0000</pubDate>
</item>
<item>
  <title><![CDATA[authenticate to git with personal access token]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgaa68fbd">1. Personal access token</a></li>
<li><a href="#org631c7f7">2. Misc info</a></li>
</ul>
</div>
</nav>

<div id="outline-container-orgaa68fbd" class="outline-2">
<h2 id="orgaa68fbd"><span class="section-number-2">1.</span> Personal access token</h2>
<div class="outline-text-2" id="text-1">
<p>
After you have <a href="20231211T161252--introduce-yourself-to-git__git.html">introduced yourself to git</a>.
</p>

<p>
When you do a git operation(with magit or just from the terminal) you will be
prompted for password. One way is to get with a generated <code>personal access
token</code> in github developer settings.
</p>

<p>
Go generate that token, save it somewhere safe.
</p>

<p>
Then in the terminal do:
</p>

<div class="org-src-container">
<pre class="src src-bash">git config --global --replace-all credential.helper cache
git config --global credential.helper store
</pre>
</div>

<p>
Now try to push the code, enter your git username as username and enter the
token that you have generated as password.
</p>

<p>
Git will remember your credentials for future git operations.
</p>
</div>
</div>

<div id="outline-container-org631c7f7" class="outline-2">
<h2 id="org631c7f7"><span class="section-number-2">2.</span> Misc info</h2>
<div class="outline-text-2" id="text-2">
<p>
Changing the token - <a href="https://stackoverflow.com/questions/46645843/where-to-store-my-git-personal-access-token">Explanation here</a>.
</p>

<div class="org-src-container">
<pre class="src src-bash">git config --list (some info about you)
</pre>
</div>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-git.html">git</a> </div>]]></description>
  <category><![CDATA[git]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231214T060637--authenticate-to-git-with-personal-access-token__git.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231214T060637--authenticate-to-git-with-personal-access-token__git.html</guid>
  <pubDate>Thu, 14 Dec 2023 16:33:37 +0000</pubDate>
</item>
<item>
  <title><![CDATA[authenticate to git with ssh]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org8622132">1. <span class="todo TODO">TODO</span> ssh key method</a></li>
</ul>
</div>
</nav>

<div id="outline-container-org8622132" class="outline-2">
<h2 id="org8622132"><span class="section-number-2">1.</span> <span class="todo TODO">TODO</span> ssh key method</h2>
<div class="outline-text-2" id="text-1">
<p>
I have described it in work notes.
</p>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-git.html">git</a> <a href="https://arvydasg.github.io/devnotes/html/tag-ssh.html">ssh</a> </div>]]></description>
  <category><![CDATA[git]]></category>
  <category><![CDATA[ssh]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231214T060558--authenticate-to-git-with-ssh__git_ssh.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231214T060558--authenticate-to-git-with-ssh__git_ssh.html</guid>
  <pubDate>Thu, 14 Dec 2023 16:33:37 +0000</pubDate>
</item>
<item>
  <title><![CDATA[deploy a static website with github pages]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org1f37195">1. Create the main <code>username.github.io</code> page</a></li>
<li><a href="#orge878e39">2. Create <code>subpages</code> for <code>username.github.io</code></a></li>
</ul>
</div>
</nav>

<div id="outline-container-org1f37195" class="outline-2">
<h2 id="org1f37195"><span class="section-number-2">1.</span> Create the main <code>username.github.io</code> page</h2>
<div class="outline-text-2" id="text-1">
<p>
The idea is - you have lot's of html pages(or a single html page).
</p>

<p>
You add it(them) to github repo which is named
<code>&lt;yourgithubusername@github.io&gt;</code>. In my case -
<a href="https://github.com/arvydasg/arvydasg.github.io">https://github.com/arvydasg/arvydasg.github.io</a>.
</p>

<p>
Then in <code>repo settings -&gt; pages</code> you specify that you want master branch to be
deployed to github pages. After a few minutes you can go to
<code>&lt;yourgithubusername@github.io&gt;</code>. In my case it is <a href="https://arvydasg.github.io/">https://arvydasg.github.io/</a>.
Wait 5 minutes, do a hard browser refresh and you should see the page.
</p>

<p>
If I have a domain name, I can then specify it in repo settings as well. In my
case it is <code>arvydas.dev</code>. You might need to do some configuration on domain
side also to link to github. Probably <a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site">this</a> guide could help with that.
</p>
</div>
</div>

<div id="outline-container-orge878e39" class="outline-2">
<h2 id="orge878e39"><span class="section-number-2">2.</span> Create <code>subpages</code> for <code>username.github.io</code></h2>
<div class="outline-text-2" id="text-2">
<p>
So you have <code>&lt;yourgithubusername@github.io&gt;</code> website up and running. But you
want to deploy another page. You can do that by creating another repo(any name
now, for example a repo called <code>teddybears</code>), repo settings -&gt; pages and choose
master branch, save, save and after 5 minutes or so it will display the
contents of your teddybears repo under
<code>&lt;yourgithubusername@github.io/teddybears&gt;</code>.
</p>

<p>
I have codeacademy setup this way - <a href="https://github.com/arvydasg/codeacademy">https://github.com/arvydasg/codeacademy</a>
Also devnotes - <a href="https://arvydas.dev/devnotes/html">https://arvydas.dev/devnotes/html</a>
</p>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-git.html">git</a> <a href="https://arvydasg.github.io/devnotes/html/tag-websites.html">websites</a> </div>]]></description>
  <category><![CDATA[git]]></category>
  <category><![CDATA[websites]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231212T123552--deploy-a-static-website-with-github-pages__git_websites.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231212T123552--deploy-a-static-website-with-github-pages__git_websites.html</guid>
  <pubDate>Thu, 14 Dec 2023 16:33:37 +0000</pubDate>
</item>
<item>
  <title><![CDATA[introduce yourself to git]]></title>
  <description><![CDATA[
<p>
When on new system, you might get such message when trying to perform a
push/pull git command:
</p>

<blockquote>
<p>
Author identity unknown
</p>

<p>
Please tell me who you are.
</p>

<p>
Run
</p>

<p>
git config &#x2013;global user.email "you@example.com"
</p>

<p>
git config &#x2013;global user.name "Your Name"
</p>
</blockquote>

<p>
In my case that would be:
</p>

<div class="org-src-container">
<pre class="src src-bash">git config --global user.email "azegaspa@gmail.com"
git config --global user.name "arvydasg"
</pre>
</div>

<p>
You will get prompted for a password.
</p>

<p>
There are multiple ways to get that password:
</p>
<ul class="org-ul">
<li>write your git password manually each time</li>
<li><a href="20231214T060637--authenticate-to-git-with-personal-access-token__git.html">authenticate with personal access token</a></li>
<li><a href="20231214T060558--authenticate-to-git-with-ssh__git_ssh.html">authenticate with ssh</a></li>
<li><a href="20231214T061312--authenticate-to-git-with-gpg-key__git_gpg.html">authenticate with gpg</a></li>
</ul>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-git.html">git</a> </div>]]></description>
  <category><![CDATA[git]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231211T161252--introduce-yourself-to-git__git.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231211T161252--introduce-yourself-to-git__git.html</guid>
  <pubDate>Thu, 14 Dec 2023 16:33:37 +0000</pubDate>
</item>
<item>
  <title><![CDATA[first nixos installation]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org17e0efa">1. <span class="todo TODO">TODO</span> Why NixOS</a></li>
<li><a href="#org3c82e89">2. Why NixOS by others</a></li>
<li><a href="#org7a40f68">3. Documentation</a></li>
<li><a href="#org1f1dc2d">4. Installation on WSL</a></li>
<li><a href="#org3e1f696">5. Configure the installation over emacs</a></li>
<li><a href="#org5cfd6f4">6. Using your own custom nixos configuration file</a></li>
<li><a href="#org429f188">7. Setting up git</a></li>
</ul>
</div>
</nav>

<div id="outline-container-org17e0efa" class="outline-2">
<h2 id="org17e0efa"><span class="section-number-2">1.</span> <span class="todo TODO">TODO</span> Why NixOS</h2>
<div class="outline-text-2" id="text-1">
<p>
AFTER you reinstall your computer - to install the DEV environment, all you
have to take with you is <code>/etc/nixos/configuration.nix</code> file, everything is
described in it. Amazing!
</p>

<p>
Avoid long reinstall &amp; config process
</p>
</div>
</div>

<div id="outline-container-org3c82e89" class="outline-2">
<h2 id="org3c82e89"><span class="section-number-2">2.</span> Why NixOS by others</h2>
<div class="outline-text-2" id="text-2">
<ul class="org-ul">
<li><a href="https://github.com/hlissner/dotfiles">https://github.com/hlissner/dotfiles</a></li>
<li><a href="https://github.com/terlar/nix-config">https://github.com/terlar/nix-config</a></li>
</ul>
</div>
</div>

<div id="outline-container-org7a40f68" class="outline-2">
<h2 id="org7a40f68"><span class="section-number-2">3.</span> Documentation</h2>
<div class="outline-text-2" id="text-3">
<ul class="org-ul">
<li>nixos github repo - <a href="https://github.com/nix-community/NixOS-WSL">https://github.com/nix-community/NixOS-WSL</a></li>
<li>nixos manual - <a href="https://nixos.org/manual/nix/stable/">https://nixos.org/manual/nix/stable/</a></li>
</ul>
</div>
</div>

<div id="outline-container-org1f1dc2d" class="outline-2">
<h2 id="org1f1dc2d"><span class="section-number-2">4.</span> Installation on WSL</h2>
<div class="outline-text-2" id="text-4">
<p>
Steps described here:
</p>

<p>
<a href="https://github.com/nix-community/NixOS-WSL">https://github.com/nix-community/NixOS-WSL</a>
</p>

<p>
But basically download nixos-wsl.tar.gz into your windows /Download folder
</p>

<p>
Then in CMD run(while in /Downloads folder):
</p>
<div class="org-src-container">
<pre class="src src-bash">wsl --import NixOS .\NixOS\ nixos-wsl.tar.gz --version 2
</pre>
</div>

<p>
check if it was really installed:
</p>
<div class="org-src-container">
<pre class="src src-bash">wsl -l -v
</pre>
</div>

<p>
You should see NixOS listed. Now we can run nixos:
</p>
<div class="org-src-container">
<pre class="src src-bash">wsl -d NixOS
</pre>
</div>

<p>
After the initial installation, you need to update your channels once, to be
able to use <code>nixos-rebuild</code>:
</p>
<div class="org-src-container">
<pre class="src src-bash">sudo nix-channel --add https://nixos.org/channels/nixos-23.11 nixos
sudo nix-channel --update
</pre>
</div>
</div>
</div>

<div id="outline-container-org3e1f696" class="outline-2">
<h2 id="org3e1f696"><span class="section-number-2">5.</span> Configure the installation over emacs</h2>
<div class="outline-text-2" id="text-5">
<p>
Enter nix-shell to use emacs(it does not get installed on the system, just
<a href="https://nix.dev/tutorials/first-steps/ad-hoc-shell-environments">TEMPORARILY</a> FROM NIXOS CACHE?). So I can then modify the
<code>/etc/nixos/configuration.nix</code> file.
</p>
<div class="org-src-container">
<pre class="src src-bash">nix-shell -p emacs29
</pre>
</div>

<p>
Then let's run emacs in nix-shell(run with sudo)
</p>
<div class="org-src-container">
<pre class="src src-bash">sudo emacs
</pre>
</div>

<p>
Ok now you are in emacs, but in nix-shell. If we turn off nixos now, when we
launch it again, emacs will not be available. Only after you run <code>nix-shell -p
emacs</code>. Let's install emacs permanetely:
</p>
<div class="org-src-container">
<pre class="src src-bash">sudo emacs /etc/nixos/configuration.nix
</pre>
</div>

<p>
add these lines:
</p>
<div class="org-src-container">
<pre class="src src-nix">environment.systemPackages = with pkgs; [
  emacs29
  git
];
</pre>
</div>

<p>
we Install emacs29 because of <a href="20231125T220943--seq-keep-error-message-in-emacs__emacs_magit.html">seq error message</a>.
</p>

<p>
after you do that, <code>C-d</code> to go back to nixos@nixos(out of nix-shell) and BUILD
the nixos with the new changes(emacs installation).
</p>
<div class="org-src-container">
<pre class="src src-bash">sudo nixos-rebuild switch
</pre>
</div>

<p>
After this runs, you should be able to use Emacs and use git!
</p>

<p>
Clone the dotfiles repo:
</p>
<div class="org-src-container">
<pre class="src src-bash">mkdir ~/GIT
cd ~/GIT
git clone https://github.com/arvydasg/dotfiles
ln -s GIT/dotfiles/.emacs.d/ ~/.emacs.d
cd ~/.emacs.d
git update-index --assume-unchanged init.el
</pre>
</div>

<p>
Try to launch emacs for all the packages to be installed.
</p>
</div>
</div>

<div id="outline-container-org5cfd6f4" class="outline-2">
<h2 id="org5cfd6f4"><span class="section-number-2">6.</span> Using your own custom nixos configuration file</h2>
<div class="outline-text-2" id="text-6">
<p>
It suchs to not be able to edit the <code>/etc/nixos/configuration.nix</code> file over
emacs as nixos default user. I want this file to not be owned by root, but bu
nixos user. So what we will do is we will:
</p>

<div class="org-src-container">
<pre class="src src-bash"># delete current nixos directory
sudo rm -rf /etc/nixos
# put our config folder instead of the default one
sudo ln -s ~/GIT/dotfiles/nixos/ /etc/nixos
</pre>
</div>

<p>
You are done. Should be able to edit <code>configuration.nix</code> file now.
</p>
</div>
</div>

<div id="outline-container-org429f188" class="outline-2">
<h2 id="org429f188"><span class="section-number-2">7.</span> Setting up git</h2>
<div class="outline-text-2" id="text-7">
<p>
First try <a href="20231211T161252--introduce-yourself-to-git__git.html">this</a>, then one of these:
</p>

<ul class="org-ul">
<li><a href="20231214T060637--authenticate-to-git-with-personal-access-token__git.html">authenticate with personal access token</a></li>
<li><a href="20231214T060558--authenticate-to-git-with-ssh__git_ssh.html">authenticate with ssh</a></li>
<li><a href="20231214T061312--authenticate-to-git-with-gpg-key__git_gpg.html">authenticate with gpg</a></li>
</ul>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-nixos.html">nixos</a> </div>]]></description>
  <category><![CDATA[nixos]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231211T151427--first-nixos-installation__nixos.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231211T151427--first-nixos-installation__nixos.html</guid>
  <pubDate>Thu, 14 Dec 2023 16:33:37 +0000</pubDate>
</item>
<item>
  <title><![CDATA[wsl clock is out of sync with windows]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org7def7af">1. The problem</a></li>
<li><a href="#orge20b684">2. Possible solution</a></li>
<li><a href="#org765db8e">3. Solution that works best for me now</a></li>
</ul>
</div>
</nav>

<div id="outline-container-org7def7af" class="outline-2">
<h2 id="org7def7af"><span class="section-number-2">1.</span> The problem</h2>
<div class="outline-text-2" id="text-1">
<p>
Having this problem -
<a href="https://stackoverflow.com/questions/65086856/wsl2-clock-is-out-of-sync-with-windows">https://stackoverflow.com/questions/65086856/wsl2-clock-is-out-of-sync-with-windows</a>
</p>

<p>
run this in powershell to confirm it:
</p>

<div class="org-src-container">
<pre class="src src-bash">Get-Date; wsl date
</pre>
</div>

<p>
You will notice two different times. They should be the same.
</p>
</div>
</div>

<div id="outline-container-orge20b684" class="outline-2">
<h2 id="orge20b684"><span class="section-number-2">2.</span> Possible solution</h2>
<div class="outline-text-2" id="text-2">
<p>
Solution is to run <code>sudo hwclock -s</code> command. It will sync the time. For that
moment. But time will shift again when I put the laptop to sleep.
</p>

<p>
I don want to run the command manually each time. I will make a script that
runs this command and put it in <code>.bashrc</code> so it automatically runs the script
each time I launch wsl. Should be enough?
</p>

<p>
<span class="timestamp-wrapper"><span class="timestamp">[2023-12-10 Sun] </span></span> sudo hwclock -s is not an option.. it does not always work
when I run it.
</p>
</div>
</div>

<div id="outline-container-org765db8e" class="outline-2">
<h2 id="org765db8e"><span class="section-number-2">3.</span> Solution that works best for me now</h2>
<div class="outline-text-2" id="text-3">
<p>
<a href="https://github.com/microsoft/WSL/issues/8204#issuecomment-1338334154">https://github.com/microsoft/WSL/issues/8204#issuecomment-1338334154</a>
</p>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-windows.html">windows</a> <a href="https://arvydasg.github.io/devnotes/html/tag-wsl.html">wsl</a> </div>]]></description>
  <category><![CDATA[windows]]></category>
  <category><![CDATA[wsl]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231209T200922--wsl-clock-is-out-of-sync-with-windows__windows_wsl.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231209T200922--wsl-clock-is-out-of-sync-with-windows__windows_wsl.html</guid>
  <pubDate>Thu, 14 Dec 2023 16:33:37 +0000</pubDate>
</item>
<item>
  <title><![CDATA[fetch and pull changes automatically]]></title>
  <description><![CDATA[
<p>
This is mainly important when you are working ont he same repo on two different
machines. You make changes on one, then login to another one - you must always
rememebr to pull those changes, otherwise if you make your own - you will get
into merge conflicst. And as of <span class="timestamp-wrapper"><span class="timestamp">[2023-12-14 Thu] </span></span> I am not so good at solving
those. So I try to avoid them as much as possible.
</p>

<p>
This is the reason I am creating this script that will automatically run <code>git
fetch &amp;&amp; git pull</code> that command for me whenever I turn on the WSL.
</p>

<p>
The script example:
</p>

<div class="org-src-container">
<pre class="src src-bash">#!/bin/bash
REPO_DIR="$HOME/GIT/notes/"

function auto-fetch-pull() {
    if [ -d "$1" ]; then
        cd "$1" || exit
        echo "Fetching latest changes..."
        git fetch
        echo "Pulling changes into your branch..."
        git pull
    else
        echo "Directory '$1' not found."
    fi
}

auto-fetch-pull "$REPO_DIR"
</pre>
</div>

<p>
Ensure the script has execute permissions:
</p>
<div class="org-src-container">
<pre class="src src-bash">chmod +x auto_fetch_pull.sh
</pre>
</div>

<p>
Then, try running the script:
</p>
<div class="org-src-container">
<pre class="src src-bash">./auto_fetch_pull.sh
</pre>
</div>

<p>
Add the script execution to your .bashrc
</p>
<div class="org-src-container">
<pre class="src src-bash">echo '~/.emacs.d/MISC/auto_fetch_pull.sh' &gt;&gt; ~/.bashrc
</pre>
</div>

<p>
Each time WSL (or any other linux distribution launches) launches, one of the
thing it does that concern us in this case, is it runs <code>source .bashrc</code>.
Basically evaluates and applies everything that it sees in <code>.bashrc</code> file. And
since we have conveniently placed our script into .bashrc with the last
command - it will run the script each time WSL is launched.
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-git.html">git</a> <a href="https://arvydasg.github.io/devnotes/html/tag-wsl.html">wsl</a> </div>]]></description>
  <category><![CDATA[git]]></category>
  <category><![CDATA[wsl]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231130T065309--fetch-and-pull-changes-automatically__git_wsl.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231130T065309--fetch-and-pull-changes-automatically__git_wsl.html</guid>
  <pubDate>Thu, 14 Dec 2023 16:33:37 +0000</pubDate>
</item>
<item>
  <title><![CDATA[dockerfile example of emacs installation]]></title>
  <description><![CDATA[
<p>
PERFECT DOCS/REFERECE -
<a href="https://kapeli.com/cheat_sheets/Dockerfile.docset/Contents/Resources/Documents/index">https://kapeli.com/cheat_sheets/Dockerfile.docset/Contents/Resources/Documents/index</a>
</p>

<p>
Dockerfile best practices -
<a href="https://docs.docker.com/develop/develop-images/dockerfile_best-practices/">https://docs.docker.com/develop/develop-images/dockerfile_best-practices/</a>
</p>

<p>
Dockerfile example used to generate emacs image:
</p>

<div class="org-src-container">
<pre class="src src-bash"># The emacs installation phase itself takes aroun 7 minutes to complete
# for the first time after we change something in the initial or second
# stage - everything under them will have to be rerun... meaning another
# 7 minutes of your life. Not cool.

# so what I found is that you can split the Dockerfile into stages. I
# will put the steps that might change frequently towards the end of
# the Dockerfile to maximize caching. By separating the stages in this
# manner, Docker will reuse the intermediate images created in each
# stage, utilizing the cache for the unchanged layers. When changes
# occur, only the steps AFTER THE MODIFICATION will be re-executed.

# -----------------------------------------------------------
# INITIAL STAGE: Installing essential packages and tools
FROM ubuntu:latest AS base

RUN apt update &amp;&amp; apt upgrade -y \
    &amp;&amp; apt install sudo make wget -y

# -----------------------------------------------------------
# SECOND STAGE: Installing Git and cloning the repository
FROM base AS gitclone

RUN apt-get install -y git \
    &amp;&amp; git clone https://github.com/arvydasg/dotfiles.git /root/dotfiles

# -----------------------------------------------------------
# THIRD STAGE: Emacs installation
FROM gitclone AS emacs

WORKDIR /root
COPY compile-install-emacs.sh compile-install-emacs.sh
RUN chmod +x compile-install-emacs.sh
RUN sh compile-install-emacs.sh

# -----------------------------------------------------------
# FOURTH STAGE: Random stuff
# since emacs has been installed(heaviest process), we can do any
# random installs and actions here now, so only the steps under would
# be rerun and not the whole container including the emacs compilation
# stage(Third stage)
RUN apt install vim htop tmux -y

# -----------------------------------------------------------
# FINAL STAGE
FROM emacs AS final

ENTRYPOINT ["emacs"]
</pre>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-docker.html">docker</a> <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> </div>]]></description>
  <category><![CDATA[docker]]></category>
  <category><![CDATA[emacs]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231128T175614--dockerfile-example-of-emacs-installation__docker_emacs.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231128T175614--dockerfile-example-of-emacs-installation__docker_emacs.html</guid>
  <pubDate>Thu, 14 Dec 2023 16:33:37 +0000</pubDate>
</item>
<item>
  <title><![CDATA[docker commands]]></title>
  <description><![CDATA[
<div class="org-src-container">
<pre class="src src-bash"># --------------------------------------------------------------------
# STATS
# active and running containers
docker ps
# previously ran images, you can start them and connect to them again
docker ps -a
# docker stats
docker stats
# list docker images available
docker images

# --------------------------------------------------------------------
# BUILD/RUN
# build an image with Dockerfile in the current dir
docker build .

# run the docker image
docker run &lt;image_id/name&gt;

# Run the container with --rm flag to automatically remove the container
# that was created when the container EXITS. Good for testing.
docker run --rm b3e0903d079d

# something
docker run -rm -it b3e0903d079d /bin/bash

# --------------------------------------------------------------------
# CONNECT TO THE DOCKER
# run in interactive mode, connect to it
docker run -ti ubuntu /bin/bash
docker run -ti ubuntu /bin/bash -c "apt update &amp;&amp; apt upgrade -y"

# run in interactive mode, connect to it, will be deleted after
# disconnect
docker run -ti --rm ubuntu /bin/bash

# attach to already created container!!!!
docker attach &lt;id&gt;

# --------------------------------------------------------------------
# CLEANUP

# remove docker containers from ps -a
docker rm -f &lt;id&gt;
# remove docker image
docker rmi &lt;image_name&gt;
# delete or remove all docker data like containers, images and volumes
# delete all containers
docker rm --force `docker ps -qa`
# delte all images
docker rmi --force `docker images -aq`
# idk prune smth
docker volume prune

# --------------------------------------------------------------------
# SAVE

# save an image of container. A commit is only necessary after each
# run if you want to make a snapshot there for future use, otherwise
# the container itself will stick around for you to keep using.
docker commit &lt;id&gt; new_name
</pre>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-docker.html">docker</a> </div>]]></description>
  <category><![CDATA[docker]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231128T172943--docker-commands__docker.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231128T172943--docker-commands__docker.html</guid>
  <pubDate>Thu, 14 Dec 2023 16:33:37 +0000</pubDate>
</item>
<item>
  <title><![CDATA[wsl commands]]></title>
  <description><![CDATA[
<p>
<a href="https://learn.microsoft.com/en-us/windows/wsl/basic-commands">https://learn.microsoft.com/en-us/windows/wsl/basic-commands</a>
</p>

<div class="org-src-container">
<pre class="src src-bash"># list available linux distros
wsl --list --online
# install a default distro(which is ubuntu)
wsl --install
# View the list of distros and their current state:
wsl.exe -l -v
# Shutdown everything:
wsl.exe --shutdown
# Terminate a specific distro:
wsl.exe -t &lt;DistroName&gt;
# Boot up the default distro (marked with *):
wsl.exe
# Boot up a specific distro:
wsl.exe -d &lt;DistroName&gt;
# update wsl
wsl --update
# check wsl status
wsl --status
# check wsl version
wsl --version
# wsl help
wsl --help
</pre>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-wsl.html">wsl</a> </div>]]></description>
  <category><![CDATA[wsl]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231128T172125--wsl-commands__wsl.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231128T172125--wsl-commands__wsl.html</guid>
  <pubDate>Thu, 14 Dec 2023 16:33:37 +0000</pubDate>
</item>
<item>
  <title><![CDATA[install linux distro over wsl]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org5febc48">1. Installation instructions</a></li>
<li><a href="#org4b6fa4e">2. Setup terminal</a></li>
</ul>
</div>
</nav>
<p>
Ok so at <span class="timestamp-wrapper"><span class="timestamp">&lt;2023-11-26 Sun&gt; </span></span> I was very much getting to know to wsl and how to
install it properly.
</p>

<p>
First reason - I finally decided to use emacs more so I could use denote TODO -
add a link. For that of course I did not want to override my already custom
emacs config and notes file structure, wanted to create a NEW WSL UBUNTU
instance where I could experiment.
</p>

<p>
Second reason - I was <a href="20231128T164359--wsl-glitches-in-gui-applications__wsl.html">getting gliches in my wsl</a>.
</p>

<p>
So while I was trying to solve the first thing, I found out about the second
thing and that led me to all this documentation below.
</p>

<div id="outline-container-org5febc48" class="outline-2">
<h2 id="org5febc48"><span class="section-number-2">1.</span> Installation instructions</h2>
<div class="outline-text-2" id="text-1">
<p>
After you have <a href="20231214T142532--enable-wsl-on-windows__windows_wsl.html">enabled wsl on windows</a>, you can do these steps:
</p>

<p>
in cmd/powershell run:
</p>

<div class="org-src-container">
<pre class="src src-shell"># see all repos available
wsl --list
# install the default repo(or any other)
wsl --install ubuntu
# install a custom repo version(can have multiple different versions installed)
wsl --install -d Ubuntu-20.04
</pre>
</div>

<p>
After your distro is installed, login to it:
</p>

<div class="org-src-container">
<pre class="src src-bash"># View the list of distros and their current state:
wsl.exe -l -v
 # Boot up a specific distro:
wsl.exe -d &lt;DistroName&gt;
</pre>
</div>

<p>
And confirm the version number:
</p>
<div class="org-src-container">
<pre class="src src-bash">lsb_release -a
</pre>
</div>

<p>
Now check "add remove programs" if your wsl instance is listed there.
</p>
</div>
</div>

<div id="outline-container-org4b6fa4e" class="outline-2">
<h2 id="org4b6fa4e"><span class="section-number-2">2.</span> Setup terminal</h2>
<div class="outline-text-2" id="text-2">
<p>
Setup terminal to be ubuntu. So when you open cmd you would also see
the ubuntu terminal.
</p>

<p>
After the installation ubuntu wsl make ubuntu profile in cmd -&gt; settings -&gt;
profiles - &gt; new profile -&gt; duplicate ubuntu profile
</p>

<p>
to install emacs now, follow - TODO
</p>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-windows.html">windows</a> <a href="https://arvydasg.github.io/devnotes/html/tag-wsl.html">wsl</a> </div>]]></description>
  <category><![CDATA[windows]]></category>
  <category><![CDATA[wsl]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231128T165324--install-linux-distro-over-wsl__windows_wsl.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231128T165324--install-linux-distro-over-wsl__windows_wsl.html</guid>
  <pubDate>Thu, 14 Dec 2023 16:33:37 +0000</pubDate>
</item>
<item>
  <title><![CDATA[wsl glitches in gui applications]]></title>
  <description><![CDATA[
<p>
Registered a bug in WSLg - <a href="https://github.com/microsoft/wslg/issues/1148">https://github.com/microsoft/wslg/issues/1148</a>
</p>

<p>
Some more notes below here. From when I was debugging this issue.
</p>

<hr>

<p>
Or here with gui - <a href="https://web02.gonzaga.edu/faculty/talarico/vlsi/wsl.html">https://web02.gonzaga.edu/faculty/talarico/vlsi/wsl.html</a>
</p>

<p>
po visu situ zingsniu install wsl 2 kernel thing from here - <a href="https://learn.microsoft.com/en-us/windows/wsl/install-manual#step-4---download-the-linux-kernel-update-package">https://learn.microsoft.com/en-us/windows/wsl/install-manual#step-4---download-the-linux-kernel-update-package</a>
</p>

<p>
first do the wsl kernel update only then isntall wsl , since we have installed wsl 2 - needed for gui apps
</p>

<p>
wsl &#x2013;update
wsl &#x2013;shutdown
wsl &#x2013;install
wsl.exe &#x2013;list &#x2013;online to choose a distro
</p>

<p>
Linux GUI apps are only supported with WSL 2 and will not work with a Linux
distribution configured for WSL 1. Read about how to change your distribution
from WSL 1 to WSL 2.
</p>

<p>
sudo apt-get update &amp;&amp; sudo apt-get upgrade -y
</p>

<p>
<a href="https://learn.microsoft.com/en-us/windows/wsl/install-manual#step-4---download-the-linux-kernel-update-package">https://learn.microsoft.com/en-us/windows/wsl/install-manual#step-4---download-the-linux-kernel-update-package</a>
<a href="https://web02.gonzaga.edu/faculty/talarico/vlsi/wsl.html">https://web02.gonzaga.edu/faculty/talarico/vlsi/wsl.html</a>
<a href="https://learn.microsoft.com/en-us/windows/wsl/install-manual#step-4---download-the-linux-kernel-update-package">https://learn.microsoft.com/en-us/windows/wsl/install-manual#step-4---download-the-linux-kernel-update-package</a>
<a href="https://learn.microsoft.com/en-us/windows/wsl/tutorials/gui-apps">https://learn.microsoft.com/en-us/windows/wsl/tutorials/gui-apps</a>
<a href="https://superuser.com/questions/1126721/rebooting-ubuntu-on-windows-without-rebooting-windows">https://superuser.com/questions/1126721/rebooting-ubuntu-on-windows-without-rebooting-windows</a>
<a href="https://emacsredux.com/blog/2021/12/19/using-emacs-on-windows-11-with-wsl2/">https://emacsredux.com/blog/2021/12/19/using-emacs-on-windows-11-with-wsl2/</a>
</p>

<p>
research wslg:
</p>

<p>
<a href="https://www.reddit.com/r/bashonubuntuonwindows/comments/wezwhi/bug_with_gui_apps/">https://www.reddit.com/r/bashonubuntuonwindows/comments/wezwhi/bug_with_gui_apps/</a>
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-wsl.html">wsl</a> </div>]]></description>
  <category><![CDATA[wsl]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231128T164359--wsl-glitches-in-gui-applications__wsl.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231128T164359--wsl-glitches-in-gui-applications__wsl.html</guid>
  <pubDate>Thu, 14 Dec 2023 16:33:37 +0000</pubDate>
</item>
<item>
  <title><![CDATA[consult package benefits]]></title>
  <description><![CDATA[
<p>
Tu juokauji gal. Koks amazing package.. :) Apie ji suzinojau tik 2023.12.
</p>

<p>
Bemegindamas irasti denote radau sita package.
</p>

<p>
Cia intro video -
<a href="https://www.youtube.com/watch?v=HwBHBwYgs2g&amp;ab_channel=EmacsElements">https://www.youtube.com/watch?v=HwBHBwYgs2g&amp;ab_channel=EmacsElements</a>
</p>

<ul class="org-ul">
<li>Galiu paturbinti C-x b, kad rodytu man buffer contenta. Nice.</li>
<li><code>consult-grep</code> - find whateveryouwant in a current PROJECT(git project).</li>
<li><code>consul-man</code> - look for ANYTHING in LINUX MANUAL PAGE. WTF.</li>
<li><code>consult-info</code> - find ANYTHING in your installed packages manuals&#x2026;</li>
<li><code>consult-bookmark</code> - set a bookmark in a location and then easily jump to it
later&#x2026; almost like my org find agenda file.</li>
<li><code>consult-theme</code> - change and try themes on the fly. wtf.</li>
<li><code>consult-flymake</code>???????????????????? Labadiena</li>
<li><code>consult-goto-line</code> - cool</li>
<li><code>consult-outline/consult-org-headings</code> - look through ORG file outlines.
Through all the headings. Thats cool when in a large document! That's like a
table of contents for you.</li>
<li><code>consult-org-agenda</code>??? must try that out</li>
<li><code>consult-project-buffer</code> - look only through opened files in the project.</li>
<li><code>M-s</code> is a big one!</li>
<li><code>M-s e</code> for example shows you all the search functions you previously typed
for. Nice.</li>
<li><code>M-g i</code> - look for functions inside the file!!!</li>
<li><code>C-u M-s g</code> - first specify the directory and then do the search. Great,
works like regular RG.</li>
</ul>

<p>
bookmarks is another cool thing.. can set them and then later jump to them with
c-x b and pressing m then SPACE and you will have a list of bookmarks!!
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231128T145249--consult-package-benefits__emacs.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231128T145249--consult-package-benefits__emacs.html</guid>
  <pubDate>Thu, 14 Dec 2023 16:33:37 +0000</pubDate>
</item>
<item>
  <title><![CDATA[create a blog with hugo]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org50b79ae">1. commands</a></li>
</ul>
</div>
</nav>
<p>
get started video - <a href="https://www.youtube.com/watch?v=LIFvgrRxdt4&amp;ab_channel=RyanSchachte">https://www.youtube.com/watch?v=LIFvgrRxdt4&amp;ab_channel=RyanSchachte</a>
</p>

<p>
second video - <a href="https://www.youtube.com/watch?v=hjD9jTi_DQ4&amp;t=2225s&amp;ab_channel=EnvatoTuts%2B">https://www.youtube.com/watch?v=hjD9jTi_DQ4&amp;t=2225s&amp;ab_channel=EnvatoTuts%2B</a>
</p>

<div id="outline-container-org50b79ae" class="outline-2">
<h2 id="org50b79ae"><span class="section-number-2">1.</span> commands</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>hugo new site nameofthesite</li>
<li>cd themes git clone theme</li>
<li>change config.toml to config.yml</li>
<li>hugo server - works</li>
<li>hugo new posts/firstpost.md</li>
<li>git submodule add -b master <a href="https://github.com/arvydasg/arvydasg.github.io.git">https://github.com/arvydasg/arvydasg.github.io.git</a>
public (public where file will be stored)</li>
<li>hugo -t hugo-PaperMod</li>
<li>cd public</li>
<li>git remote -v (origin is not what you expected ;) its arvydas.github.io</li>
<li>push public folder and site is live!</li>
</ul>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-hugo.html">hugo</a> <a href="https://arvydasg.github.io/devnotes/html/tag-websites.html">websites</a> </div>]]></description>
  <category><![CDATA[hugo]]></category>
  <category><![CDATA[websites]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231128T133020--create-a-blog-with-hugo__hugo_websites.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231128T133020--create-a-blog-with-hugo__hugo_websites.html</guid>
  <pubDate>Thu, 14 Dec 2023 16:33:37 +0000</pubDate>
</item>
<item>
  <title><![CDATA[windows keybindings]]></title>
  <description><![CDATA[
<p>
Lots of shortcuts already in my head, but some that are new are:
</p>

<ul class="org-ul">
<li>win + ctrl + t - always on top window</li>
<li>alt + space - look for programs</li>
<li>win + shift + / - ALL SHORTCUTS</li>
<li>win+shift+T - TEXT EXTRACTOR WTF??!!</li>
</ul>

<p>
Install <code>powertoys</code> app in windows for rebinding various keys, especially caps
-&gt; ctrl
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-windows.html">windows</a> </div>]]></description>
  <category><![CDATA[windows]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231128T132920--windows-keybindings__windows.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231128T132920--windows-keybindings__windows.html</guid>
  <pubDate>Thu, 14 Dec 2023 16:33:37 +0000</pubDate>
</item>
<item>
  <title><![CDATA[emacs bindings]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgb65824c">1. Shortcuts</a>
<ul>
<li><a href="#orgb08bfa3">1.1. Shortcuts</a>
<ul>
<li><a href="#orgbbd2bc5">1.1.1. network</a></li>
<li><a href="#org5d6fd14">1.1.2. emacs</a></li>
<li><a href="#orga884571">1.1.3. Bindings</a></li>
</ul>
</li>
<li><a href="#org1fe449d">1.2. commands emacs</a>
<ul>
<li><a href="#org62fc30a">1.2.1. ansi-term copy/paste</a></li>
</ul>
</li>
<li><a href="#orgc09cec1">1.3. Bookmarks emacs</a></li>
</ul>
</li>
</ul>
</div>
</nav>
<p>
OLD document from when I was still trying to write down the useful emacs
shortcuts.
</p>

<p>
Now I know where to look for what I am looking for even if I don't remember
what keybinding it is assigned to :) C-h f basically and M-x.
</p>

<div id="outline-container-orgb65824c" class="outline-2">
<h2 id="orgb65824c"><span class="section-number-2">1.</span> Shortcuts</h2>
<div class="outline-text-2" id="text-1">
<table>


<colgroup>
<col  class="org-left">

<col  class="org-left">

<col  class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Key Binding</th>
<th scope="col" class="org-left">Function</th>
<th scope="col" class="org-left">Mode</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">p</td>
<td class="org-left">Forward one indentation block</td>
<td class="org-left">Elpy</td>
</tr>

<tr>
<td class="org-left">C-up</td>
<td class="org-left">Backward one indentation block</td>
<td class="org-left">Elpy</td>
</tr>

<tr>
<td class="org-left">C-left</td>
<td class="org-left">Backward one indentation level</td>
<td class="org-left">Elpy</td>
</tr>

<tr>
<td class="org-left">C-right</td>
<td class="org-left">Forward one indentation level</td>
<td class="org-left">Elpy</td>
</tr>

<tr>
<td class="org-left">M-down</td>
<td class="org-left">Move line or region down</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">M-up</td>
<td class="org-left">Move line or region up</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">M-left</td>
<td class="org-left">Move line or indentation block left</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">M-right</td>
<td class="org-left">Move line or indentation block right</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">M-x elpy-set-project-root</td>
<td class="org-left">Set the root directory of the python project</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">C-c C-f</td>
<td class="org-left">Find file in project</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">C-c C-s</td>
<td class="org-left">Regular expression match in project</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">M-TAB</td>
<td class="org-left">Complete current statement</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">M-.</td>
<td class="org-left">Goto defition</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">M-*</td>
<td class="org-left">Return to position from last definition lookup</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">C-c C-z</td>
<td class="org-left">Switch to python shell</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">C-c C-c</td>
<td class="org-left">Send python code to shell (active region or complete buffer)</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">C-c RET</td>
<td class="org-left">Send current line to python shell</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">C-M-x</td>
<td class="org-left">Sends code of current top level function to python shell</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">C-c C-v</td>
<td class="org-left">Syntax check with flake8</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">C-c C-n</td>
<td class="org-left">Next flake8 error</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">C-c C-p</td>
<td class="org-left">Previous flake8 error</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">C-c C-t</td>
<td class="org-left">Start tests</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">C-c C-e</td>
<td class="org-left">Edit all occurrences of the symbol at point at once</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">C-c C-r f</td>
<td class="org-left">Format code using the available formatter</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">C-c C-r i</td>
<td class="org-left">Query for new imports of unresolved symbols, and remove unreferenced imports</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">C-c C-r r</td>
<td class="org-left">Run the Elpy refactoring interface for Python code</td>
<td class="org-left">Elpy</td>
</tr>

<tr>
<td class="org-left">C-u C-c C-x C-i</td>
<td class="org-left">See all recently clocked in tasks</td>
<td class="org-left">Org-clock</td>
</tr>

<tr>
<td class="org-left">M-x Customize group</td>
<td class="org-left">See ALL the configurable lines of a mode/package - GREAT!!!</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">C-c /</td>
<td class="org-left">Org sparse tree - filter org file for TODO entries and such, to exit -</td>
<td class="org-left">Org</td>
</tr>

<tr>
<td class="org-left">org-sort-entries</td>
<td class="org-left">sort entries by TODO keyword</td>
<td class="org-left">Org</td>
</tr>

<tr>
<td class="org-left">run-python</td>
<td class="org-left">can not find module named&#x2026; python error. Run run-python in the buffer</td>
<td class="org-left">elpy</td>
</tr>

<tr>
<td class="org-left">dired-git-info-mode</td>
<td class="org-left">shows the commit history of a directory</td>
<td class="org-left">dired</td>
</tr>

<tr>
<td class="org-left">org-agenda-archives-mode</td>
<td class="org-left">shows all the archived tasks in the agenda.</td>
<td class="org-left">org agenda</td>
</tr>

<tr>
<td class="org-left">c-u m-x shell</td>
<td class="org-left">open another shell instance, give it a name</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">c-c c-d</td>
<td class="org-left">Helpful at point</td>
<td class="org-left">Docs</td>
</tr>

<tr>
<td class="org-left">C-h b</td>
<td class="org-left">all shortcuts in of current buffer modes</td>
<td class="org-left">Docs</td>
</tr>

<tr>
<td class="org-left">M-x where is</td>
<td class="org-left">which key shortcut is bound to</td>
<td class="org-left">Docs</td>
</tr>

<tr>
<td class="org-left">C-h r</td>
<td class="org-left">docs</td>
<td class="org-left">Docs</td>
</tr>

<tr>
<td class="org-left">C-h i</td>
<td class="org-left">info</td>
<td class="org-left">Docs</td>
</tr>

<tr>
<td class="org-left">C-h ?</td>
<td class="org-left">Other + other choose!</td>
<td class="org-left">&#xa0;</td>
</tr>
</tbody>
</table>
</div>

<div id="outline-container-orgb08bfa3" class="outline-3">
<h3 id="orgb08bfa3"><span class="section-number-3">1.1.</span> Shortcuts</h3>
<div class="outline-text-3" id="text-1-1">
<p>
Sasha - <a href="http://emacslife.com/read-lisp-tweak-emacs/beginner-3-make-things-more-convenient.html">http://emacslife.com/read-lisp-tweak-emacs/beginner-3-make-things-more-convenient.html</a>
</p>
</div>
<div id="outline-container-orgbbd2bc5" class="outline-4">
<h4 id="orgbbd2bc5"><span class="section-number-4">1.1.1.</span> network</h4>
<div class="outline-text-4" id="text-1-1-1">
<ul class="org-ul">
<li>traceroute delfi.lt</li>
<li>ipconfig</li>
<li>gpupdate /force</li>
<li>gpresult /r</li>
</ul>
<p>
n- ping
</p>
</div>
</div>
<div id="outline-container-org5d6fd14" class="outline-4">
<h4 id="org5d6fd14"><span class="section-number-4">1.1.2.</span> emacs</h4>
<div class="outline-text-4" id="text-1-1-2">
<ol class="org-ol">
<li>M-g j     = Dumb jump</li>
<li>M-%       = Query replace</li>
<li>C-M i     = FLYSPELL step on a word and correct it's
spelling. multiple presses for different words</li>
<li>C-;       = flyspell auto correct previous word</li>
<li>F5        = turn on flyspell mode</li>
<li>C-c C-p I = open buffers OF THE CURRENT PROJECT</li>
<li>M-,       = Go back one step</li>
<li>C-h i     = info about your whole linux system and programs installed</li>
<li>C-h r     = info manual emacs</li>
<li>C-h m     = describe mode</li>
<li>C-h k    = describe key</li>
<li>C-x n s  = narrow down to one headline in org mode</li>
<li>C-x n w  = widden back to all headings</li>
<li>C-x n w  = widen back to normal</li>
<li>C-c u    = undo tree visualize</li>
<li>M-x highlight-regexp = highlights word occurences in the buffer</li>
<li>C-x h    = mark buffer</li>
<li>C-x SPC  = rectangle mode</li>
<li>C-u c-u c-u . = enter current date timestamp - this puts to agenda</li>
<li>C-u C-c . = inactive timestamp with hour and minutes</li>
<li>C-c .    = enter current date timestamp same</li>
<li>C-c !    = enter current date timestamp BUT no agenda entry</li>
<li>C-x ( OR F3    = define macro - do a sequence</li>
<li>C-x ) OR F4    = stop defining</li>
<li>C-x e OR f4    = executes macro</li>
<li>C-x C-k n      = give name to last macro</li>
<li>M-x insert-kbd-macro = extract contents of a macro (useful when
want to put in init file)</li>
<li>M-x apply-macro-to-region-lines = does exactly that</li>
<li>C-SCP x2 = makes a mark</li>
<li>C-x C-SCP = jumps to that mark</li>
<li>C-x r SCP &lt;any&gt; = resgister a key(position)</li>
<li>C-x r j &lt;any&gt; = jump to the key(to that position)</li>
<li>C-c C-w  = refile to enother point in the org document or another file</li>
<li>C-c C-s  = schedule org item</li>
<li>C-c C-d  = set a deadine to org item</li>
<li>C-x C-x  = Move cursor to the other end of selection.</li>
<li>C-a a    = org agenda</li>
<li>C-c c    = capture something (write note and put it somewhere in the template)</li>
<li>C-c C-z  = make a note under sme org heading</li>
<li>C-c a a F = follow up mode. expands the task in agenda view</li>
<li>M-u      = capitalize all letters of a word</li>
<li>m-l      = lowercase all letters of a word</li>
<li>C-x left = previous buffer. Faster than C-x b? maybe. Cia gi winner mode.</li>
<li>C-c C-l  = after selecting text - add link shortcut</li>
<li>C-c C-x e = set effort estimate on an org headline</li>
<li>C-c C-x C-c = see the effort estimate table</li>
<li>C-c C-x C-j = go to clock entry</li>
<li>C-c C-e  = ELPY Edit all occurrences of the symbol at point at once</li>
<li>C-c C-c  = ELPY send REGION to python interactive
interpreter,(atsidarys atskiras buffer, arba gali ji isjungti, tai
graziai apacioje rodys for a short time) ARBA Gali ctrl+enter po
viena eilute</li>
<li>C-c C-d  = ELPY show documentation,</li>
<li>C-c C-z  = ELPY Switch between your script and the interactive shell</li>
<li>M-.      = ELPY go to definition.(or use dumb-jump shortcut M-g g)</li>
<li>C-c n/p  = ELPY move to next, previous error</li>
<li>C-c C-v  = ELPY Syntax check with flake8</li>
<li>C-c C-n  = ELPY Next flake8 error</li>
<li>C-c C-t  = ELPY Start tests</li>
<li>C-c RET  = ELPY (new shortcut) evaluate line</li>
<li>M-x comint-clear-buffer = clears elpy terminal (C-c M-o)</li>
<li>M-x elpy-config  = ELPY config</li>
<li>C-h v kill-ring = Watch your kill ring</li>
<li>C-x o m  = AVY swap windows</li>
<li>M-i      = indent, cool</li>
<li>M-x emacs-lisp-byte -compile = after modifying emacs package file,
run this (while in the opened buffer) to save the changes. Helped
with iedit.</li>
<li>M-x eww  = EWW browser</li>
<li>C-c C-o  = ORG open linka</li>
<li>A        = ORG agenda append agenda view to buffer</li>
<li>o        = ORG agenda delete other windows</li>
<li>f1 v     = DESCRIBE VARIABLE - super useful. can look for all kind
of information. Like directories of plugins and so on&#x2026; try it out.</li>
<li>C-v      = scroll buffer down</li>
<li>M-v      = scroll buffer up</li>
<li>M-! nautilus . = open current dir in nautilus. oh yeah</li>
<li>M-x clone-indirect-buffer = multiple views of same file</li>
<li>M-o      = see council option</li>
<li>M-x flyckeck-list-errors = a list of errors in the buffer</li>
<li>C-c C-p p/d = TREEMACS add/remove project to a workspace</li>
<li>M-x lsp-treemacs-symbols = show the structure of the file</li>
<li>m-x lsp-find-references = show where the function is being used</li>
<li>C-c C-d  = when in python doc = gives documentation of chosen topic</li>
<li>C-c /    = sparse tree (org mode look up for things)</li>
<li>M-x erc-tls = irc.libera.chat IRC chat!</li>
<li>/join #emacs or #systemcrafters = IRC join channel</li>
<li>/part    = IRC leave channel</li>
<li>/quit bye all! = quit server</li>
<li>/reconnect = reconnect to the server?</li>
<li>/list    = IRC list channels</li>
<li>/whois nick = IRC find out whoe the user is!!</li>
<li>/ query nick = IRC write someone a private message!! (new buffer opens
up)</li>
<li>/msg nick Hello there = IRC sends a one time message</li>
<li>/nick newname = IRC change nickname</li>
<li>C-c '    = edit <a href="https://orgmode.org/manual/Editing-Source-Code.html">code block</a> in a separate window (proper
indentation and all)</li>
<li>C-c C-x ; = TIMER start</li>
<li>C-c C-x , = TIMER pause/continue</li>
<li>C-c C-x _ = TIMER stop</li>
<li>C-&gt; = multiple cursors - mark next line like this</li>
<li>C-&lt; = multiple cursors - mark previous line like this</li>
<li>C-c C-&lt; = multiple cursors - mark all like this</li>
<li>M-x customize group - customize some stuff</li>
<li>M-x ielm RET package-archives RET = gives some values out</li>
<li>C-c '   = edit source code buffer (useful when need code
completion when editint a src code in ORG file)</li>
<li>g-o     = DIRED view buffer(or view in another window)</li>
<li>a       = DIRED - cycle through directories and open files (leaves
no traces(open buffers))</li>
<li>R      = DIRED rename file</li>
<li>+      = DIRED create directory</li>
<li>m      = DIRED mark file</li>
<li>u/U    = DIRED un mark file/s</li>
<li>(      = DIRED close/open information</li>
<li>t      = DIRED invert marked file selection</li>
<li>% m    = DIRED mark all files according to your needs fx. .org \.org$</li>
<li>*      = DIRED more options</li>
<li>c      = DIRED copy marked files</li>
<li>D      = DIRED delete marked files</li>
<li>d      = DIRED mark files for deletion</li>
<li>x      = DIRED execute the deletion</li>
<li>M-[    = goto last change(previous)</li>
<li>M-]    = goto last change reverse(next)</li>
<li>C-a C  = configure org agenda (the simple way)</li>
<li>C-'    = cycle through agenda files</li>
<li>F11    = full screen mode</li>
<li>emacs -q test.el foo.org = debug lisp code this way</li>
<li>C-D    = PYTHON mode - PY DOCS</li>
<li><b>buffer name</b> = creates a buffer</li>
<li>M-x highlight-regexp = highlight search results</li>
<li>M-x clone indirect buffer = duplicate same buffer, edit in two places</li>
<li>M-y    = browse kill ring</li>
<li>RET:   = ELFEED view selected entry in a buffer</li>
<li>b:     = ELFEED open selected entries in your browser (browse-url)</li>
<li>y:     = ELFEED copy selected entries URL to the clipboard</li>
<li>r:     = ELFEED mark selected entries as read</li>
<li>u:     = ELFEED mark selected entries as unread</li>
<li>+:     = ELFEED add a specific tag to selected entries</li>
<li>-:     = ELFEED remove a specific tag from selected entries</li>
<li>g:     = ELFEED refresh view of the feed listing</li>
<li>G:     = ELFEED fetch feed updates from the servers</li>
<li>s:     = ELFEED update the search filter (see tags)</li>
<li>c:     = ELFEED clear the search filter</li>
<li>s-F10  = show minimap</li>
<li>C-c n l = ORG-ROAM-buffer-toggle</li>
<li>C-c n f = ORG-ROAM-node-find</li>
<li>C-c n i = ORG-ROAM-node-insert</li>
<li>C-M-i   = ORG-ROAM completion at point</li>
<li>org-id-get-create = ORG-ROAM create an IF for a heading</li>
<li>org-roam-alias-add = ORG-ROAM add another name for a node</li>
<li>C-c n d n = ORG-ROAM-dailies-capture-today</li>
<li>C-c n d d = ORG-ROAM-dailies-goto-today</li>
<li>C-c n d Y = ORG-ROAM-dailies-capture-yesterday</li>
<li>C-c n d T = ORG-ROAM-dailies-capture-tomorrow</li>
<li>C-c n d y = ORG-ROAM-dailies-goto-yesterday</li>
<li>C-c n d t = ORG-ROAM-dailies-goto-tomorrow</li>
<li>C-c n d d = ORG-ROAM-dailies-goto-today</li>
<li>C-c n d v = ORG-ROAM-dailies-capture-date</li>
<li>C-c n d c = ORG-ROAM-dailies-goto-date</li>
<li>C-c n d b = ORG-ROAM-dailies-goto-next-note</li>
<li>C-c n d f = ORG-ROAM-dailies-goto-previous-note</li>
<li><a href="http://xahlee.info/emacs/emacs/rename_file_pattern.html">Batch rename files</a> - open dired-toggle-read-only</li>
<li>- git rm &#x2013;cached &lt;path to file&gt; = <a href="https://betterprogramming.pub/how-to-remove-committed-files-from-git-version-control-b6533b8f9044">removes git file from repo</a>,
keeps it in folder</li>
<li>C-M o when in 'find file' = drop-down of suggestions of what to do
with files, list.</li>
<li>C-c C-x C-v = show/hide images in org files instead of links</li>
<li>Mu4e - <a href="https://github.com/daviwil/emacs-from-scratch/blob/629aec3dbdffe99e2c361ffd10bd6727555a3bd3/show-notes/Emacs-Mail-01.org">shortcuts here</a></li>
<li>Ctrl+shift+alt+R - start/end gnome recording</li>
<li>settings set org.gnome.settings-daemon.plugins.media-keys
max-screencast-length X - specify the length of the gnome video. 0
instead of X - no duration. 300 instead of X = 300sec</li>
<li>C-u C-C C-x C-i = list of all clocked-in tasks. Primeti? Wow.</li>
<li>C-u thingie on different commands - projectile f.x also - COMMANDER</li>
<li>M-x customize-group RET org-pomodoro = configurations of ANY
package listed here</li>
<li>M-x use-package-report = shows packages that got loaded and their
load times!!</li>
<li>C-u M-x eshell = open two eshells at the same time!</li>
<li>org-customize = customize EVERYTHING about org-mode</li>
<li>C-c C-, = lists the possible &lt;s completetions. discovered at work.</li>
<li>screenfetch = linux info with logo</li>
<li>passwd - change password for linux user</li>
<li>du -hs = <a href="https://askubuntu.com/questions/1224/how-do-i-determine-the-total-size-of-a-directory-folder-from-the-command-line">how big is a folder</a> in terminal</li>
<li>C-h m = list all the minor modes</li>
<li>C-c C-d = helpful-at-point</li>
<li>C-x C-0 = text-scale-adjust</li>
<li>C-x z = repeat last command</li>
<li>C-c M- o or M-x commit clear buffer - clears eshell or shell buffer</li>
<li><code>Shift + "</code> = wraps text in parentheses</li>
<li>C-w = whitespace mode, rodo taskiukus vietoj whitespace</li>
<li>C-c - c-e f = fold all children elements of the current father</li>
<li><a href="https://ternjs.net/doc/manual.html#emacs">tern commands</a> - javascript jump to definition, documentation and
other cool stuff</li>
<li>org-export-dispacher or C-c C-e(might be conflicitng with pop eshell)</li>
<li>c-x n s/w - org narrow/expand</li>
<li><code>C-o</code> in dired to preview/view/visit files</li>
<li>C-x C-p - mark whole page</li>
<li>org-change-tag-in-region - apply tag to all headings</li>
<li>C-h i - INFO MODE!!!!! shows all the manuals of packages</li>
<li>c-c c-x p - assign property(category etc) to org note</li>
<li>C-a - add attachement!!</li>
<li>c+h r - open emacs docs, press m to pick topic (f.x bookmarks), RET -</li>
</ol>
<p>
you are reading the docs. NIIICE.
</p>
</div>
</div>

<div id="outline-container-orga884571" class="outline-4">
<h4 id="orga884571"><span class="section-number-4">1.1.3.</span> Bindings</h4>
<div class="outline-text-4" id="text-1-1-3">
</div>
<ol class="org-ol">
<li><a id="org2289a74"></a>Emacs pasidaryk bindings patogesnius<br>
<div class="outline-text-5" id="text-1-1-3-1">
<p>
Last change
Bottom top of the file
Definition
<a href="https://github.com/Crandel/home/blob/master/.config/emacs/recipes/multiple-cursors-rcp.el">Multiple cursors</a>
Jump between paragraphs
M-s
query replace
</p>

<p>
Gal kaip revit??
</p>
</div>
</li>
<li><a id="org84813ae"></a>go to next paragraph su M-n M-p maybe<br></li>
<li><a id="org277c40b"></a>go to last change emacs M={ }<br></li>
<li><a id="org50e7bb7"></a>go to last change emacs M={ }<br></li>
<li><a id="orgce96c75"></a>go to next paragraph su M-n M-p maybe<br></li>
<li><a id="orgb927dd3"></a>kaip suzinoti visas commands? pvz agenda&#x2026; shift + r clocktable, shift + L follow mode<br>
<div class="outline-text-5" id="text-1-1-3-6">
<p>
gal su hydrom galima matyti?
</p>
</div>
</li>
<li><a id="orgf04b3da"></a>Vim bindings<br>
<div class="outline-text-5" id="text-1-1-3-7">
<p>
<a href="https://bbbscarter.wordpress.com/2012/09/13/emacs-bits-and-bobs/">https://bbbscarter.wordpress.com/2012/09/13/emacs-bits-and-bobs/</a>
</p>

<p>
<a href="https://i.stack.imgur.com/zpzPO.gif">evil bindings cheat sheet</a>
</p>

<p>
<span class="timestamp-wrapper"><span class="timestamp">[2022-12-05 Mon] </span></span> <a href="https://www.reddit.com/r/emacs/comments/tyg9v5/why_not_use_evil_in_2022/">why NOT tu use evil in 2022?</a> zinai ka, gal pabusiu su
emacs for now.. it is going great with it. I like it.
</p>

<p>
Evil collection plugin in the future - "evil bindings in every package"
</p>
<ul class="org-ul">
<li>C-G from INSERT to NORMAL mode</li>
<li>C-U go half page up</li>
<li>C-D go half page down</li>
<li>Shift-A - append to the end of the line</li>
<li>C-z - emacs mode(get yourself out of trouble with it. STOP evil)</li>
<li>C-w - evil window management</li>
<li>C-o - evil JUMP backwards</li>
</ul>
</div>
</li>
<li><a id="org3589384"></a>M-x customize group RET org-pomodoro RET<br></li>
</ol>
</div>
</div>
<div id="outline-container-org1fe449d" class="outline-3">
<h3 id="org1fe449d"><span class="section-number-3">1.2.</span> commands emacs</h3>
<div class="outline-text-3" id="text-1-2">
</div>
<div id="outline-container-org62fc30a" class="outline-4">
<h4 id="org62fc30a"><span class="section-number-4">1.2.1.</span> ansi-term copy/paste</h4>
<div class="outline-text-4" id="text-1-2-1">
<p>
:CAPTURED:<span class="timestamp-wrapper"><span class="timestamp">[2023-06-15 Thu 08:30]</span></span>
</p>

<p>
<code>C-c C-j</code> will run term-line-mode, which treats the terminal buffer more
like a normal text-buffer in which you can move the cursor and yank
text. You can switch back to character mode by running term-char-mode
with <code>C-c C-k</code>.
</p>

<p>
<a href="https://stackoverflow.com/questions/2886184/copy-paste-in-emacs-ansi-term-shell">https://stackoverflow.com/questions/2886184/copy-paste-in-emacs-ansi-term-shell</a>
</p>
</div>
</div>
</div>
<div id="outline-container-orgc09cec1" class="outline-3">
<h3 id="orgc09cec1"><span class="section-number-3">1.3.</span> Bookmarks emacs</h3>
<div class="outline-text-3" id="text-1-3">
<p>
C+h i - info mode
</p>

<p>
C+x r b - jump to bookmark
C+x r m - make a bookmark here
C+x r l - see all bookmarks
</p>
</div>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231128T132809--emacs-bindings__emacs.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231128T132809--emacs-bindings__emacs.html</guid>
  <pubDate>Thu, 14 Dec 2023 16:33:37 +0000</pubDate>
</item>
<item>
  <title><![CDATA[install docker on windows]]></title>
  <description><![CDATA[
<p>
Come here - <a href="https://docs.docker.com/desktop/install/windows-install/">https://docs.docker.com/desktop/install/windows-install/</a>
download the file, install it
</p>

<p>
wsl has to be enabled I guess also on your windows machine
</p>

<p>
after it's installed - run it. Login. Should be able to see your docker images
from your dockerhub.
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-docker.html">docker</a> <a href="https://arvydasg.github.io/devnotes/html/tag-windows.html">windows</a> </div>]]></description>
  <category><![CDATA[docker]]></category>
  <category><![CDATA[windows]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231128T131429--install-docker-on-windows__docker_windows.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231128T131429--install-docker-on-windows__docker_windows.html</guid>
  <pubDate>Thu, 14 Dec 2023 16:33:37 +0000</pubDate>
</item>
<item>
  <title><![CDATA[install emacs on linux]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgbbce4ed">1. Old emacs installation notes&#xa0;&#xa0;&#xa0;<span class="tag"><span class="ARCHIVE">ARCHIVE</span></span></a></li>
</ul>
</div>
</nav>
<p>
Git clone .emacs.d from github into the newly installed <a href="20231128T165324--install-linux-distro-over-wsl__windows_wsl.html">wsl distro</a> -
<a href="https://github.com/arvydasg/.emacs.d/tree/master">https://github.com/arvydasg/.emacs.d/tree/master</a>
</p>

<p>
In your wsl instance basically <code>sh</code> the file in
<code>MISC/ubuntu_wsl_emacs_29.1/compile-install-emacs.sh</code> to do the emacs
installation. Installing from source this way since 28.2 is required by denote
and does not exist in ubuntu mirrors or w/e -
<a href="https://unix.stackexchange.com/questions/6284/how-do-i-check-package-version-using-apt-get-aptitude">https://unix.stackexchange.com/questions/6284/how-do-i-check-package-version-using-apt-get-aptitude</a>
emacs.
</p>

<p>
Open emacs, enjoy
</p>

<div id="outline-container-orgbbce4ed" class="outline-2">
<h2 id="orgbbce4ed"><span class="section-number-2">1.</span> Old emacs installation notes&#xa0;&#xa0;&#xa0;<span class="tag"><span class="ARCHIVE">ARCHIVE</span></span></h2>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> <a href="https://arvydasg.github.io/devnotes/html/tag-linux.html">linux</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[linux]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231128T131156--install-emacs-on-linux__emacs_linux.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231128T131156--install-emacs-on-linux__emacs_linux.html</guid>
  <pubDate>Thu, 14 Dec 2023 16:33:37 +0000</pubDate>
</item>
<item>
  <title><![CDATA[emacs setup on digitalocean with dropbox]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org8958ae1">1. Emacs setup on digitalocean</a>
<ul>
<li><a href="#orgf175e1f">1.1. launch dropbox</a></li>
</ul>
</li>
</ul>
</div>
</nav>

<div id="outline-container-org8958ae1" class="outline-2">
<h2 id="org8958ae1"><span class="section-number-2">1.</span> Emacs setup on digitalocean</h2>
<div class="outline-text-2" id="text-1">
<p>
psx - lAba$!1o
simply using password, ssh is acting up with me
</p>

<p>
<a href="https://www.youtube.com/watch?v=98YuVDj6g8Q&amp;ab_channel=RibaLinux">install GUI</a>
<a href="https://www.youtube.com/watch?v=r3t61OP5mWs&amp;ab_channel=TonyTeachesTech">how to conenct to ssh into digitaloacean</a>
<a href="https://www.digitalocean.com/community/questions/dropbox-works-with-digitalocean-droplets">dropbox on digital ocean droplet vm</a>
</p>
</div>

<div id="outline-container-orgf175e1f" class="outline-3">
<h3 id="orgf175e1f"><span class="section-number-3">1.1.</span> launch dropbox</h3>
<div class="outline-text-3" id="text-1-1">
<ul class="org-ul">
<li>little tut <a href="https://www.dropbox.com/install-linux">install headless dropbox</a></li>
<li><a href="https://www.dropbox.com/install-linux">use this link to download dropbox</a></li>
<li>then click on the link in command line to to link to your dropbox.
Paste link in the browser</li>
<li>download python3</li>
<li>download the python script</li>
<li>python3 dropbox.py status - runs, good</li>
<li><a href="https://www.youtube.com/watch?v=mA08E59-zo8&amp;ab_channel=ChrisTitusTech">create a symlink to this python script</a>
<ul class="org-ul">
<li>echo $PATH</li>
<li>go to /usr/local/bin</li>
<li>create a symlink with FULL PATHNAME ln -s ~/scripts/dropbox.py</li>
<li>sudo chmod 744 dropbox.py - make the script executable!</li>
<li>try to do dropbox.py in the current folder</li>
<li>try to do it in other folders</li>
<li>python3 dropbox.py status</li>
</ul></li>
</ul>
</div>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-cloud.html">cloud</a> <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> </div>]]></description>
  <category><![CDATA[cloud]]></category>
  <category><![CDATA[emacs]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231128T130604--emacs-setup-on-digitalocean-with-dropbox__cloud_emacs.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231128T130604--emacs-setup-on-digitalocean-with-dropbox__cloud_emacs.html</guid>
  <pubDate>Thu, 14 Dec 2023 16:33:37 +0000</pubDate>
</item>
<item>
  <title><![CDATA[printing with cups in ubuntu]]></title>
  <description><![CDATA[
<p>
video explaining - <a href="https://www.youtube.com/watch?v=En2DJAMpwmY">https://www.youtube.com/watch?v=En2DJAMpwmY</a>
</p>

<ul class="org-ul">
<li>sudo apt install cups</li>
<li>sudo systemctl enable cups</li>
<li>sudo systemctl start cups</li>
<li>sudo systemctl status cups</li>
<li>download drivers from <a href="https://support.hp.com/lt-en/drivers/selfservice/samsung-xpress-sl-m2022-laser-printer-series/17157279/model/17157283">here</a></li>
<li>sudo tar -xvzf udl bla folderi ta draiverio</li>
<li>sudo ./install.sh</li>
<li>login to cups service - <a href="http://localhost:631/">http://localhost:631/</a></li>
<li>add printer, pasirenki samsung m2020 series</li>
<li>draiveriai turetu automatiskai buti parinkti teisingi samsung m2020
series (en)</li>
<li>add printer</li>
<li>spausdink i sveikata</li>
</ul>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-linux.html">linux</a> </div>]]></description>
  <category><![CDATA[linux]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231128T130210--printing-with-cups-in-ubuntu__linux.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231128T130210--printing-with-cups-in-ubuntu__linux.html</guid>
  <pubDate>Thu, 14 Dec 2023 16:33:37 +0000</pubDate>
</item>
<item>
  <title><![CDATA[manjaro installation]]></title>
  <description><![CDATA[
<p>
First of all - choose non free drivers, cuz of nividia drivers that I have.
hope it will solve the problem with the dwm and random screen freezes + tags
not working&#x2026;
</p>

<p>
IMMEADITELY AFTER INSTALL
</p>

<p>
htop check - 650M/7.60G 73tasks 143thr
sensors check 54
</p>

<p>
firewall - on
</p>

<p>
go to updates - update everything that is there (matcha gtk theme this time.. ikd)
</p>

<p>
3 dots in the same window -&gt; preferences
</p>

<p>
official repositories -&gt; refresh mirrors list (3-10mins)
</p>

<p>
AUR -&gt; enable aur support, keep build packages in cache, check for updates
</p>

<p>
manjaro settings manager -&gt; hardware configuration to see the drivers. graphic drivers preferably shoul be alright. google idk.. this time wont do anything.
</p>


<p>
INSTALLING TIMESHIFT
</p>

<p>
install timeshift through the package downloader gui
go through the wizard, make sure to set the location of the timeshifts to the home folder
</p>

<p>
maybe set daily 1?
</p>

<p>
root - include all fles
home - include hidden files only
</p>

<p>
make one timeshift copy BEFORE installing all the other apps and changes.
</p>

<p>
INSTALLING PACKAGES
</p>

<p>
sudo pacman -Syu -&#x2014;  System Update
</p>

<p>
install anki throught the shop - terminal version is too big lol.
sudo pacman -S vim
sudo pacman -S brave
</p>

<p>
get DWM, follow this tutorial -
 <a href="https://www.youtube.com/watch?v=dP8OKP-r1tw">https://www.youtube.com/watch?v=dP8OKP-r1tw</a>
</p>

<p>
getting it
sudo pacman -S git base-devel
git clone <a href="https://git.suckless.org/dwm">https://git.suckless.org/dwm</a>
git clone <a href="https://git.suckless.org/st">https://git.suckless.org/st</a>
sudo pacman -S dmenu
</p>

<p>
installing/making it
cd dwm
sudo make clean install
cd st
sudo make clean install
</p>

<p>
now dmenu is installed, st and dwm as well.
now you might think you just log out and it is there, but the computer doest know it has it
it doesnt know how to run it.
</p>

<p>
try typing dwm - you see it says another is running
</p>

<p>
cd /usr/share/xsessions
</p>

<p>
sudo vim DWM.desktop
</p>

<p>
paste this in:
</p>

<p>
[Desktop Entry]
Encoding=UTF-8
Name=DWM
Comment=Dynamic Window Manager
Exec=/usr/local/bin/dwm
Icon=
Type=Application
</p>


<p>
logout, check the bottom right corner - choose dwm.
</p>


<p>
make one more timeshift now.
Installed - vim, dwm, st, git, anki, brave
</p>



<p>
##################### CUZTOMIZING ########################
</p>

<p>
vim plugins
brave vimium
st terminal (line, font, colors)
</p>

<p>
install image viewer (through the shop, smalles one possible)
</p>


<p>
print dwm commands
print vim commands
print linux commands
print vimium commands
</p>


<p>
##################### PRINTING  ########################
</p>


<p>
install cups for printing. (through the shop)
run ./install.sh from the drivers, hopefully also on github.
<a href="https://wiki.manjaro.org/index.php/Printing">https://wiki.manjaro.org/index.php/Printing</a>
follow first steps from that tutorial or just do:
pamac install manjaro-printer (chose nothing)
sudo gpasswd -a aze sys
sudo systemctl enable &#x2013;now cups.service
and go to cups and do a test page
it works!!
</p>

<p>
try write in terminal:
lp filename or
lpr filename
</p>

<p>
see if prints. if doest, then do this command
lpstat -p -d
if says there is no destination set, do this:
Your printer should have a name of some sort &#x2013; say, InkJet or something similar &#x2013; defined in CUPS. In CUPS (<a href="http://localhost:631">http://localhost:631</a>), click on Printers, then click on the name of the printer. Then click on Administration and finally, click on Set as Server Default. Exit CUPS.
</p>

<p>
restart computer, do this command again, should be fine.
</p>

<p>
fuck I made it work. now write lp filename and it prints!!! wow man. :)
</p>



<p>
##################### WIFI  ########################
</p>

<p>
type nmtui
and choose connection
</p>



<p>
################### DWM bg image ###################
</p>

<p>
first lets create a patch for dwm that on every autostart will look for an image and set it up, later we will use the same autostart patch to make the status bar thingy.
</p>

<p>
go to dwm folder, make this file:
dwm-autostart-20161205-bb3bd6f.diff
</p>

<p>
go to this link
<a href="https://dwm.suckless.org/patches/autostart/">https://dwm.suckless.org/patches/autostart/</a>
then copy the patch code of the first file, named same like you just created and paste the contents into your file.
good.
</p>

<p>
now in dwm folder do sudo make clean uninstall
then patch &#x2013;merge -i dwm-autostar and tab to finish
enter
</p>

<p>
will write that it has been installed.
then we make sudo make clean install again.
</p>

<p>
now lets make a .dwm folder, in which dwm will look for autostart.sh file every time it is booted.
</p>

<p>
mkdir .dwm
vim autostart.sh
write
#! /bin/bash
</p>

<p>
feh &#x2013;bg-scale ~/pics/sunsetdunes.jpg
:wq
sudo chmod +x autostart.sh
./autostart.sh
and the background should be set.
change the image to see the effect and the script working. so cool dude first bash script.
</p>


<p>
################### DWM admin bar ###################
</p>

<p>
<a href="https://www.youtube.com/watch?v=gz0rd7_8tf0">https://www.youtube.com/watch?v=gz0rd7_8tf0</a>
this video.
</p>

<p>
sudo pacman -S xorg
xsetroot -name "hello" - puts hello into the bar.
</p>

<p>
go to .dwm
vim autostart.sh
then add
while true; do
        xsetroot -name "$(date)
        sleep 1s
done
</p>

<p>
set up aliases for terminal cd .. some cool things, just like the hobyist
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-linux.html">linux</a> </div>]]></description>
  <category><![CDATA[linux]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231128T130148--manjaro-installation__linux.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231128T130148--manjaro-installation__linux.html</guid>
  <pubDate>Thu, 14 Dec 2023 16:33:37 +0000</pubDate>
</item>
<item>
  <title><![CDATA[alpine installation]]></title>
  <description><![CDATA[
<p>
Decided to install alpine(again) and see what it's all about. Started with <a href="https://www.youtube.com/watch?v=E7zJTzf0pWA&amp;ab_channel=ProgrammerGuide">this</a>
tutorial.
</p>

<p>
INSTALLATION GUIDE
</p>

<ul class="org-ul">
<li>install virtual machine with 1gb and 10gb</li>
<li>ping google.com for internet connection</li>
<li>apk add sudo (might not need this, just enable community first)</li>
<li>sudo apk add htop</li>
<li>vi /etc/apk/repositories - enable community one</li>
<li>apk update</li>
<li>sudo apk add emacs</li>
</ul>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-alpine.html">alpine</a> <a href="https://arvydasg.github.io/devnotes/html/tag-linux.html">linux</a> </div>]]></description>
  <category><![CDATA[alpine]]></category>
  <category><![CDATA[linux]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231128T130129--alpine-installation__alpine_linux.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231128T130129--alpine-installation__alpine_linux.html</guid>
  <pubDate>Thu, 14 Dec 2023 16:33:37 +0000</pubDate>
</item>
<item>
  <title><![CDATA[how to run a flask app]]></title>
  <description><![CDATA[
<p>
If you have someting like this in <code>app.py</code>:
</p>
<div class="org-src-container">
<pre class="src src-python">if __name__ == "__main__":
    with app.app_context():
        db.create_all()
    app.run(host="0.0.0.0", debug=True)
</pre>
</div>

<p>
Run the app with:
</p>
<div class="org-src-container">
<pre class="src src-python">python3 app.py
</pre>
</div>

<p>
The app should run.
</p>

<p>
NOTe: If you try to run with <code>flask run</code> - changes might not automatically
refresh in the browser. You might have to restart the server each time you make
a change.
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-flask.html">flask</a> <a href="https://arvydasg.github.io/devnotes/html/tag-python.html">python</a> </div>]]></description>
  <category><![CDATA[flask]]></category>
  <category><![CDATA[python]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231126T014659--how-to-run-a-flask-app__flask_python.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231126T014659--how-to-run-a-flask-app__flask_python.html</guid>
  <pubDate>Thu, 14 Dec 2023 16:33:37 +0000</pubDate>
</item>
<item>
  <title><![CDATA[make denote faster on wsl]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgb01fe9a">1. My question to chatgpt <span class="timestamp-wrapper"><span class="timestamp">&lt;2023-11-26 Sun&gt;</span></span>.</a></li>
<li><a href="#org103fcf7">2. Solution not worth considering</a></li>
<li><a href="#orgfd32b0f">3. Temporary working solution</a></li>
<li><a href="#org27e0f12">4. Permanent working solution</a>
<ul>
<li><a href="#org7463531">4.1. Option 1 - use <code>cp</code> command to copy</a></li>
<li><a href="#org669128c">4.2. Option 2(final) - Use <code>rsync</code> command</a></li>
<li><a href="#org49aa605">4.3. Update <code>.bashrc</code> file to copy automatically</a></li>
</ul>
</li>
</ul>
</div>
</nav>
<p>
Before this change the denote notes were stored on Windows system and it would take
time for them to get fetched and opened on Emacs that runs in WSL. Each denote
command or simply opening a file would take longer than usual. This was
annoying.
</p>

<p>
So I have moved all the denote note files to WSL. Then created a script that
would copy all the note files into windows machine, onedrive folder, for them
to be synced to my onedrive cloud. This will act as a security measure in case
I forget to commit my notes to git and my machine dies. I will still have a
quite recent copy of the notes in OneDrive.
</p>

<div id="outline-container-orgb01fe9a" class="outline-2">
<h2 id="orgb01fe9a"><span class="section-number-2">1.</span> My question to chatgpt <span class="timestamp-wrapper"><span class="timestamp">&lt;2023-11-26 Sun&gt;</span></span>.</h2>
<div class="outline-text-2" id="text-1">
<blockquote>
<p>
I have lots of .org files, I currently store them on my window's
machine, onedrive folder. So they are backed up to the cloud.
</p>

<p>
I want to use those notes in a text editor called emacs. But when I
ntry to reach the notes over wsl, I must go this path to reach them on
windows - /mnt/c/user/xxx/org-notes to
</p>

<p>
this loads the notes very slowly compared if they were on wsl
directly.
</p>

<p>
How can I BOTH have the files load quickly, same as if they were on my
wsl AND have those files in google cloud?
</p>
</blockquote>
</div>
</div>

<div id="outline-container-org103fcf7" class="outline-2">
<h2 id="org103fcf7"><span class="section-number-2">2.</span> Solution not worth considering</h2>
<div class="outline-text-2" id="text-2">
<p>
I heard that you can create a symlink from windows to wsl. I tried doing that:
</p>

<div class="org-src-container">
<pre class="src src-bash"># open cmd as admin
cd /d C:\Users\arvydas\OneDrive\Documents
mklink /D HELLO \\wsl.localhost\Ubuntu\home\arvy\.emacs.d\EMACS_DALYKAI
</pre>
</div>

<p>
That worked, symlink was created, but then I started to think what would happen
if I delete WSL. All my notes will also be deleted. Meaning that the symlink
will point to nowhere. Not good. Ditched this idea.
</p>
</div>
</div>

<div id="outline-container-orgfd32b0f" class="outline-2">
<h2 id="orgfd32b0f"><span class="section-number-2">3.</span> Temporary working solution</h2>
<div class="outline-text-2" id="text-3">
<p>
Create a symbolic link within WSL that points directly to your
OneDrive folder:
</p>

<div class="org-src-container">
<pre class="src src-bash">ln -s /mnt/c/Users/xxx/org-notes /path/in/WSL/org-notes
</pre>
</div>

<p>
This will enable a little bit faster access to your OneDrive-stored
.org files within WSL.
</p>

<p>
Yes, I think it is faster. Notes are created and opened faster.
</p>
</div>
</div>

<div id="outline-container-org27e0f12" class="outline-2">
<h2 id="org27e0f12"><span class="section-number-2">4.</span> Permanent working solution</h2>
<div class="outline-text-2" id="text-4">
<p>
What I will do is create a shell script that will automatically run on each wsl
launch. It will copy the files from wsl notes dir to OneDrive notes dir.
</p>

<p>
commit - 2ba4f55
</p>
</div>

<div id="outline-container-org7463531" class="outline-3">
<h3 id="org7463531"><span class="section-number-3">4.1.</span> Option 1 - use <code>cp</code> command to copy</h3>
<div class="outline-text-3" id="text-4-1">
<p>
Shell script lies in:
</p>

<div class="org-src-container">
<pre class="src src-bash">~/.emacs.d/MISC/copy_to_onedrive.sh
</pre>
</div>

<p>
Can use a simple copy method to copy the files:
</p>

<ul class="org-ul">
<li>no progress</li>
<li>no exclusion of directories</li>
<li>takes everything, not only what has changed</li>
<li>can not show stats of the run</li>
</ul>

<div class="org-src-container">
<pre class="src src-bash">cp -r GIT/notes/* /mnt/c/Users/arvydas/OneDrive/Documents/notes/
</pre>
</div>
</div>
</div>

<div id="outline-container-org669128c" class="outline-3">
<h3 id="org669128c"><span class="section-number-3">4.2.</span> Option 2(final) - Use <code>rsync</code> command</h3>
<div class="outline-text-3" id="text-4-2">
<p>
Or can use <code>Rsycn</code> - it performs synchronization between source and
destination. It copies only the differences between the source and destination
files. It checks file timestamps and sizes to determine which files need to be
updated
</p>

<div class="org-src-container">
<pre class="src src-bash">rsync -ah --progress --delete --exclude='.git' GIT/notes/ /mnt/c/Users/arvydas/OneDrive/Documents/notes/ --stats
</pre>
</div>

<p>
Then make this file executable:
</p>

<div class="org-src-container">
<pre class="src src-bash">chmod +x .emacs.d/MISC/copy_to_onedrive.sh
</pre>
</div>
</div>
</div>

<div id="outline-container-org49aa605" class="outline-3">
<h3 id="org49aa605"><span class="section-number-3">4.3.</span> Update <code>.bashrc</code> file to copy automatically</h3>
<div class="outline-text-3" id="text-4-3">
<p>
Add the script execution to your .bashrc
</p>

<div class="org-src-container">
<pre class="src src-bash">echo '~/.emacs.d/MISC/copy_to_onedrive.sh' &gt;&gt; ~/.bashrc
</pre>
</div>

<p>
Now the script will be run with <code>source .bashrc</code> AKA with each launch of wsl.
Which is maybe more than we need, but good anyway.
</p>

<p>
Whenever I launch wsl I will be able to see the progress of the rsynch copying
procedure.
</p>
</div>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> <a href="https://arvydasg.github.io/devnotes/html/tag-rsync.html">rsync</a> <a href="https://arvydasg.github.io/devnotes/html/tag-scripting.html">scripting</a> <a href="https://arvydasg.github.io/devnotes/html/tag-wsl.html">wsl</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[rsync]]></category>
  <category><![CDATA[scripting]]></category>
  <category><![CDATA[wsl]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231126T012052--make-denote-faster-on-wsl__emacs_rsync_scripting_wsl.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231126T012052--make-denote-faster-on-wsl__emacs_rsync_scripting_wsl.html</guid>
  <pubDate>Thu, 14 Dec 2023 16:33:37 +0000</pubDate>
</item>
<item>
  <title><![CDATA[emacs hooks explanation]]></title>
  <description><![CDATA[
<p>
Amazing tutorial here at 1:13:40 -
<a href="https://www.youtube.com/watch?v=gfZDwYeBlO4&amp;t=2637s">https://www.youtube.com/watch?v=gfZDwYeBlO4&amp;t=2637s</a> All of this is done in
scratch buffer.
</p>

<p>
First, lets find what kind of function we want to add our code to. Let's say
<code>org-clock-in</code>. When I do org-clock-in command, I want my piece of code to run.
Okay. Let's find the "org-clock-in" source code. Press C-h k - this will ask us
to input a command. We input the command we are curious about. It is
"org-clock-in" command, which is C-c C-x C-i. As we write that command and
press enter, we get the following result:
</p>

<p>
C-c C-x TAB runs the command org-clock-in (found in org-mode-map), which is an
interactive autoloaded compiled Lisp function in ‘org-clock.el’.
</p>

<p>
Aha! Function in 'org-clock.el'. Okay, we click on that and it leads us to the
source code of "org-clock-in". We look for a hook function in there. We do C-s
to find work, find the "org-clock-in-hook" function and now we are ready to
write our little piece of code, since we know a hook for it exists.
</p>

<p>
And that would be the little piece of code. We are adding a hook, and after
lambda inputting our function. Great.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(add-hook 'org-clock-in-hook '(lambda () (message "this works")))
</pre>
</div>

<p>
We then evaluate that function by C-c C-e with our cursor at the last ) and
then we can go to an .org file and call "org-clock-in" function and watch our
message bar. The message will show up there.
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231126T005654--emacs-hooks-explanation__emacs.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231126T005654--emacs-hooks-explanation__emacs.html</guid>
  <pubDate>Thu, 14 Dec 2023 16:33:37 +0000</pubDate>
</item>
<item>
  <title><![CDATA[javascript in emacs]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org15fb15f">1. dap mode debugger for javacript</a></li>
<li><a href="#org4788e82">2. run js files in emacs</a>
<ul>
<li><a href="#org5c67a3c">2.1. javascript and emacs</a></li>
<li><a href="#org664588e">2.2. skewer mode - live javascipt in browser</a></li>
<li><a href="#org071d782">2.3. live js editing in emacs with skewer mode</a></li>
<li><a href="#org62c3a29">2.4. emacs live javascript editing lsp mode</a>
<ul>
<li><a href="#org4ede763">2.4.1. traukti fn name - megins surasti vistiek. Labai pravartu</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</nav>

<div id="outline-container-org15fb15f" class="outline-2">
<h2 id="org15fb15f"><span class="section-number-2">1.</span> dap mode debugger for javacript</h2>
<div class="outline-text-2" id="text-1">
<p>
docs - <a href="https://emacs-lsp.github.io/dap-mode/page/configuration/#javascript">https://emacs-lsp.github.io/dap-mode/page/configuration/#javascript</a>
</p>

<ul class="org-ul">
<li>download zip file from <a href="https://emacs-lsp.github.io/dap-mode/page/configuration/#javascript">here</a>.</li>
<li>create two folders ~/.emacs.d/.extension/vscode</li>
<li>only extract it like described <a href="https://github.com/emacs-lsp/dap-mode/issues/554#issuecomment-1171256089">here</a>.</li>
<li>jeigu sako jog file location not found (buffer chrome browser
stderr) - perkelk parsisiustus files ten kur jis iesko</li>
<li>M-x dap-chrome-setup (while in .js window)</li>
<li>M-x dap-debug and choose THE SAME url as live server - f.x react runs
on this <a href="http://localhost:3000/">http://localhost:3000/</a></li>
<li>Or choose file - M-x dap-debug and choose file option</li>
<li>then it works boyyyy</li>
<li>dap-debug-last to repeat the last debug command, no need to
respecify stuff</li>
<li>Download the React DevTools for a better development experience:
<a href="https://reactjs.org/link/react-devtools">https://reactjs.org/link/react-devtools</a> - components and profiler
thingies will apper in developer toolbar</li>
<li>right click on debug  sessions to delete all old sessions</li>
<li>double click on the session to navigate there</li>
<li>dap-switch-stack-frame - same jump, just without a mouse</li>
<li>dap-disconnect - stops debugging</li>
<li>dap-debug-recent - see all the recent sessions</li>
<li>dap-ui-sessions to jump to sessions and then D to delete sessions</li>
<li>dap-debug-edit-template</li>
<li>and ofc some thoughts from <a href="https://www.youtube.com/watch?v=0bilcQVSlbM&amp;ab_channel=SystemCrafters">System Crafters</a>.</li>
</ul>
</div>
</div>

<div id="outline-container-org4788e82" class="outline-2">
<h2 id="org4788e82"><span class="section-number-2">2.</span> run js files in emacs</h2>
<div class="outline-text-2" id="text-2">
<p>
have node installed
</p>

<p>
can do node testfile.js
ir kaskart sita runinant - pakalkuluos tau dalykus. Aisku su python
patogiau, gali line by line evaluate, bet vis sis tas.
</p>

<p>
arba gali naudoti javascript repl(M-x run-js), bus toks pat dalykas kaip ir
browserio consoleje - tik naudok sita<a href="https://github.com/redguardtoo/js-comint"> js-comint</a> package
</p>

<p>
js-run
js-send-region
</p>
</div>

<div id="outline-container-org5c67a3c" class="outline-3">
<h3 id="org5c67a3c"><span class="section-number-3">2.1.</span> javascript and emacs</h3>
<div class="outline-text-3" id="text-2-1">
<p>
today installed javascript syntax highlighting for emacs - js2-mode.
Love it. Here are some more ideas:
</p>

<p>
<a href="https://github.com/howardabrams/dot-files/blob/master/emacs-javascript.org">https://github.com/howardabrams/dot-files/blob/master/emacs-javascript.org</a>
</p>
</div>
</div>
<div id="outline-container-org664588e" class="outline-3">
<h3 id="org664588e"><span class="section-number-3">2.2.</span> skewer mode - live javascipt in browser</h3>
<div class="outline-text-3" id="text-2-2">
<ul class="org-ul">
<li>run skewer in javascript file</li>
<li>c-c c-k load javascipt buffer to skewer</li>
<li>ctrl+alt+x to reflect changes in browser</li>
</ul>
</div>
</div>
<div id="outline-container-org071d782" class="outline-3">
<h3 id="org071d782"><span class="section-number-3">2.3.</span> live js editing in emacs with skewer mode</h3>
<div class="outline-text-3" id="text-2-3">
<ol class="org-ol">
<li>open a js file</li>
<li>Enable JS2-mode (a dependency of skewer)</li>
<li>Enable skewer-mode</li>
<li>M-xrun-skewer (a browser opens, go back to myskewer.js)</li>
<li>open buffer called <b>http</b> to check if skewer is running, refresh
browser page to confirm</li>
<li>Type alert("hello"); and hit C-xC-e at the end of that line</li>
<li>Go back to the browser.</li>
<li><p>
put in THIS (below) head tag - try to reload index.html window in browser - <b>http</b>
should reflect that
</p>
<div class="org-src-container">
<pre class="src src-html">&lt;script src="http://localhost:8080/skewer"&gt;&lt;/script&gt;
</pre>
</div></li>
<li><p>
load whole buffer if something
</p>

<p>
realiai cia geriausias example -
<a href="https://emacs.stackexchange.com/questions/2376/how-to-use-skewer-mode">https://emacs.stackexchange.com/questions/2376/how-to-use-skewer-mode</a>
</p>

<p>
bet still man nepatinka, neloadina modules&#x2026;
</p></li>
</ol>
</div>
</div>

<div id="outline-container-org62c3a29" class="outline-3">
<h3 id="org62c3a29"><span class="section-number-3">2.4.</span> emacs live javascript editing lsp mode</h3>
<div class="outline-text-3" id="text-2-4">
<ul class="org-ul">
<li>pirma properly install node</li>
<li>basically sitas video - <a href="https://www.youtube.com/watch?v=E-NAM9U5JYE&amp;ab_channel=SystemCrafters">https://www.youtube.com/watch?v=E-NAM9U5JYE&amp;ab_channel=SystemCrafters</a></li>
<li>install lsp</li>
<li>install needed lsp-language server M-x lsp-install-server(ts-ls in
javascript case)</li>
</ul>
<p>
p- write lsp in opened js buffer - choose location
</p>
<ul class="org-ul">
<li>lsp works. autocompletion, suggestion (m-x completion-at-point) if
it does not</li>
<li>REFERENCE FIND - C-c l g r - find by reference(show in other files) (with evil mode
jump back with c-o)</li>
<li>DEFINITION FIND - C-c l g g - go to definition!!!</li>
<li>RENAME - C-c l r r</li>
<li>green underline - lightbulb to fix the error (flymake enabled) (let
un = undefined;)</li>
<li>lsp format buffer (other packages can do a better job)</li>
<li>lsp-ui-workspace-symbol - nusoks i definition, nebutinai ant jos
hoverint - kazkoks sudas</li>
<li>lsp-ivy-workspace-symbol - nusoks i definition, gali is uzpakalio</li>
</ul>
</div>
<div id="outline-container-org4ede763" class="outline-4">
<h4 id="org4ede763"><span class="section-number-4">2.4.1.</span> traukti fn name - megins surasti vistiek. Labai pravartu</h4>
</div>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> <a href="https://arvydasg.github.io/devnotes/html/tag-js.html">js</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[js]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231126T005615--javascript-in-emacs__emacs_js.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231126T005615--javascript-in-emacs__emacs_js.html</guid>
  <pubDate>Thu, 14 Dec 2023 16:33:37 +0000</pubDate>
</item>
<item>
  <title><![CDATA[run sql from emacs]]></title>
  <description><![CDATA[
<p>
If on Ubuntu:
</p>

<div class="org-src-container">
<pre class="src src-bash">sudo apt-get install sqlite3
</pre>
</div>

<ul class="org-ul">
<li>have an sqlite db ready(possibly from django)</li>
<li>create an org file and follow <a href="https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-sqlite.html">these instructions</a> to connect to the db</li>
<li>I also have this in my emacs config</li>
</ul>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(org-babel-do-load-languages
 'org-babel-load-languages (quote ((emacs-lisp . t)
                                   (sqlite . t)
                                   (R . t)
                                   (python . t))))
</pre>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> <a href="https://arvydasg.github.io/devnotes/html/tag-sql.html">sql</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[sql]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231126T005538--run-sql-from-emacs__emacs_sql.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231126T005538--run-sql-from-emacs__emacs_sql.html</guid>
  <pubDate>Thu, 14 Dec 2023 16:33:37 +0000</pubDate>
</item>
<item>
  <title><![CDATA[org clock report]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org45412e5">1. examples</a></li>
</ul>
</div>
</nav>
<p>
Was useful in obelsdumas times when I wanted to track how much time I used on
building and working on the project. Padaryti isklotines su laiku kiek dirbau
prie ko ir pan.
</p>

<p>
Link to the docs - <a href="https://orgmode.org/manual/The-clock-table.html">https://orgmode.org/manual/The-clock-table.html</a>
</p>

<div id="outline-container-org45412e5" class="outline-2">
<h2 id="org45412e5"><span class="section-number-2">1.</span> examples</h2>
<div class="outline-text-2" id="text-1">
<p>
<span class="timestamp-wrapper"><span class="timestamp">[2022-04-10 Sun] </span></span> Daily org-diary file report BY TAG
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">#+BEGIN: clocktable :maxlevel 3 :scope file :tags t :sort (1 . ?a) :emphasize t :narrow 100! :match "emacs"
</pre>
</div>

<p>
<span class="timestamp-wrapper"><span class="timestamp">[2022-04-10 Sun] </span></span> Daily org-diary file report without tag, show all tasks
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">#+BEGIN: clocktable :maxlevel 3 :scope file :tags t :sort (1 . ?a) :emphasize t :narrow 100!
</pre>
</div>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231126T005411--org-clock-report__emacs.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231126T005411--org-clock-report__emacs.html</guid>
  <pubDate>Thu, 14 Dec 2023 16:33:37 +0000</pubDate>
</item>
<item>
  <title><![CDATA[org agenda]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orge70073b">1. tips</a></li>
<li><a href="#org634e54e">2. advanced agenda</a></li>
<li><a href="#org62b06e5">3. org agenda filtering</a></li>
</ul>
</div>
</nav>

<div id="outline-container-orge70073b" class="outline-2">
<h2 id="orge70073b"><span class="section-number-2">1.</span> tips</h2>
<div class="outline-text-2" id="text-1">
</div>
</div>

<div id="outline-container-org634e54e" class="outline-2">
<h2 id="org634e54e"><span class="section-number-2">2.</span> advanced agenda</h2>
<div class="outline-text-2" id="text-2">
<ul class="org-ul">
<li>advanced searching - <a href="https://orgmode.org/worg/org-tutorials/advanced-searching.html">https://orgmode.org/worg/org-tutorials/advanced-searching.html</a></li>
<li>special agenda views - <a href="https://orgmode.org/manual/Special-Agenda-Views.html">https://orgmode.org/manual/Special-Agenda-Views.html</a></li>
<li>agenda- commands <a href="https://orgmode.org/manual/Agenda-Commands.html">https://orgmode.org/manual/Agenda-Commands.html</a></li>
</ul>
</div>
</div>

<div id="outline-container-org62b06e5" class="outline-2">
<h2 id="org62b06e5"><span class="section-number-2">3.</span> <a href="https://orgmode.org/worg/doc.html">org agenda filtering</a></h2>
<div class="outline-text-2" id="text-3">
<p>
was useful when needed to filter by effor. use this- _
</p>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231126T005253--org-agenda__emacs.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231126T005253--org-agenda__emacs.html</guid>
  <pubDate>Thu, 14 Dec 2023 16:33:37 +0000</pubDate>
</item>
<item>
  <title><![CDATA[byte compile emacs packages]]></title>
  <description><![CDATA[
<p>
<a href="https://stackoverflow.com/questions/24725778/how-to-rebuild-elpa-packages-after-upgrade-of-emacs">what is it</a>
</p>

<p>
It was useful for me when I was installing 28 emacs on ubuntu and then lost
syntax highlighting in js2 mode. I then found <a href="https://github.com/mooz/js2-mode/issues/72#issuecomment-15176816">this</a> fix. did M-: and wrote this
to fix it:
</p>

<div class="org-src-container">
<pre class="src src-elisp">;; dont forget the exact file path
(byte-recompile-directory (expand-file-name "~/.emacs.d/elpa/js2-mode-20130307.2012/") 0 t)
</pre>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231126T005026--byte-compile-emacs-packages__emacs.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231126T005026--byte-compile-emacs-packages__emacs.html</guid>
  <pubDate>Thu, 14 Dec 2023 16:33:37 +0000</pubDate>
</item>
<item>
  <title><![CDATA[swap ctrl with capslock]]></title>
  <description><![CDATA[
<p>
Doing this mainly for emacs.
</p>

<p>
I guess this in linux:
</p>
<div class="org-src-container">
<pre class="src src-bash">/usr/bin/setxkbmap -option "ctrl:swapcaps"
</pre>
</div>

<p>
and I use powertoys windows app for windows to accomplish the same.
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> <a href="https://arvydasg.github.io/devnotes/html/tag-linux.html">linux</a> <a href="https://arvydasg.github.io/devnotes/html/tag-windows.html">windows</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[linux]]></category>
  <category><![CDATA[windows]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231126T004316--swap-ctrl-with-capslock__emacs_linux_windows.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231126T004316--swap-ctrl-with-capslock__emacs_linux_windows.html</guid>
  <pubDate>Thu, 14 Dec 2023 16:33:37 +0000</pubDate>
</item>
<item>
  <title><![CDATA[install emacs on windows]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgd5f2f9e">1. Installation 1:</a></li>
<li><a href="#orgf538712">2. Installation 2:</a></li>
</ul>
</div>
</nav>
<p>
Not sure if installation 1 or installation 2 is the good one, so when you will
try to install it once again - summarize the instructions to a proper document.
</p>

<div id="outline-container-orgd5f2f9e" class="outline-2">
<h2 id="orgd5f2f9e"><span class="section-number-2">1.</span> Installation 1:</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li class="off"><code>[&#xa0;]</code> Great <a href="https://www.youtube.com/watch?v=0OLfdiZ_b0k&amp;ab_channel=LigerLearn">video here</a> showcasing the steps below</li>
<li class="off"><code>[&#xa0;]</code> install emacs from <a href="http://ftp.gnu.org/gnu/emacs/windows/">here</a></li>
<li class="off"><code>[&#xa0;]</code> go to C:\Program Files\Emacs, find emacs, take the run icon</li>
<li class="off"><code>[&#xa0;]</code> launch emacs, press C-x C-f, then press ~/ - shows you the
directory emacs thinks of as 'HOME'</li>
<li class="off"><code>[&#xa0;]</code> create init.el file in here, Save-as init.el - then the file is
with correct file extension and not .txt</li>
<li class="off"><code>[&#xa0;]</code> <p>
add basic emacs config, such as:
press C-c C-, to make the source block
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(setq inhibit-startup-message t
      initial-scratch-message "Hello world"
      cursor-type 'bar) (setq inhibit-startup-message t)
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(defalias 'yes-or-no-p 'y-or-n-p)
</pre>
</div></li>
<li class="off"><code>[&#xa0;]</code> Restart emacs and check if it works (it should)</li>
<li class="off"><code>[&#xa0;]</code> install fonts on windows machine
<a href="https://github.com/domtronn/all-the-icons.el/tree/master/fonts">https://github.com/domtronn/all-the-icons.el/tree/master/fonts</a> go
here, download fonts one by one and install</li>
<li class="off"><code>[&#xa0;]</code> install python on windows
<a href="https://stackoverflow.com/questions/65348890/python-was-not-found-run-without-arguments-to-install-from-the-microsoft-store">https://stackoverflow.com/questions/65348890/python-was-not-found-run-without-arguments-to-install-from-the-microsoft-store</a></li>
<li class="off"><code>[&#xa0;]</code> <p>
windows + linux configas
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(cond ((eq system-type 'windows-nt)
       (defun display-startup-echo-area-message ()
         (message "Writing from windows"))
       )
      ((eq system-type 'gnu/linux)
       (defun display-startup-echo-area-message ()
         (message "Writing from linux"))
       ))
</pre>
</div></li>
</ul>
</div>
</div>

<div id="outline-container-orgf538712" class="outline-2">
<h2 id="orgf538712"><span class="section-number-2">2.</span> Installation 2:</h2>
<div class="outline-text-2" id="text-2">
<p>
some useful stuff
<a href="https://www.gnu.org/software/emacs/manual/html_mono/efaq-w32.html#Location-of-init-file">https://www.gnu.org/software/emacs/manual/html_mono/efaq-w32.html#Location-of-init-file</a>
</p>

<p>
install emacs from here -
<a href="http://ftp.task.gda.pl/pub/gnu/emacs/windows/emacs-27/">http://ftp.task.gda.pl/pub/gnu/emacs/windows/emacs-27/</a>
</p>

<p>
set home path variable like the guy in this tut -
<a href="https://lucidmanager.org/productivity/emacs-windows/">https://lucidmanager.org/productivity/emacs-windows/</a>
</p>

<p>
do - setx HOME %USERPROFILE% in windows powershell
</p>

<p>
then you will see that HOME variable has appeared under - settings -&gt;
system -&gt; advanced system settings -&gt; environment variables
</p>

<p>
then open emacs and do C-h v, write user-emacs-directory and enter. It
will create an .emacs.d directory under HOME path.
</p>

<p>
It works, right? okay, now you remember how to set the path.
</p>

<p>
now go back to environment variables and make it like so -
C:\Users\Arvydas\emacs
</p>

<p>
You will place the .emacs file in that folder and also .emacs.d folder
will appear in it. great.
</p>

<p>
put some variables in .emacs and confirm that emacs got modified
</p>

<p>
(menu-bar-mode -1) ; Disable the menu bar (tool-bar-mode -1) ; Disable
the toolbar (tooltip-mode -1) ; Disable tooltips (set-fringe-mode 10)
; Give some breathing room
</p>

<p>
worked for me so far.
</p>

<p>
Time to link it with Dropbox.
</p>

<p>
add this to the .emacs file. right under use-package installation
</p>

<p>
(org-babel-load-file (expand-file-name
"C:\\Users\\Arvydas\\Dropbox\\temp<sub>emacs\\myinit.org</sub>"))
</p>

<p>
imesk theme i .emacs.d, jokiu folderiu. turetu veikti
</p>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> <a href="https://arvydasg.github.io/devnotes/html/tag-windows.html">windows</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[windows]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231126T004115--install-emacs-on-windows__emacs_windows.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231126T004115--install-emacs-on-windows__emacs_windows.html</guid>
  <pubDate>Thu, 14 Dec 2023 16:33:37 +0000</pubDate>
</item>
<item>
  <title><![CDATA[emacs colors in tmux]]></title>
  <description><![CDATA[
<p>
Jeigu kartais noresi pasileisti emacs in tmux (shudas, kol kas neradau kaip
padaryti, kad galeciau close all headers in .org file), tai noresi tikriausiai
ir spalvas atitaikyti. By default jeigu per tmux paleidi <code>emacs -nw</code>, tuomet
buna shudinos spalvos.
</p>

<p>
Reikia sekti sita tutorial -
<a href="https://unix.stackexchange.com/questions/1045/getting-256-colors-to-work-in-tmux201">https://unix.stackexchange.com/questions/1045/getting-256-colors-to-work-in-tmux201</a>
</p>

<p>
basically this:
</p>

<div class="org-src-container">
<pre class="src src-bash">~$ which tmux
tmux: aliased to TERM=xterm-256color tmux
# and in in my .tmux.conf:

set -g default-terminal "screen-256color"
# Aliasing tmux to "tmux -2" should also do the trick.

#And don't forget to restart your tmux server: (see @mast3r answer)
tmux kill-server &amp;&amp; tmux201
</pre>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> <a href="https://arvydasg.github.io/devnotes/html/tag-tmux.html">tmux</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[tmux]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231126T004018--emacs-colors-in-tmux__emacs_tmux.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231126T004018--emacs-colors-in-tmux__emacs_tmux.html</guid>
  <pubDate>Thu, 14 Dec 2023 16:33:37 +0000</pubDate>
</item>
<item>
  <title><![CDATA[emacs in daemon mode]]></title>
  <description><![CDATA[
<p>
<a href="https://www.youtube.com/watch?v=ZjCRxAMPdNc&amp;ab_channel=SystemCrafters">link ofc</a>
</p>

<p>
alot of the times config can get big and take 3-5 or even 1-sec to
load.
</p>

<p>
the most important commands:
</p>
<ul class="org-ul">
<li>emacs &#x2013;deamon</li>
<li>OR</li>
<li>emacs &#x2013;fg-deamon (only run foreground process)</li>
<li><code>C-h v server-socket-dir</code> (shows where the server is running)</li>
<li>ls /run/user/1000/emacs</li>
<li><code>emacsclient -c -n</code> (no wait)</li>
<li><code>emacsclient -e "(kill-emacs)"</code> kill the daemon server if you want to
reload the congif</li>
</ul>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231126T003942--emacs-in-daemon-mode__emacs.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231126T003942--emacs-in-daemon-mode__emacs.html</guid>
  <pubDate>Thu, 14 Dec 2023 16:33:37 +0000</pubDate>
</item>
<item>
  <title><![CDATA[emacs init time]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org4db634c">1. emacs init time</a></li>
<li><a href="#org8db8b25">2. use-package-report</a></li>
<li><a href="#orgfd09224">3. Show startup time on emacs-load</a></li>
<li><a href="#orgad2e8d5">4. Message</a></li>
<li><a href="#org86a221b">5. <span class="todo TODO">TODO</span> now these message are not needed anymore, since I compile emacs at each config change</a></li>
</ul>
</div>
</nav>

<div id="outline-container-org4db634c" class="outline-2">
<h2 id="org4db634c"><span class="section-number-2">1.</span> emacs init time</h2>
<div class="outline-text-2" id="text-1">
<p>
<a href="https://www.youtube.com/watch?v=9i_9hse_Y08&amp;t=492s">How to Cut Emacs Start Up Time in Half! - Emacs From Scratch #12</a>
</p>
</div>
</div>

<div id="outline-container-org8db8b25" class="outline-2">
<h2 id="org8db8b25"><span class="section-number-2">2.</span> use-package-report</h2>
<div class="outline-text-2" id="text-2">
<p>
<span class="timestamp-wrapper"><span class="timestamp">[2022-04-10 Sun] </span></span> allows to invoke and use use-package-report
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(setq use-package-compute-statistics t)
</pre>
</div>
</div>
</div>

<div id="outline-container-orgfd09224" class="outline-2">
<h2 id="orgfd09224"><span class="section-number-2">3.</span> Show startup time on emacs-load</h2>
<div class="outline-text-2" id="text-3">
<div class="org-src-container">
<pre class="src src-emacs-lisp">(defun efs/display-startup-time ()
  (message "Emacs loaded in %s with %d garbage collections."
           (format "%.2f seconds"
                   (float-time
                    (time-subtract after-init-time before-init-time)))
           gcs-done))

(add-hook 'emacs-startup-hook #'efs/display-startup-time)
</pre>
</div>
</div>
</div>

<div id="outline-container-orgad2e8d5" class="outline-2">
<h2 id="orgad2e8d5"><span class="section-number-2">4.</span> Message</h2>
<div class="outline-text-2" id="text-4">
<p>
Add such message in the package and then look at <b>messages</b> buffer on startup
to find which one has failed.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">:config
(message "Org-roam got loaded!")
</pre>
</div>
</div>
</div>

<div id="outline-container-org86a221b" class="outline-2">
<h2 id="org86a221b"><span class="section-number-2">5.</span> <span class="todo TODO">TODO</span> now these message are not needed anymore, since I compile emacs at each config change</h2>
<div class="outline-text-2" id="text-5">
<p>
link to a post where I describe that
</p>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231126T003911--emacs-init-time__emacs.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231126T003911--emacs-init-time__emacs.html</guid>
  <pubDate>Thu, 14 Dec 2023 16:33:37 +0000</pubDate>
</item>
<item>
  <title><![CDATA[org roam]]></title>
  <description><![CDATA[
<p>
Quite old notes about using org-roam package in emacs.
</p>

<ol class="org-ol">
<li><a href="https://youtu.be/AyhPmypHDEw">Getting Started with Org Roam - Build a Second Brain in Emacs</a> <a href="https://systemcrafters.cc/build-a-second-brain-in-emacs/getting-started-with-org-roam/">shownotes</a></li>
<li><a href="https://youtu.be/YxgA5z2R08I">Capturing Notes Efficiently in Emacs with Org Roam</a> <a href="https://systemcrafters.net/build-a-second-brain-in-emacs/capturing-notes-efficiently/">shownotes</a></li>
<li><a href="https://youtu.be/3-sLBaJAtew">Org Roam: The Best Way to Keep a Journal in Emacs</a> <a href="https://systemcrafters.net/build-a-second-brain-in-emacs/keep-a-journal/">shownotes</a></li>
<li><a href="https://youtu.be/CUkuyW6hr18">5 Org Roam Hacks for Better Productivity in Emacs</a> <a href="https://systemcrafters.net/build-a-second-brain-in-emacs/5-org-roam-hacks/">shownotes</a></li>
</ol>

<p>
<a href="https://coredumped.dev/2021/05/26/taking-org-roam-everywhere-with-logseq/">Taking org-roam everywhere with logseq</a>
</p>

<p>
KEY - linking roam notes with id's in html -
<a href="https://www.reddit.com/r/emacs/comments/q82zci/how_to_include_the_id_links_into_your_orgroam/">https://www.reddit.com/r/emacs/comments/q82zci/how_to_include_the_id_links_into_your_orgroam/</a>
</p>


<p>
I have found org-roam to be nice to use as I remember, but file naming was
a little strange + I remember I did not like he idea of having a database to
store all the links between notes. Also I was not really using the full
potential and functionalities(graphs, backlinks, etc) that it offered.
</p>

<p>
That is why, when the idea of having a "second-brain" started to creep towards
me, I choose denote. TODO-explain why
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231126T003848--org-roam__emacs.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231126T003848--org-roam__emacs.html</guid>
  <pubDate>Thu, 14 Dec 2023 16:33:37 +0000</pubDate>
</item>
<item>
  <title><![CDATA[images in org files]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org3708fb4">1. Display images in org files</a></li>
<li><a href="#orgbf200c0">2. If you have the image with you</a></li>
<li><a href="#org1af15d9">3. If you don't have an image and want to insert a screenshot</a></li>
<li><a href="#org778b8ba">4. Resizing images in emacs and html</a></li>
</ul>
</div>
</nav>

<figure id="orgc831c31">
<img src="../media/water.jpg" alt="water.jpg" width="800px">

</figure>

<div id="outline-container-org3708fb4" class="outline-2">
<h2 id="org3708fb4"><span class="section-number-2">1.</span> Display images in org files</h2>
<div class="outline-text-2" id="text-1">
<p>
To display inline images in org buffer after you have placed some, click <code>C-c
C-x C-v</code>.
</p>
</div>
</div>

<div id="outline-container-orgbf200c0" class="outline-2">
<h2 id="orgbf200c0"><span class="section-number-2">2.</span> If you have the image with you</h2>
<div class="outline-text-2" id="text-2">
<p>
To insert an image, do C-u then C-c C-l. easy. if you add a
description, it won't show the image, but rather the description with
an indication of a link.
</p>

<p>
<span class="timestamp-wrapper"><span class="timestamp">[2023-12-14 Thu] </span></span> or what I use now is yasnippet that looks like such, that is
the yasnippet template:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">#+attr_html: :width 800px
#+ATTR_ORG: :width 600
[[./static/images/.png]]
</pre>
</div>

<p>
Simply modify the path of the image and it will display it.
</p>
</div>
</div>

<div id="outline-container-org1af15d9" class="outline-2">
<h2 id="org1af15d9"><span class="section-number-2">3.</span> If you don't have an image and want to insert a screenshot</h2>
<div class="outline-text-2" id="text-3">
<p>
Use <code>org-download</code> package. After you install it, run <code>M-x
org-download-screenshot</code>.
</p>

<p>
Then make sure in init file you have specified the directory. If not, it will
save images in your current org file directory. It is good if you want to
export the file to html later and then maybe even send to someone.
</p>
</div>
</div>

<div id="outline-container-org778b8ba" class="outline-2">
<h2 id="org778b8ba"><span class="section-number-2">4.</span> Resizing images in emacs and html</h2>
<div class="outline-text-2" id="text-4">
<p>
To resize an image, add this to your init:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(setq org-image-actual-width nil)
</pre>
</div>

<p>
Then, above EACH and EVERY image add such lines:
</p>

<div class="org-src-container">
<pre class="src src-org">#+attr_html: :width 900px
#+ATTR_ORG: :width 600
[[file:images/smutifruti.png]]
</pre>
</div>

<p>
and now after C-c C-x C-v - images will display nicely, as per your request.
Beautiful.
</p>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231126T003746--images-in-org-files__emacs.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231126T003746--images-in-org-files__emacs.html</guid>
  <pubDate>Thu, 14 Dec 2023 16:33:37 +0000</pubDate>
</item>
<item>
  <title><![CDATA[why certain shortcuts dont work in emacs terminal]]></title>
  <description><![CDATA[
<p>
<a href="https://emacs.stackexchange.com/questions/75347/problem-with-key-bindings-in-emacs-in-the-terminal-on-wsl/75349#75349">https://emacs.stackexchange.com/questions/75347/problem-with-key-bindings-in-emacs-in-the-terminal-on-wsl/75349#75349</a>
</p>

<p>
You’re using Emacs inside of a terminal, and terminals have a much more limited
set of keystrokes that they can communicate. This is because historically
terminals simply had fewer keys on their keyboards, and because not all
combinations of keys were thought to be useful.
</p>

<p>
Some terminal emulators, starting with XTerm, have added new escape sequences
that are capable of communicating the full range of key combinations possible
on modern keyboards. Emacs will automatically recognize these escape sequences,
so if your terminal emulator supports them then you have a solution. If it
doesn’t perhaps you can use XTerm instead.
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231126T003353--why-certain-shortcuts-dont-work-in-emacs-terminal__emacs.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231126T003353--why-certain-shortcuts-dont-work-in-emacs-terminal__emacs.html</guid>
  <pubDate>Thu, 14 Dec 2023 16:33:37 +0000</pubDate>
</item>
<item>
  <title><![CDATA[login to another server over ssh]]></title>
  <description><![CDATA[
<p>
Over emacs do:
</p>

<div class="org-src-container">
<pre class="src src-bash">/ssh:remote-user@remote.box:/path/to/my/file
</pre>
</div>

<p>
will be prompted for password n stuff.
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> <a href="https://arvydasg.github.io/devnotes/html/tag-ssh.html">ssh</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[ssh]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231126T003317--login-to-another-server-over-ssh__emacs_ssh.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231126T003317--login-to-another-server-over-ssh__emacs_ssh.html</guid>
  <pubDate>Thu, 14 Dec 2023 16:33:37 +0000</pubDate>
</item>
<item>
  <title><![CDATA[manually install emacs package from git]]></title>
  <description><![CDATA[
<p>
Useful when you can not reach elpa/melpa repositories, for example - at work.
</p>

<p>
video showcasing that -
<a href="https://www.youtube.com/watch?v=at_fACZ_o9Q&amp;ab_channel=TimothyUnkert">https://www.youtube.com/watch?v=at_fACZ_o9Q&amp;ab_channel=TimothyUnkert</a>
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231126T003218--manually-install-emacs-package-from-git__emacs.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231126T003218--manually-install-emacs-package-from-git__emacs.html</guid>
  <pubDate>Thu, 14 Dec 2023 16:33:37 +0000</pubDate>
</item>
<item>
  <title><![CDATA[raspberrypi shops]]></title>
  <description><![CDATA[
<ul class="org-ul">
<li><a href="https://www.anodas.lt/en/raspberry-pi-en">https://www.anodas.lt/en/raspberry-pi-en</a></li>
<li><a href="https://www.distrelec.lt/">https://www.distrelec.lt/</a></li>
<li><a href="https://www.elfadistrelec.lv/">https://www.elfadistrelec.lv/</a></li>
</ul>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-raspberrypi.html">raspberrypi</a> </div>]]></description>
  <category><![CDATA[raspberrypi]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231126T001818--raspberrypi-shops__raspberrypi.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231126T001818--raspberrypi-shops__raspberrypi.html</guid>
  <pubDate>Thu, 14 Dec 2023 16:33:37 +0000</pubDate>
</item>
<item>
  <title><![CDATA[raspberrypi pins]]></title>
  <description><![CDATA[
<p>
<a href="https://forums.raspberrypi.com/viewtopic.php?t=216884#:~:text=If%20you%20really%20want%20to,or%20any%20other%20ground%20pin">https://forums.raspberrypi.com/viewtopic.php?t=216884#:~:text=If%20you%20really%20want%20to,or%20any%20other%20ground%20pin</a>).&amp;text=Some%2012V%20DC%20fans%20will,CFM%2C%20and%20with%20less%20noise.
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-raspberrypi.html">raspberrypi</a> </div>]]></description>
  <category><![CDATA[raspberrypi]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231126T001642--raspberrypi-pins__raspberrypi.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231126T001642--raspberrypi-pins__raspberrypi.html</guid>
  <pubDate>Thu, 14 Dec 2023 16:33:37 +0000</pubDate>
</item>
<item>
  <title><![CDATA[magic mirror setup]]></title>
  <description><![CDATA[
<p>
irasyk ir setup raspberry pi kaip cia - <a href="20231126T001334--raspberrypi-first-setup__raspberrypi.html">raspberry pi first setup</a>
</p>

<p>
third party modules -
<a href="https://github.com/MichMich/MagicMirror/wiki/3rd-Party-Modules">https://github.com/MichMich/MagicMirror/wiki/3rd-Party-Modules</a>
</p>

<div class="org-src-container">
<pre class="src src-bash"># quit
Ctrl + q
# start (while inside MagicMirror folder on desktop to start the app)
npm start
</pre>
</div>

<ul class="org-ul">
<li><a href="https://www.youtube.com/watch?v=-cJdwlDPqYM">pamatuok kiek telikas energijos ims naudojamas visa diena, per metus</a></li>
<li><a href="https://www.instructables.com/Gesture-Controlled-Smart-Mirror/">control with gesture</a></li>
<li><a href="https://www.youtube.com/watch?v=Zo1WT2LoaUg">temperature/humidity sensor</a></li>
<li>ismanioji rozete</li>
</ul>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-raspberrypi.html">raspberrypi</a> </div>]]></description>
  <category><![CDATA[raspberrypi]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231126T001417--magic-mirror-setup__raspberrypi.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231126T001417--magic-mirror-setup__raspberrypi.html</guid>
  <pubDate>Thu, 14 Dec 2023 16:33:37 +0000</pubDate>
</item>
<item>
  <title><![CDATA[raspberrypi first setup]]></title>
  <description><![CDATA[
<p>
Ramiausiai irasaiu i sd kortele is windowsu raspberry pi os.
</p>

<p>
ijungiau vncviewer, ijungiau ssh, 'ping raspberrypi' in terminal 0 shows me I
am connected. teo marsrutizatoriaus valdymo skydelis rodo, kad raspberrypi is
connected - pasaka.
</p>

<p>
prisijunk su ssh
</p>

<div class="org-src-container">
<pre class="src src-bash">ssh arvypi@192.1xx.1.xxx
</pre>
</div>

<p>
pass &lt;default dvi raides&gt; ir as viduj!
</p>

<p>
Install vncviewer ir krc daryk <code>ifconfig</code> inside raspberry ir pamatysi ip - su
juo pasijunk per vnc. easy, perfect, done.
</p>

<p>
<code>raspi-config</code> = pamatysi settingsus
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-raspberrypi.html">raspberrypi</a> </div>]]></description>
  <category><![CDATA[raspberrypi]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231126T001334--raspberrypi-first-setup__raspberrypi.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231126T001334--raspberrypi-first-setup__raspberrypi.html</guid>
  <pubDate>Thu, 14 Dec 2023 16:33:37 +0000</pubDate>
</item>
<item>
  <title><![CDATA[can not see branches]]></title>
  <description><![CDATA[
<p>
If after a fresh repo clone you can not see other git branches besides the main
one - do:
</p>

<p>
<code>git checkout &lt;branchname&gt;</code>
</p>

<p>
Or in magit, to see all the branches - do y(magit-show-refs)
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-git.html">git</a> </div>]]></description>
  <category><![CDATA[git]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231125T221917--can-not-see-branches__git.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231125T221917--can-not-see-branches__git.html</guid>
  <pubDate>Thu, 14 Dec 2023 16:33:37 +0000</pubDate>
</item>
<item>
  <title><![CDATA[reset changes]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgf5f22e6">1. git clean -nd</a></li>
<li><a href="#orgd97cd63">2. git clean -fd</a></li>
<li><a href="#orgf753d65">3. git reset &#x2013;hard HEAD</a></li>
</ul>
</div>
</nav>
<p>
Useful to know these commands when you are on a production server for
example, not having magit or Git desktop thing.
</p>

<div id="outline-container-orgf5f22e6" class="outline-2">
<h2 id="orgf5f22e6"><span class="section-number-2">1.</span> git clean -nd</h2>
<div class="outline-text-2" id="text-1">
<div class="org-src-container">
<pre class="src src-bash">git clean -nd
</pre>
</div>

<p>
This command is a dry run of the git clean command. It's used to preview what
files will be removed from the working directory. The flags used here are:
</p>

<p>
<code>-n</code>: Performs a dry run, which means it shows what files would be deleted
without actually deleting them.
</p>

<p>
<code>-d</code>: Tells Git to also remove untracked directories along with untracked
files.
</p>

<p>
Running <code>git clean -nd</code> will display a list of files and directories that are
currently untracked in the repository and would be removed if the command were
executed without the <code>-n</code> flag.
</p>
</div>
</div>

<div id="outline-container-orgd97cd63" class="outline-2">
<h2 id="orgd97cd63"><span class="section-number-2">2.</span> git clean -fd</h2>
<div class="outline-text-2" id="text-2">
<div class="org-src-container">
<pre class="src src-bash">git clean -fd
</pre>
</div>

<p>
<code>git clean -fd</code>: This command is used to forcefully remove untracked files and
directories from the working directory. The flags used here are:
</p>

<p>
<code>-f</code>: Stands for "force" and is used to perform the clean operation without
prompting for confirmation.
</p>

<p>
<code>-d</code>: Tells Git to also remove untracked directories along with untracked
files.
</p>

<p>
Running <code>git clean -fd</code> will permanently delete all untracked files and
directories in the repository. Be cautious while using this command as it
irreversibly removes files and directories that are not tracked by Git.
</p>
</div>
</div>

<div id="outline-container-orgf753d65" class="outline-2">
<h2 id="orgf753d65"><span class="section-number-2">3.</span> git reset &#x2013;hard HEAD</h2>
<div class="outline-text-2" id="text-3">
<div class="org-src-container">
<pre class="src src-bash">git reset --hard HEAD
</pre>
</div>

<p>
<code>git reset --hard HEAD</code>: This command resets the current branch to the state of
the HEAD commit. Here's what each part does:
</p>

<p>
git reset: Resets the current HEAD to the specified state.
</p>

<p>
<code>--hard</code>: Indicates a hard reset, which means it not only changes the HEAD to
the specified commit but also resets the index and working directory to match
that commit.
</p>

<p>
<code>HEAD</code>: Refers to the latest commit of the current branch.
</p>

<p>
Running <code>git reset --hard HEAD</code> will discard all changes in the working
directory and index, reverting them to the state of the latest commit on the
current branch. Be careful when using git reset &#x2013;hard as it can discard all
uncommitted changes irretrievably.
</p>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-git.html">git</a> </div>]]></description>
  <category><![CDATA[git]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231125T221653--reset-changes__git.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231125T221653--reset-changes__git.html</guid>
  <pubDate>Thu, 14 Dec 2023 16:33:37 +0000</pubDate>
</item>
<item>
  <title><![CDATA[seq keep error message in emacs]]></title>
  <description><![CDATA[
<p>
<a href="https://emacs.stackexchange.com/questions/78977/seq-keep-is-void-when-installing-magit-through-use-package">https://emacs.stackexchange.com/questions/78977/seq-keep-is-void-when-installing-magit-through-use-package</a>
</p>

<p>
should install emacs 29 bla
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> <a href="https://arvydasg.github.io/devnotes/html/tag-magit.html">magit</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[magit]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231125T220943--seq-keep-error-message-in-emacs__emacs_magit.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231125T220943--seq-keep-error-message-in-emacs__emacs_magit.html</guid>
  <pubDate>Thu, 14 Dec 2023 16:33:37 +0000</pubDate>
</item>
<item>
  <title><![CDATA[partial clone]]></title>
  <description><![CDATA[
<p>
<a href="https://magit.vc/manual/magit/Sparse-checkouts.html">https://magit.vc/manual/magit/Sparse-checkouts.html</a>
</p>

<p>
Useful when I wanted to clone only one dir at work from my personal
org notes directory.
</p>

<ul class="org-ul">
<li>go to src folder and do <code>m-x magit-clone-sparse</code></li>
<li>investigate the .git folder, see the content and watch how it updates in next
steps</li>
<li><code>m-x magit sparse checkout enable</code> (see the changes)</li>
<li>inside info folder sparse-checkout appeared</li>
<li>config and index also changed</li>
<li><code>c-x g</code> - go to magit interface</li>
<li>do <code>&gt;</code></li>
<li><code>s</code> to set directories(tab to select)</li>
<li>needed directory is fetched. MAGIC!</li>
<li>if you do <code>s</code> again to change dirs - old dir gets removed :o</li>
</ul>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-git.html">git</a> <a href="https://arvydasg.github.io/devnotes/html/tag-magit.html">magit</a> </div>]]></description>
  <category><![CDATA[git]]></category>
  <category><![CDATA[magit]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231125T220901--partial-clone__git_magit.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231125T220901--partial-clone__git_magit.html</guid>
  <pubDate>Thu, 14 Dec 2023 16:33:37 +0000</pubDate>
</item>
<item>
  <title><![CDATA[copy a repo with all commit history]]></title>
  <description><![CDATA[
<p>
The commands provided below are used to push all local branches, tags, and
commits from one Git repository to another repository.
</p>

<p>
For instance, if the new repository is located in a directory named new<sub>repo</sub>,
you'd execute:
</p>

<div class="org-src-container">
<pre class="src src-bash">cd /path/to/new_repo
</pre>
</div>

<p>
<code>git push --mirror &lt;url of old repo&gt;</code>: This Git command pushes all branches,
tags, and commits from the current repository (in the changed directory) to
another repository specified by &lt;url of old repo&gt;. The <code>--mirror</code> flag is used
to ensure that all references (branches and tags) and associated objects are
pushed to the remote repository.
</p>

<p>
Replace <code>&lt;url of old repo&gt;</code> with the URL or remote repository location of the
old repository.
</p>

<p>
For example:
</p>

<div class="org-src-container">
<pre class="src src-bash">git push --mirror https://github.com/old_username/old_repo.git
</pre>
</div>

<p>
This sequence of commands, after changing the directory to the new repository,
essentially mirrors the content of the old repository, including all branches,
tags, commits, and their associated history, to the new repository specified by
<code>&lt;url of old repo&gt;</code>.
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-git.html">git</a> </div>]]></description>
  <category><![CDATA[git]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231125T220538--copy-a-repo-with-all-commit-history__git.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231125T220538--copy-a-repo-with-all-commit-history__git.html</guid>
  <pubDate>Thu, 14 Dec 2023 16:33:37 +0000</pubDate>
</item>
<item>
  <title><![CDATA[revert a commit with magit]]></title>
  <description><![CDATA[
<p>
<a href="https://www.youtube.com/watch?v=7D4cV0aodGw&amp;ab_channel=whatacold">best explanation</a> at 3:55
</p>

<div class="org-src-container">
<pre class="src src-bash"># open magit
C-x g -
# open log
l l
# select the commits
C-space n/p
# revert the commits
V V
</pre>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-git.html">git</a> <a href="https://arvydasg.github.io/devnotes/html/tag-magit.html">magit</a> </div>]]></description>
  <category><![CDATA[git]]></category>
  <category><![CDATA[magit]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231125T214132--revert-a-commit__git_magit.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231125T214132--revert-a-commit__git_magit.html</guid>
  <pubDate>Thu, 14 Dec 2023 16:33:37 +0000</pubDate>
</item>
<item>
  <title><![CDATA[split a github repository into multiple]]></title>
  <description><![CDATA[
<p>
Can do that with commit history like so -
<a href="https://www.youtube.com/watch?v=HV8hfmwDlPY&amp;ab_channel=CraigDavison">https://www.youtube.com/watch?v=HV8hfmwDlPY&amp;ab_channel=CraigDavison</a>
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-git.html">git</a> </div>]]></description>
  <category><![CDATA[git]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231125T190641--split-a-github-repository-into-multiple__git.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231125T190641--split-a-github-repository-into-multiple__git.html</guid>
  <pubDate>Thu, 14 Dec 2023 16:33:37 +0000</pubDate>
</item>
<item>
  <title><![CDATA[crontab commands]]></title>
  <description><![CDATA[
<ul class="org-ul">
<li>To view your own user's crontab: <code>crontab -l</code></li>
<li>To edit your own user's crontab: <code>crontab -e</code></li>
<li>To remove your own user's crontab: <code>crontab -r</code></li>
</ul>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-crontab.html">crontab</a> <a href="https://arvydasg.github.io/devnotes/html/tag-linux.html">linux</a> </div>]]></description>
  <category><![CDATA[crontab]]></category>
  <category><![CDATA[linux]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231125T190548--crontab-commands__crontab_linux.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231125T190548--crontab-commands__crontab_linux.html</guid>
  <pubDate>Thu, 14 Dec 2023 16:33:37 +0000</pubDate>
</item>
<item>
  <title><![CDATA[angular installation]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org50952e8">1. Installation of Angular</a></li>
<li><a href="#orgc2c5e26">2. Start ng serve</a></li>
</ul>
</div>
</nav>

<div id="outline-container-org50952e8" class="outline-2">
<h2 id="org50952e8"><span class="section-number-2">1.</span> Installation of Angular</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>Make sure you have <code>nvm</code> installed.</li>
</ul>

<p>
To install run:
</p>
<div class="org-src-container">
<pre class="src src-bash">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash
source ~/.bashrc
nvm -v.
</pre>
</div>

<p>
Over it install <code>node</code> latest version by:
</p>
<div class="org-src-container">
<pre class="src src-bash">nvm install --lts
nvm use --lts
node -v
</pre>
</div>

<p>
Make sure <code>npm</code> is installed by:
</p>
<div class="org-src-container">
<pre class="src src-bash">npm -v
</pre>
</div>

<p>
Install <code>Angular</code> by:
</p>
<div class="org-src-container">
<pre class="src src-bash">npm install -g @angular/cli
ng version
</pre>
</div>

<p>
Install project dependencies by:
</p>
<div class="org-src-container">
<pre class="src src-bash">npm install
</pre>
</div>

<p>
Start angular service while in crud folder with ng serve command (or
NODE<sub>OPTIONS</sub>="&#x2013;max<sub>old</sub><sub>space</sub><sub>size</sub>=512" ng serve) if you are low on system
resources. go to <a href="http://localhost:4200/">http://localhost:4200/</a> and you should see a list of movies.
</p>

<p>
typescript version - <code>tsc -v</code>
</p>

<ul class="org-ul">
<li>Development server</li>
</ul>

<p>
Run <code>ng serve</code> for a dev server. Navigate to `<a href="http://localhost:4200/">http://localhost:4200/</a>`.
The application will automatically reload if you change any of the
source files.
</p>
</div>
</div>

<div id="outline-container-orgc2c5e26" class="outline-2">
<h2 id="orgc2c5e26"><span class="section-number-2">2.</span> Start ng serve</h2>
<div class="outline-text-2" id="text-2">
<p>
You might close the terminal and open it again and try to use ng serve - it
might say node is not found, install it.
</p>

<p>
well that's because NVM somehow forgot which node it was using.
</p>

<p>
so we need to tell NVM once again to use node lt's:
</p>

<div class="org-src-container">
<pre class="src src-bash">nvm use --lts
</pre>
</div>

<p>
After this do node -v and npm -v - it should work once again.
</p>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-angular.html">angular</a> </div>]]></description>
  <category><![CDATA[angular]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231125T184606--angular-installation__angular.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231125T184606--angular-installation__angular.html</guid>
  <pubDate>Thu, 14 Dec 2023 16:33:37 +0000</pubDate>
</item>
</channel>
</rss>
