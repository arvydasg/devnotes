<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<title><![CDATA[arvydasg.github.io]]></title>
<description><![CDATA[arvydasg.github.io]]></description>
<link>https://arvydasg.github.io/devnotes/html</link>
<lastBuildDate>Thu, 14 Dec 2023 14:42:47 +0000</lastBuildDate>
<item>
  <title><![CDATA[enable wsl on windows]]></title>
  <description><![CDATA[
<p>
<a href="https://web02.gonzaga.edu/faculty/talarico/vlsi/wsl.html">https://web02.gonzaga.edu/faculty/talarico/vlsi/wsl.html</a>
</p>

<p>
Then you have to install an image, whether its ubuntu, nixos, alpine or
anything else.
</p>

<p>
Guide how to do that here - <a href="20231128T165324--install-linux-distro-over-wsl__windows_wsl.html">install wsl repo on windows</a>.
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-windows.html">windows</a> <a href="https://arvydasg.github.io/devnotes/html/tag-wsl.html">wsl</a> </div>]]></description>
  <category><![CDATA[windows]]></category>
  <category><![CDATA[wsl]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231214T142532--enable-wsl-on-windows__windows_wsl.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231214T142532--enable-wsl-on-windows__windows_wsl.html</guid>
  <pubDate>Thu, 14 Dec 2023 14:42:47 +0000</pubDate>
</item>
<item>
  <title><![CDATA[my dev environment]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgee9d655">1. <span class="todo TODO">TODO</span> apie my computer setup</a></li>
</ul>
</div>
</nav>

<figure id="org78bf5ea">
<img src="../media/Screenshot 2023-11-17 163344 - very quaint.png" alt="Screenshot 2023-11-17 163344 - very quaint.png" width="400px">

</figure>

<div id="outline-container-orgee9d655" class="outline-2">
<h2 id="orgee9d655"><span class="section-number-2">1.</span> <span class="todo TODO">TODO</span> apie my computer setup</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>windows</li>
<li>wsl nixos</li>
<li>etc</li>
<li><a href="20231130T065309--fetch-and-pull-changes-automatically__git_wsl.html">kokie scriptai runina automatically</a></li>
<li>kaip darau savo bloga ir pan(yep)</li>
<li>kaip takinu notes(denote)</li>
<li>kaip codinu(vscode or emacs?)</li>
</ul>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-git.html">git</a> <a href="https://arvydasg.github.io/devnotes/html/tag-scripting.html">scripting</a> <a href="https://arvydasg.github.io/devnotes/html/tag-wsl.html">wsl</a> </div>]]></description>
  <category><![CDATA[git]]></category>
  <category><![CDATA[scripting]]></category>
  <category><![CDATA[wsl]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231214T105653--my-dev-environment__git_scripting_wsl.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231214T105653--my-dev-environment__git_scripting_wsl.html</guid>
  <pubDate>Thu, 14 Dec 2023 14:42:47 +0000</pubDate>
</item>
<item>
  <title><![CDATA[setup custom domain for github pages]]></title>
  <description><![CDATA[
<p>
This video below has a good explanation - <a href="https://www.youtube.com/watch?v=rKz6kIW4Uos&amp;ab_channel=MichaelSolorio">https://www.youtube.com/watch?v=rKz6kIW4Uos&amp;ab_channel=MichaelSolorio</a>
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-git.html">git</a> <a href="https://arvydasg.github.io/devnotes/html/tag-websites.html">websites</a> </div>]]></description>
  <category><![CDATA[git]]></category>
  <category><![CDATA[websites]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231214T094426--setup-custom-domain-for-github-pages__git_websites.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231214T094426--setup-custom-domain-for-github-pages__git_websites.html</guid>
  <pubDate>Thu, 14 Dec 2023 14:42:47 +0000</pubDate>
</item>
<item>
  <title><![CDATA[authenticate to git with gpg key]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org917dd27">1. <span class="todo TODO">TODO</span> gpg key method</a></li>
</ul>
</div>
</nav>

<div id="outline-container-org917dd27" class="outline-2">
<h2 id="org917dd27"><span class="section-number-2">1.</span> <span class="todo TODO">TODO</span> gpg key method</h2>
<div class="outline-text-2" id="text-1">
<p>
Colleague gave some tutorials in work notes.
</p>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-git.html">git</a> <a href="https://arvydasg.github.io/devnotes/html/tag-gpg.html">gpg</a> </div>]]></description>
  <category><![CDATA[git]]></category>
  <category><![CDATA[gpg]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231214T061312--authenticate-to-git-with-gpg-key__git_gpg.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231214T061312--authenticate-to-git-with-gpg-key__git_gpg.html</guid>
  <pubDate>Thu, 14 Dec 2023 14:42:47 +0000</pubDate>
</item>
<item>
  <title><![CDATA[authenticate to git with personal access token]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgefb4fb9">1. Personal access token</a></li>
<li><a href="#orgc9a9b2d">2. Misc info</a></li>
</ul>
</div>
</nav>

<div id="outline-container-orgefb4fb9" class="outline-2">
<h2 id="orgefb4fb9"><span class="section-number-2">1.</span> Personal access token</h2>
<div class="outline-text-2" id="text-1">
<p>
After you have <a href="20231211T161252--introduce-yourself-to-git__git.html">introduced yourself to git</a>.
</p>

<p>
When you do a git operation(with magit or just from the terminal) you will be
prompted for password. One way is to get with a generated <code>personal access
token</code> in github developer settings.
</p>

<p>
Go generate that token, save it somewhere safe.
</p>

<p>
Then in the terminal do:
</p>

<div class="org-src-container">
<pre class="src src-bash">git config --global --replace-all credential.helper cache
git config --global credential.helper store
</pre>
</div>

<p>
Now try to push the code, enter your git username as username and enter the
token that you have generated as password.
</p>

<p>
Git will remember your credentials for future git operations.
</p>
</div>
</div>

<div id="outline-container-orgc9a9b2d" class="outline-2">
<h2 id="orgc9a9b2d"><span class="section-number-2">2.</span> Misc info</h2>
<div class="outline-text-2" id="text-2">
<p>
Changing the token - <a href="https://stackoverflow.com/questions/46645843/where-to-store-my-git-personal-access-token">Explanation here</a>.
</p>

<div class="org-src-container">
<pre class="src src-bash">git config --list (some info about you)
</pre>
</div>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-git.html">git</a> </div>]]></description>
  <category><![CDATA[git]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231214T060637--authenticate-to-git-with-personal-access-token__git.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231214T060637--authenticate-to-git-with-personal-access-token__git.html</guid>
  <pubDate>Thu, 14 Dec 2023 14:42:47 +0000</pubDate>
</item>
<item>
  <title><![CDATA[authenticate to git with ssh]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgbd7ca6e">1. <span class="todo TODO">TODO</span> ssh key method</a></li>
</ul>
</div>
</nav>

<div id="outline-container-orgbd7ca6e" class="outline-2">
<h2 id="orgbd7ca6e"><span class="section-number-2">1.</span> <span class="todo TODO">TODO</span> ssh key method</h2>
<div class="outline-text-2" id="text-1">
<p>
I have described it in work notes.
</p>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-git.html">git</a> <a href="https://arvydasg.github.io/devnotes/html/tag-ssh.html">ssh</a> </div>]]></description>
  <category><![CDATA[git]]></category>
  <category><![CDATA[ssh]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231214T060558--authenticate-to-git-with-ssh__git_ssh.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231214T060558--authenticate-to-git-with-ssh__git_ssh.html</guid>
  <pubDate>Thu, 14 Dec 2023 14:42:47 +0000</pubDate>
</item>
<item>
  <title><![CDATA[deploy a static website with github pages]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgccfbee8">1. Create the main <code>username.github.io</code> page</a></li>
<li><a href="#orgb6a86f7">2. Create <code>subpages</code> for <code>username.github.io</code></a></li>
</ul>
</div>
</nav>

<div id="outline-container-orgccfbee8" class="outline-2">
<h2 id="orgccfbee8"><span class="section-number-2">1.</span> Create the main <code>username.github.io</code> page</h2>
<div class="outline-text-2" id="text-1">
<p>
The idea is - you have lot's of html pages(or a single html page).
</p>

<p>
You add it(them) to github repo which is named
<code>&lt;yourgithubusername@github.io&gt;</code>. In my case -
<a href="https://github.com/arvydasg/arvydasg.github.io">https://github.com/arvydasg/arvydasg.github.io</a>.
</p>

<p>
Then in <code>repo settings -&gt; pages</code> you specify that you want master branch to be
deployed to github pages. After a few minutes you can go to
<code>&lt;yourgithubusername@github.io&gt;</code>. In my case it is <a href="https://arvydasg.github.io/">https://arvydasg.github.io/</a>.
Wait 5 minutes, do a hard browser refresh and you should see the page.
</p>

<p>
If I have a domain name, I can then specify it in repo settings as well. In my
case it is <code>arvydas.dev</code>. You might need to do some configuration on domain
side also to link to github. Probably <a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site">this</a> guide could help with that.
</p>
</div>
</div>

<div id="outline-container-orgb6a86f7" class="outline-2">
<h2 id="orgb6a86f7"><span class="section-number-2">2.</span> Create <code>subpages</code> for <code>username.github.io</code></h2>
<div class="outline-text-2" id="text-2">
<p>
So you have <code>&lt;yourgithubusername@github.io&gt;</code> website up and running. But you
want to deploy another page. You can do that by creating another repo(any name
now, for example a repo called <code>teddybears</code>), repo settings -&gt; pages and choose
master branch, save, save and after 5 minutes or so it will display the
contents of your teddybears repo under
<code>&lt;yourgithubusername@github.io/teddybears&gt;</code>.
</p>

<p>
I have codeacademy setup this way - <a href="https://github.com/arvydasg/codeacademy">https://github.com/arvydasg/codeacademy</a>
Also devnotes - <a href="https://arvydas.dev/devnotes/html">https://arvydas.dev/devnotes/html</a>
</p>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-git.html">git</a> <a href="https://arvydasg.github.io/devnotes/html/tag-websites.html">websites</a> </div>]]></description>
  <category><![CDATA[git]]></category>
  <category><![CDATA[websites]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231212T123552--deploy-a-static-website-with-github-pages__git_websites.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231212T123552--deploy-a-static-website-with-github-pages__git_websites.html</guid>
  <pubDate>Thu, 14 Dec 2023 14:42:47 +0000</pubDate>
</item>
<item>
  <title><![CDATA[introduce yourself to git]]></title>
  <description><![CDATA[
<p>
When on new system, you might get such message when trying to perform a
push/pull git command:
</p>

<blockquote>
<p>
Author identity unknown
</p>

<p>
Please tell me who you are.
</p>

<p>
Run
</p>

<p>
git config &#x2013;global user.email "you@example.com"
</p>

<p>
git config &#x2013;global user.name "Your Name"
</p>
</blockquote>

<p>
In my case that would be:
</p>

<div class="org-src-container">
<pre class="src src-bash">git config --global user.email "azegaspa@gmail.com"
git config --global user.name "arvydasg"
</pre>
</div>

<p>
You will get prompted for a password.
</p>

<p>
There are multiple ways to get that password:
</p>
<ul class="org-ul">
<li>write your git password manually each time</li>
<li><a href="20231214T060637--authenticate-to-git-with-personal-access-token__git.html">authenticate with personal access token</a></li>
<li><a href="20231214T060558--authenticate-to-git-with-ssh__git_ssh.html">authenticate with ssh</a></li>
<li><a href="20231214T061312--authenticate-to-git-with-gpg-key__git_gpg.html">authenticate with gpg</a></li>
</ul>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-git.html">git</a> </div>]]></description>
  <category><![CDATA[git]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231211T161252--introduce-yourself-to-git__git.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231211T161252--introduce-yourself-to-git__git.html</guid>
  <pubDate>Thu, 14 Dec 2023 14:42:47 +0000</pubDate>
</item>
<item>
  <title><![CDATA[first nixos installation]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org32840b2">1. <span class="todo TODO">TODO</span> Why NixOS</a></li>
<li><a href="#org89de734">2. Why NixOS by others</a></li>
<li><a href="#org50460d7">3. Documentation</a></li>
<li><a href="#org4eff4eb">4. Installation on WSL</a></li>
<li><a href="#orga433ac4">5. Configure the installation over emacs</a></li>
<li><a href="#org51dfc37">6. Using your own custom nixos configuration file</a></li>
<li><a href="#orgcca0804">7. Setting up git</a></li>
</ul>
</div>
</nav>

<div id="outline-container-org32840b2" class="outline-2">
<h2 id="org32840b2"><span class="section-number-2">1.</span> <span class="todo TODO">TODO</span> Why NixOS</h2>
<div class="outline-text-2" id="text-1">
<p>
AFTER you reinstall your computer - to install the DEV environment, all you
have to take with you is <code>/etc/nixos/configuration.nix</code> file, everything is
described in it. Amazing!
</p>

<p>
Avoid long reinstall &amp; config process
</p>
</div>
</div>

<div id="outline-container-org89de734" class="outline-2">
<h2 id="org89de734"><span class="section-number-2">2.</span> Why NixOS by others</h2>
<div class="outline-text-2" id="text-2">
<ul class="org-ul">
<li><a href="https://github.com/hlissner/dotfiles">https://github.com/hlissner/dotfiles</a></li>
<li><a href="https://github.com/terlar/nix-config">https://github.com/terlar/nix-config</a></li>
</ul>
</div>
</div>

<div id="outline-container-org50460d7" class="outline-2">
<h2 id="org50460d7"><span class="section-number-2">3.</span> Documentation</h2>
<div class="outline-text-2" id="text-3">
<ul class="org-ul">
<li>nixos github repo - <a href="https://github.com/nix-community/NixOS-WSL">https://github.com/nix-community/NixOS-WSL</a></li>
<li>nixos manual - <a href="https://nixos.org/manual/nix/stable/">https://nixos.org/manual/nix/stable/</a></li>
</ul>
</div>
</div>

<div id="outline-container-org4eff4eb" class="outline-2">
<h2 id="org4eff4eb"><span class="section-number-2">4.</span> Installation on WSL</h2>
<div class="outline-text-2" id="text-4">
<p>
Steps described here:
</p>

<p>
<a href="https://github.com/nix-community/NixOS-WSL">https://github.com/nix-community/NixOS-WSL</a>
</p>

<p>
But basically download nixos-wsl.tar.gz into your windows /Download folder
</p>

<p>
Then in CMD run(while in /Downloads folder):
</p>
<div class="org-src-container">
<pre class="src src-bash">wsl --import NixOS .\NixOS\ nixos-wsl.tar.gz --version 2
</pre>
</div>

<p>
check if it was really installed:
</p>
<div class="org-src-container">
<pre class="src src-bash">wsl -l -v
</pre>
</div>

<p>
You should see NixOS listed. Now we can run nixos:
</p>
<div class="org-src-container">
<pre class="src src-bash">wsl -d NixOS
</pre>
</div>

<p>
After the initial installation, you need to update your channels once, to be
able to use <code>nixos-rebuild</code>:
</p>
<div class="org-src-container">
<pre class="src src-bash">sudo nix-channel --add https://nixos.org/channels/nixos-23.11 nixos
sudo nix-channel --update
</pre>
</div>
</div>
</div>

<div id="outline-container-orga433ac4" class="outline-2">
<h2 id="orga433ac4"><span class="section-number-2">5.</span> Configure the installation over emacs</h2>
<div class="outline-text-2" id="text-5">
<p>
Enter nix-shell to use emacs(it does not get installed on the system, just
<a href="https://nix.dev/tutorials/first-steps/ad-hoc-shell-environments">TEMPORARILY</a> FROM NIXOS CACHE?). So I can then modify the
<code>/etc/nixos/configuration.nix</code> file.
</p>
<div class="org-src-container">
<pre class="src src-bash">nix-shell -p emacs29
</pre>
</div>

<p>
Then let's run emacs in nix-shell(run with sudo)
</p>
<div class="org-src-container">
<pre class="src src-bash">sudo emacs
</pre>
</div>

<p>
Ok now you are in emacs, but in nix-shell. If we turn off nixos now, when we
launch it again, emacs will not be available. Only after you run <code>nix-shell -p
emacs</code>. Let's install emacs permanetely:
</p>
<div class="org-src-container">
<pre class="src src-bash">sudo emacs /etc/nixos/configuration.nix
</pre>
</div>

<p>
add these lines:
</p>
<div class="org-src-container">
<pre class="src src-nix">environment.systemPackages = with pkgs; [
  emacs29
  git
];
</pre>
</div>

<p>
we Install emacs29 because of <a href="20231125T220943--seq-keep-error-message-in-emacs__emacs_magit.html">seq error message</a>.
</p>

<p>
after you do that, <code>C-d</code> to go back to nixos@nixos(out of nix-shell) and BUILD
the nixos with the new changes(emacs installation).
</p>
<div class="org-src-container">
<pre class="src src-bash">sudo nixos-rebuild switch
</pre>
</div>

<p>
After this runs, you should be able to use Emacs and use git!
</p>

<p>
Clone the dotfiles repo:
</p>
<div class="org-src-container">
<pre class="src src-bash">mkdir ~/GIT
cd ~/GIT
git clone https://github.com/arvydasg/dotfiles
ln -s GIT/dotfiles/.emacs.d/ ~/.emacs.d
cd ~/.emacs.d
git update-index --assume-unchanged init.el
</pre>
</div>

<p>
Try to launch emacs for all the packages to be installed.
</p>
</div>
</div>

<div id="outline-container-org51dfc37" class="outline-2">
<h2 id="org51dfc37"><span class="section-number-2">6.</span> Using your own custom nixos configuration file</h2>
<div class="outline-text-2" id="text-6">
<p>
It suchs to not be able to edit the <code>/etc/nixos/configuration.nix</code> file over
emacs as nixos default user. I want this file to not be owned by root, but bu
nixos user. So what we will do is we will:
</p>

<div class="org-src-container">
<pre class="src src-bash"># delete current nixos directory
sudo rm -rf /etc/nixos
# put our config folder instead of the default one
sudo ln -s ~/GIT/dotfiles/nixos/ /etc/nixos
</pre>
</div>

<p>
You are done. Should be able to edit <code>configuration.nix</code> file now.
</p>
</div>
</div>

<div id="outline-container-orgcca0804" class="outline-2">
<h2 id="orgcca0804"><span class="section-number-2">7.</span> Setting up git</h2>
<div class="outline-text-2" id="text-7">
<p>
First try <a href="20231211T161252--introduce-yourself-to-git__git.html">this</a>, then one of these:
</p>

<ul class="org-ul">
<li><a href="20231214T060637--authenticate-to-git-with-personal-access-token__git.html">authenticate with personal access token</a></li>
<li><a href="20231214T060558--authenticate-to-git-with-ssh__git_ssh.html">authenticate with ssh</a></li>
<li><a href="20231214T061312--authenticate-to-git-with-gpg-key__git_gpg.html">authenticate with gpg</a></li>
</ul>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-nixos.html">nixos</a> </div>]]></description>
  <category><![CDATA[nixos]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231211T151427--first-nixos-installation__nixos.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231211T151427--first-nixos-installation__nixos.html</guid>
  <pubDate>Thu, 14 Dec 2023 14:42:47 +0000</pubDate>
</item>
<item>
  <title><![CDATA[fetch and pull changes automatically]]></title>
  <description><![CDATA[
<p>
This is mainly important when you are working ont he same repo on two different
machines. You make changes on one, then login to another one - you must always
rememebr to pull those changes, otherwise if you make your own - you will get
into merge conflicst. And as of <span class="timestamp-wrapper"><span class="timestamp">[2023-12-14 Thu] </span></span> I am not so good at solving
those. So I try to avoid them as much as possible.
</p>

<p>
This is the reason I am creating this script that will automatically run <code>git
fetch &amp;&amp; git pull</code> that command for me whenever I turn on the WSL.
</p>

<p>
The script example:
</p>

<div class="org-src-container">
<pre class="src src-bash">#!/bin/bash
REPO_DIR="$HOME/GIT/notes/"

function auto-fetch-pull() {
    if [ -d "$1" ]; then
        cd "$1" || exit
        echo "Fetching latest changes..."
        git fetch
        echo "Pulling changes into your branch..."
        git pull
    else
        echo "Directory '$1' not found."
    fi
}

auto-fetch-pull "$REPO_DIR"
</pre>
</div>

<p>
Ensure the script has execute permissions:
</p>
<div class="org-src-container">
<pre class="src src-bash">chmod +x auto_fetch_pull.sh
</pre>
</div>

<p>
Then, try running the script:
</p>
<div class="org-src-container">
<pre class="src src-bash">./auto_fetch_pull.sh
</pre>
</div>

<p>
Add the script execution to your .bashrc
</p>
<div class="org-src-container">
<pre class="src src-bash">echo '~/.emacs.d/MISC/auto_fetch_pull.sh' &gt;&gt; ~/.bashrc
</pre>
</div>

<p>
Each time WSL (or any other linux distribution launches) launches, one of the
thing it does that concern us in this case, is it runs <code>source .bashrc</code>.
Basically evaluates and applies everything that it sees in <code>.bashrc</code> file. And
since we have conveniently placed our script into .bashrc with the last
command - it will run the script each time WSL is launched.
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-git.html">git</a> <a href="https://arvydasg.github.io/devnotes/html/tag-wsl.html">wsl</a> </div>]]></description>
  <category><![CDATA[git]]></category>
  <category><![CDATA[wsl]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231130T065309--fetch-and-pull-changes-automatically__git_wsl.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231130T065309--fetch-and-pull-changes-automatically__git_wsl.html</guid>
  <pubDate>Thu, 14 Dec 2023 14:42:47 +0000</pubDate>
</item>
<item>
  <title><![CDATA[dockerfile example of emacs installation]]></title>
  <description><![CDATA[
<p>
PERFECT DOCS/REFERECE -
<a href="https://kapeli.com/cheat_sheets/Dockerfile.docset/Contents/Resources/Documents/index">https://kapeli.com/cheat_sheets/Dockerfile.docset/Contents/Resources/Documents/index</a>
</p>

<p>
Dockerfile best practices -
<a href="https://docs.docker.com/develop/develop-images/dockerfile_best-practices/">https://docs.docker.com/develop/develop-images/dockerfile_best-practices/</a>
</p>

<p>
Dockerfile example used to generate emacs image:
</p>

<div class="org-src-container">
<pre class="src src-bash"># The emacs installation phase itself takes aroun 7 minutes to complete
# for the first time after we change something in the initial or second
# stage - everything under them will have to be rerun... meaning another
# 7 minutes of your life. Not cool.

# so what I found is that you can split the Dockerfile into stages. I
# will put the steps that might change frequently towards the end of
# the Dockerfile to maximize caching. By separating the stages in this
# manner, Docker will reuse the intermediate images created in each
# stage, utilizing the cache for the unchanged layers. When changes
# occur, only the steps AFTER THE MODIFICATION will be re-executed.

# -----------------------------------------------------------
# INITIAL STAGE: Installing essential packages and tools
FROM ubuntu:latest AS base

RUN apt update &amp;&amp; apt upgrade -y \
    &amp;&amp; apt install sudo make wget -y

# -----------------------------------------------------------
# SECOND STAGE: Installing Git and cloning the repository
FROM base AS gitclone

RUN apt-get install -y git \
    &amp;&amp; git clone https://github.com/arvydasg/dotfiles.git /root/dotfiles

# -----------------------------------------------------------
# THIRD STAGE: Emacs installation
FROM gitclone AS emacs

WORKDIR /root
COPY compile-install-emacs.sh compile-install-emacs.sh
RUN chmod +x compile-install-emacs.sh
RUN sh compile-install-emacs.sh

# -----------------------------------------------------------
# FOURTH STAGE: Random stuff
# since emacs has been installed(heaviest process), we can do any
# random installs and actions here now, so only the steps under would
# be rerun and not the whole container including the emacs compilation
# stage(Third stage)
RUN apt install vim htop tmux -y

# -----------------------------------------------------------
# FINAL STAGE
FROM emacs AS final

ENTRYPOINT ["emacs"]
</pre>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-docker.html">docker</a> <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> </div>]]></description>
  <category><![CDATA[docker]]></category>
  <category><![CDATA[emacs]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231128T175614--dockerfile-example-of-emacs-installation__docker_emacs.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231128T175614--dockerfile-example-of-emacs-installation__docker_emacs.html</guid>
  <pubDate>Thu, 14 Dec 2023 14:42:47 +0000</pubDate>
</item>
<item>
  <title><![CDATA[docker commands]]></title>
  <description><![CDATA[
<div class="org-src-container">
<pre class="src src-bash"># --------------------------------------------------------------------
# STATS
# active and running containers
docker ps
# previously ran images, you can start them and connect to them again
docker ps -a
# docker stats
docker stats
# list docker images available
docker images

# --------------------------------------------------------------------
# BUILD/RUN
# build an image with Dockerfile in the current dir
docker build .

# run the docker image
docker run &lt;image_id/name&gt;

# Run the container with --rm flag to automatically remove the container
# that was created when the container EXITS. Good for testing.
docker run --rm b3e0903d079d

# something
docker run -rm -it b3e0903d079d /bin/bash

# --------------------------------------------------------------------
# CONNECT TO THE DOCKER
# run in interactive mode, connect to it
docker run -ti ubuntu /bin/bash
docker run -ti ubuntu /bin/bash -c "apt update &amp;&amp; apt upgrade -y"

# run in interactive mode, connect to it, will be deleted after
# disconnect
docker run -ti --rm ubuntu /bin/bash

# attach to already created container!!!!
docker attach &lt;id&gt;

# --------------------------------------------------------------------
# CLEANUP

# remove docker containers from ps -a
docker rm -f &lt;id&gt;
# remove docker image
docker rmi &lt;image_name&gt;
# delete or remove all docker data like containers, images and volumes
# delete all containers
docker rm --force `docker ps -qa`
# delte all images
docker rmi --force `docker images -aq`
# idk prune smth
docker volume prune

# --------------------------------------------------------------------
# SAVE

# save an image of container. A commit is only necessary after each
# run if you want to make a snapshot there for future use, otherwise
# the container itself will stick around for you to keep using.
docker commit &lt;id&gt; new_name
</pre>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-docker.html">docker</a> </div>]]></description>
  <category><![CDATA[docker]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231128T172943--docker-commands__docker.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231128T172943--docker-commands__docker.html</guid>
  <pubDate>Thu, 14 Dec 2023 14:42:47 +0000</pubDate>
</item>
<item>
  <title><![CDATA[wsl commands]]></title>
  <description><![CDATA[
<p>
<a href="https://learn.microsoft.com/en-us/windows/wsl/basic-commands">https://learn.microsoft.com/en-us/windows/wsl/basic-commands</a>
</p>

<div class="org-src-container">
<pre class="src src-bash"># list available linux distros
wsl --list --online
# install a default distro(which is ubuntu)
wsl --install
# View the list of distros and their current state:
wsl.exe -l -v
# Shutdown everything:
wsl.exe --shutdown
# Terminate a specific distro:
wsl.exe -t &lt;DistroName&gt;
# Boot up the default distro (marked with *):
wsl.exe
# Boot up a specific distro:
wsl.exe -d &lt;DistroName&gt;
# update wsl
wsl --update
# check wsl status
wsl --status
# check wsl version
wsl --version
# wsl help
wsl --help
</pre>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-wsl.html">wsl</a> </div>]]></description>
  <category><![CDATA[wsl]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231128T172125--wsl-commands__wsl.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231128T172125--wsl-commands__wsl.html</guid>
  <pubDate>Thu, 14 Dec 2023 14:42:47 +0000</pubDate>
</item>
<item>
  <title><![CDATA[install linux distro over wsl]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgd6f94ad">1. Installation instructions</a></li>
<li><a href="#org42ef1eb">2. Setup terminal</a></li>
</ul>
</div>
</nav>
<p>
Ok so at <span class="timestamp-wrapper"><span class="timestamp">&lt;2023-11-26 Sun&gt; </span></span> I was very much getting to know to wsl and how to
install it properly.
</p>

<p>
First reason - I finally decided to use emacs more so I could use denote TODO -
add a link. For that of course I did not want to override my already custom
emacs config and notes file structure, wanted to create a NEW WSL UBUNTU
instance where I could experiment.
</p>

<p>
Second reason - I was <a href="20231128T164359--wsl-glitches-in-gui-applications__wsl.html">getting gliches in my wsl</a>.
</p>

<p>
So while I was trying to solve the first thing, I found out about the second
thing and that led me to all this documentation below.
</p>

<div id="outline-container-orgd6f94ad" class="outline-2">
<h2 id="orgd6f94ad"><span class="section-number-2">1.</span> Installation instructions</h2>
<div class="outline-text-2" id="text-1">
<p>
After you have <a href="20231214T142532--enable-wsl-on-windows__windows_wsl.html">enabled wsl on windows</a>, you can do these steps:
</p>

<p>
in cmd/powershell run:
</p>

<div class="org-src-container">
<pre class="src src-shell"># see all repos available
wsl --list
# install the default repo(or any other)
wsl --install ubuntu
# install a custom repo version(can have multiple different versions installed)
wsl --install -d Ubuntu-20.04
</pre>
</div>

<p>
After your distro is installed, login to it:
</p>

<div class="org-src-container">
<pre class="src src-bash"># View the list of distros and their current state:
wsl.exe -l -v
 # Boot up a specific distro:
wsl.exe -d &lt;DistroName&gt;
</pre>
</div>

<p>
And confirm the version number:
</p>
<div class="org-src-container">
<pre class="src src-bash">lsb_release -a
</pre>
</div>

<p>
Now check "add remove programs" if your wsl instance is listed there.
</p>
</div>
</div>

<div id="outline-container-org42ef1eb" class="outline-2">
<h2 id="org42ef1eb"><span class="section-number-2">2.</span> Setup terminal</h2>
<div class="outline-text-2" id="text-2">
<p>
Setup terminal to be ubuntu. So when you open cmd you would also see
the ubuntu terminal.
</p>

<p>
After the installation ubuntu wsl make ubuntu profile in cmd -&gt; settings -&gt;
profiles - &gt; new profile -&gt; duplicate ubuntu profile
</p>

<p>
to install emacs now, follow - TODO
</p>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-windows.html">windows</a> <a href="https://arvydasg.github.io/devnotes/html/tag-wsl.html">wsl</a> </div>]]></description>
  <category><![CDATA[windows]]></category>
  <category><![CDATA[wsl]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231128T165324--install-linux-distro-over-wsl__windows_wsl.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231128T165324--install-linux-distro-over-wsl__windows_wsl.html</guid>
  <pubDate>Thu, 14 Dec 2023 14:42:47 +0000</pubDate>
</item>
<item>
  <title><![CDATA[wsl glitches in gui applications]]></title>
  <description><![CDATA[
<p>
Registered a bug in WSLg - <a href="https://github.com/microsoft/wslg/issues/1148">https://github.com/microsoft/wslg/issues/1148</a>
</p>

<p>
Some more notes below here. From when I was debugging this issue.
</p>

<hr>

<p>
Or here with gui - <a href="https://web02.gonzaga.edu/faculty/talarico/vlsi/wsl.html">https://web02.gonzaga.edu/faculty/talarico/vlsi/wsl.html</a>
</p>

<p>
po visu situ zingsniu install wsl 2 kernel thing from here - <a href="https://learn.microsoft.com/en-us/windows/wsl/install-manual#step-4---download-the-linux-kernel-update-package">https://learn.microsoft.com/en-us/windows/wsl/install-manual#step-4---download-the-linux-kernel-update-package</a>
</p>

<p>
first do the wsl kernel update only then isntall wsl , since we have installed wsl 2 - needed for gui apps
</p>

<p>
wsl &#x2013;update
wsl &#x2013;shutdown
wsl &#x2013;install
wsl.exe &#x2013;list &#x2013;online to choose a distro
</p>

<p>
Linux GUI apps are only supported with WSL 2 and will not work with a Linux
distribution configured for WSL 1. Read about how to change your distribution
from WSL 1 to WSL 2.
</p>

<p>
sudo apt-get update &amp;&amp; sudo apt-get upgrade -y
</p>

<p>
<a href="https://learn.microsoft.com/en-us/windows/wsl/install-manual#step-4---download-the-linux-kernel-update-package">https://learn.microsoft.com/en-us/windows/wsl/install-manual#step-4---download-the-linux-kernel-update-package</a>
<a href="https://web02.gonzaga.edu/faculty/talarico/vlsi/wsl.html">https://web02.gonzaga.edu/faculty/talarico/vlsi/wsl.html</a>
<a href="https://learn.microsoft.com/en-us/windows/wsl/install-manual#step-4---download-the-linux-kernel-update-package">https://learn.microsoft.com/en-us/windows/wsl/install-manual#step-4---download-the-linux-kernel-update-package</a>
<a href="https://learn.microsoft.com/en-us/windows/wsl/tutorials/gui-apps">https://learn.microsoft.com/en-us/windows/wsl/tutorials/gui-apps</a>
<a href="https://superuser.com/questions/1126721/rebooting-ubuntu-on-windows-without-rebooting-windows">https://superuser.com/questions/1126721/rebooting-ubuntu-on-windows-without-rebooting-windows</a>
<a href="https://emacsredux.com/blog/2021/12/19/using-emacs-on-windows-11-with-wsl2/">https://emacsredux.com/blog/2021/12/19/using-emacs-on-windows-11-with-wsl2/</a>
</p>

<p>
research wslg:
</p>

<p>
<a href="https://www.reddit.com/r/bashonubuntuonwindows/comments/wezwhi/bug_with_gui_apps/">https://www.reddit.com/r/bashonubuntuonwindows/comments/wezwhi/bug_with_gui_apps/</a>
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-wsl.html">wsl</a> </div>]]></description>
  <category><![CDATA[wsl]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231128T164359--wsl-glitches-in-gui-applications__wsl.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231128T164359--wsl-glitches-in-gui-applications__wsl.html</guid>
  <pubDate>Thu, 14 Dec 2023 14:42:47 +0000</pubDate>
</item>
<item>
  <title><![CDATA[create a blog with hugo]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org560eaf5">1. commands</a></li>
</ul>
</div>
</nav>
<p>
get started video - <a href="https://www.youtube.com/watch?v=LIFvgrRxdt4&amp;ab_channel=RyanSchachte">https://www.youtube.com/watch?v=LIFvgrRxdt4&amp;ab_channel=RyanSchachte</a>
</p>

<p>
second video - <a href="https://www.youtube.com/watch?v=hjD9jTi_DQ4&amp;t=2225s&amp;ab_channel=EnvatoTuts%2B">https://www.youtube.com/watch?v=hjD9jTi_DQ4&amp;t=2225s&amp;ab_channel=EnvatoTuts%2B</a>
</p>

<div id="outline-container-org560eaf5" class="outline-2">
<h2 id="org560eaf5"><span class="section-number-2">1.</span> commands</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>hugo new site nameofthesite</li>
<li>cd themes git clone theme</li>
<li>change config.toml to config.yml</li>
<li>hugo server - works</li>
<li>hugo new posts/firstpost.md</li>
<li>git submodule add -b master <a href="https://github.com/arvydasg/arvydasg.github.io.git">https://github.com/arvydasg/arvydasg.github.io.git</a>
public (public where file will be stored)</li>
<li>hugo -t hugo-PaperMod</li>
<li>cd public</li>
<li>git remote -v (origin is not what you expected ;) its arvydas.github.io</li>
<li>push public folder and site is live!</li>
</ul>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-hugo.html">hugo</a> <a href="https://arvydasg.github.io/devnotes/html/tag-websites.html">websites</a> </div>]]></description>
  <category><![CDATA[hugo]]></category>
  <category><![CDATA[websites]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231128T133020--create-a-blog-with-hugo__hugo_websites.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231128T133020--create-a-blog-with-hugo__hugo_websites.html</guid>
  <pubDate>Thu, 14 Dec 2023 14:42:47 +0000</pubDate>
</item>
<item>
  <title><![CDATA[windows keybindings]]></title>
  <description><![CDATA[
<p>
Lots of shortcuts already in my head, but some that are new are:
</p>

<ul class="org-ul">
<li>win + ctrl + t - always on top window</li>
<li>alt + space - look for programs</li>
<li>win + shift + / - ALL SHORTCUTS</li>
<li>win+shift+T - TEXT EXTRACTOR WTF??!!</li>
</ul>

<p>
Install <code>powertoys</code> app in windows for rebinding various keys, especially caps
-&gt; ctrl
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-windows.html">windows</a> </div>]]></description>
  <category><![CDATA[windows]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231128T132920--windows-keybindings__windows.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231128T132920--windows-keybindings__windows.html</guid>
  <pubDate>Thu, 14 Dec 2023 14:42:47 +0000</pubDate>
</item>
<item>
  <title><![CDATA[install docker on windows]]></title>
  <description><![CDATA[
<p>
Come here - <a href="https://docs.docker.com/desktop/install/windows-install/">https://docs.docker.com/desktop/install/windows-install/</a>
download the file, install it
</p>

<p>
wsl has to be enabled I guess also on your windows machine
</p>

<p>
after it's installed - run it. Login. Should be able to see your docker images
from your dockerhub.
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-docker.html">docker</a> <a href="https://arvydasg.github.io/devnotes/html/tag-windows.html">windows</a> </div>]]></description>
  <category><![CDATA[docker]]></category>
  <category><![CDATA[windows]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231128T131429--install-docker-on-windows__docker_windows.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231128T131429--install-docker-on-windows__docker_windows.html</guid>
  <pubDate>Thu, 14 Dec 2023 14:42:47 +0000</pubDate>
</item>
<item>
  <title><![CDATA[printing with cups in ubuntu]]></title>
  <description><![CDATA[
<p>
video explaining - <a href="https://www.youtube.com/watch?v=En2DJAMpwmY">https://www.youtube.com/watch?v=En2DJAMpwmY</a>
</p>

<ul class="org-ul">
<li>sudo apt install cups</li>
<li>sudo systemctl enable cups</li>
<li>sudo systemctl start cups</li>
<li>sudo systemctl status cups</li>
<li>download drivers from <a href="https://support.hp.com/lt-en/drivers/selfservice/samsung-xpress-sl-m2022-laser-printer-series/17157279/model/17157283">here</a></li>
<li>sudo tar -xvzf udl bla folderi ta draiverio</li>
<li>sudo ./install.sh</li>
<li>login to cups service - <a href="http://localhost:631/">http://localhost:631/</a></li>
<li>add printer, pasirenki samsung m2020 series</li>
<li>draiveriai turetu automatiskai buti parinkti teisingi samsung m2020
series (en)</li>
<li>add printer</li>
<li>spausdink i sveikata</li>
</ul>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-linux.html">linux</a> </div>]]></description>
  <category><![CDATA[linux]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231128T130210--printing-with-cups-in-ubuntu__linux.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231128T130210--printing-with-cups-in-ubuntu__linux.html</guid>
  <pubDate>Thu, 14 Dec 2023 14:42:47 +0000</pubDate>
</item>
<item>
  <title><![CDATA[manjaro installation]]></title>
  <description><![CDATA[
<p>
First of all - choose non free drivers, cuz of nividia drivers that I have.
hope it will solve the problem with the dwm and random screen freezes + tags
not working&#x2026;
</p>

<p>
IMMEADITELY AFTER INSTALL
</p>

<p>
htop check - 650M/7.60G 73tasks 143thr
sensors check 54
</p>

<p>
firewall - on
</p>

<p>
go to updates - update everything that is there (matcha gtk theme this time.. ikd)
</p>

<p>
3 dots in the same window -&gt; preferences
</p>

<p>
official repositories -&gt; refresh mirrors list (3-10mins)
</p>

<p>
AUR -&gt; enable aur support, keep build packages in cache, check for updates
</p>

<p>
manjaro settings manager -&gt; hardware configuration to see the drivers. graphic drivers preferably shoul be alright. google idk.. this time wont do anything.
</p>


<p>
INSTALLING TIMESHIFT
</p>

<p>
install timeshift through the package downloader gui
go through the wizard, make sure to set the location of the timeshifts to the home folder
</p>

<p>
maybe set daily 1?
</p>

<p>
root - include all fles
home - include hidden files only
</p>

<p>
make one timeshift copy BEFORE installing all the other apps and changes.
</p>

<p>
INSTALLING PACKAGES
</p>

<p>
sudo pacman -Syu -&#x2014;  System Update
</p>

<p>
install anki throught the shop - terminal version is too big lol.
sudo pacman -S vim
sudo pacman -S brave
</p>

<p>
get DWM, follow this tutorial -
 <a href="https://www.youtube.com/watch?v=dP8OKP-r1tw">https://www.youtube.com/watch?v=dP8OKP-r1tw</a>
</p>

<p>
getting it
sudo pacman -S git base-devel
git clone <a href="https://git.suckless.org/dwm">https://git.suckless.org/dwm</a>
git clone <a href="https://git.suckless.org/st">https://git.suckless.org/st</a>
sudo pacman -S dmenu
</p>

<p>
installing/making it
cd dwm
sudo make clean install
cd st
sudo make clean install
</p>

<p>
now dmenu is installed, st and dwm as well.
now you might think you just log out and it is there, but the computer doest know it has it
it doesnt know how to run it.
</p>

<p>
try typing dwm - you see it says another is running
</p>

<p>
cd /usr/share/xsessions
</p>

<p>
sudo vim DWM.desktop
</p>

<p>
paste this in:
</p>

<p>
[Desktop Entry]
Encoding=UTF-8
Name=DWM
Comment=Dynamic Window Manager
Exec=/usr/local/bin/dwm
Icon=
Type=Application
</p>


<p>
logout, check the bottom right corner - choose dwm.
</p>


<p>
make one more timeshift now.
Installed - vim, dwm, st, git, anki, brave
</p>



<p>
##################### CUZTOMIZING ########################
</p>

<p>
vim plugins
brave vimium
st terminal (line, font, colors)
</p>

<p>
install image viewer (through the shop, smalles one possible)
</p>


<p>
print dwm commands
print vim commands
print linux commands
print vimium commands
</p>


<p>
##################### PRINTING  ########################
</p>


<p>
install cups for printing. (through the shop)
run ./install.sh from the drivers, hopefully also on github.
<a href="https://wiki.manjaro.org/index.php/Printing">https://wiki.manjaro.org/index.php/Printing</a>
follow first steps from that tutorial or just do:
pamac install manjaro-printer (chose nothing)
sudo gpasswd -a aze sys
sudo systemctl enable &#x2013;now cups.service
and go to cups and do a test page
it works!!
</p>

<p>
try write in terminal:
lp filename or
lpr filename
</p>

<p>
see if prints. if doest, then do this command
lpstat -p -d
if says there is no destination set, do this:
Your printer should have a name of some sort &#x2013; say, InkJet or something similar &#x2013; defined in CUPS. In CUPS (<a href="http://localhost:631">http://localhost:631</a>), click on Printers, then click on the name of the printer. Then click on Administration and finally, click on Set as Server Default. Exit CUPS.
</p>

<p>
restart computer, do this command again, should be fine.
</p>

<p>
fuck I made it work. now write lp filename and it prints!!! wow man. :)
</p>



<p>
##################### WIFI  ########################
</p>

<p>
type nmtui
and choose connection
</p>



<p>
################### DWM bg image ###################
</p>

<p>
first lets create a patch for dwm that on every autostart will look for an image and set it up, later we will use the same autostart patch to make the status bar thingy.
</p>

<p>
go to dwm folder, make this file:
dwm-autostart-20161205-bb3bd6f.diff
</p>

<p>
go to this link
<a href="https://dwm.suckless.org/patches/autostart/">https://dwm.suckless.org/patches/autostart/</a>
then copy the patch code of the first file, named same like you just created and paste the contents into your file.
good.
</p>

<p>
now in dwm folder do sudo make clean uninstall
then patch &#x2013;merge -i dwm-autostar and tab to finish
enter
</p>

<p>
will write that it has been installed.
then we make sudo make clean install again.
</p>

<p>
now lets make a .dwm folder, in which dwm will look for autostart.sh file every time it is booted.
</p>

<p>
mkdir .dwm
vim autostart.sh
write
#! /bin/bash
</p>

<p>
feh &#x2013;bg-scale ~/pics/sunsetdunes.jpg
:wq
sudo chmod +x autostart.sh
./autostart.sh
and the background should be set.
change the image to see the effect and the script working. so cool dude first bash script.
</p>


<p>
################### DWM admin bar ###################
</p>

<p>
<a href="https://www.youtube.com/watch?v=gz0rd7_8tf0">https://www.youtube.com/watch?v=gz0rd7_8tf0</a>
this video.
</p>

<p>
sudo pacman -S xorg
xsetroot -name "hello" - puts hello into the bar.
</p>

<p>
go to .dwm
vim autostart.sh
then add
while true; do
        xsetroot -name "$(date)
        sleep 1s
done
</p>

<p>
set up aliases for terminal cd .. some cool things, just like the hobyist
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-linux.html">linux</a> </div>]]></description>
  <category><![CDATA[linux]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231128T130148--manjaro-installation__linux.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231128T130148--manjaro-installation__linux.html</guid>
  <pubDate>Thu, 14 Dec 2023 14:42:47 +0000</pubDate>
</item>
<item>
  <title><![CDATA[alpine installation]]></title>
  <description><![CDATA[
<p>
Decided to install alpine(again) and see what it's all about. Started with <a href="https://www.youtube.com/watch?v=E7zJTzf0pWA&amp;ab_channel=ProgrammerGuide">this</a>
tutorial.
</p>

<p>
INSTALLATION GUIDE
</p>

<ul class="org-ul">
<li>install virtual machine with 1gb and 10gb</li>
<li>ping google.com for internet connection</li>
<li>apk add sudo (might not need this, just enable community first)</li>
<li>sudo apk add htop</li>
<li>vi /etc/apk/repositories - enable community one</li>
<li>apk update</li>
<li>sudo apk add emacs</li>
</ul>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-alpine.html">alpine</a> <a href="https://arvydasg.github.io/devnotes/html/tag-linux.html">linux</a> </div>]]></description>
  <category><![CDATA[alpine]]></category>
  <category><![CDATA[linux]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231128T130129--alpine-installation__alpine_linux.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231128T130129--alpine-installation__alpine_linux.html</guid>
  <pubDate>Thu, 14 Dec 2023 14:42:47 +0000</pubDate>
</item>
<item>
  <title><![CDATA[how to run a flask app]]></title>
  <description><![CDATA[
<p>
If you have someting like this in <code>app.py</code>:
</p>
<div class="org-src-container">
<pre class="src src-python">if __name__ == "__main__":
    with app.app_context():
        db.create_all()
    app.run(host="0.0.0.0", debug=True)
</pre>
</div>

<p>
Run the app with:
</p>
<div class="org-src-container">
<pre class="src src-python">python3 app.py
</pre>
</div>

<p>
The app should run.
</p>

<p>
NOTe: If you try to run with <code>flask run</code> - changes might not automatically
refresh in the browser. You might have to restart the server each time you make
a change.
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-flask.html">flask</a> <a href="https://arvydasg.github.io/devnotes/html/tag-python.html">python</a> </div>]]></description>
  <category><![CDATA[flask]]></category>
  <category><![CDATA[python]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231126T014659--how-to-run-a-flask-app__flask_python.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231126T014659--how-to-run-a-flask-app__flask_python.html</guid>
  <pubDate>Thu, 14 Dec 2023 14:42:47 +0000</pubDate>
</item>
<item>
  <title><![CDATA[run sql from emacs]]></title>
  <description><![CDATA[
<p>
If on Ubuntu:
</p>

<div class="org-src-container">
<pre class="src src-bash">sudo apt-get install sqlite3
</pre>
</div>

<ul class="org-ul">
<li>have an sqlite db ready(possibly from django)</li>
<li>create an org file and follow <a href="https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-sqlite.html">these instructions</a> to connect to the db</li>
<li>I also have this in my emacs config</li>
</ul>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(org-babel-do-load-languages
 'org-babel-load-languages (quote ((emacs-lisp . t)
                                   (sqlite . t)
                                   (R . t)
                                   (python . t))))
</pre>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> <a href="https://arvydasg.github.io/devnotes/html/tag-sql.html">sql</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[sql]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231126T005538--run-sql-from-emacs__emacs_sql.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231126T005538--run-sql-from-emacs__emacs_sql.html</guid>
  <pubDate>Thu, 14 Dec 2023 14:42:47 +0000</pubDate>
</item>
<item>
  <title><![CDATA[emacs init time]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org6eb6f12">1. emacs init time</a></li>
<li><a href="#orgeb26a44">2. use-package-report</a></li>
<li><a href="#org9a55d8c">3. Show startup time on emacs-load</a></li>
<li><a href="#orgd126d84">4. Message</a></li>
<li><a href="#orga621b2c">5. <span class="todo TODO">TODO</span> now these message are not needed anymore, since I compile emacs at each config change</a></li>
</ul>
</div>
</nav>

<div id="outline-container-org6eb6f12" class="outline-2">
<h2 id="org6eb6f12"><span class="section-number-2">1.</span> emacs init time</h2>
<div class="outline-text-2" id="text-1">
<p>
<a href="https://www.youtube.com/watch?v=9i_9hse_Y08&amp;t=492s">How to Cut Emacs Start Up Time in Half! - Emacs From Scratch #12</a>
</p>
</div>
</div>

<div id="outline-container-orgeb26a44" class="outline-2">
<h2 id="orgeb26a44"><span class="section-number-2">2.</span> use-package-report</h2>
<div class="outline-text-2" id="text-2">
<p>
<span class="timestamp-wrapper"><span class="timestamp">[2022-04-10 Sun] </span></span> allows to invoke and use use-package-report
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(setq use-package-compute-statistics t)
</pre>
</div>
</div>
</div>

<div id="outline-container-org9a55d8c" class="outline-2">
<h2 id="org9a55d8c"><span class="section-number-2">3.</span> Show startup time on emacs-load</h2>
<div class="outline-text-2" id="text-3">
<div class="org-src-container">
<pre class="src src-emacs-lisp">(defun efs/display-startup-time ()
  (message "Emacs loaded in %s with %d garbage collections."
           (format "%.2f seconds"
                   (float-time
                    (time-subtract after-init-time before-init-time)))
           gcs-done))

(add-hook 'emacs-startup-hook #'efs/display-startup-time)
</pre>
</div>
</div>
</div>

<div id="outline-container-orgd126d84" class="outline-2">
<h2 id="orgd126d84"><span class="section-number-2">4.</span> Message</h2>
<div class="outline-text-2" id="text-4">
<p>
Add such message in the package and then look at <b>messages</b> buffer on startup
to find which one has failed.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">:config
(message "Org-roam got loaded!")
</pre>
</div>
</div>
</div>

<div id="outline-container-orga621b2c" class="outline-2">
<h2 id="orga621b2c"><span class="section-number-2">5.</span> <span class="todo TODO">TODO</span> now these message are not needed anymore, since I compile emacs at each config change</h2>
<div class="outline-text-2" id="text-5">
<p>
link to a post where I describe that
</p>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231126T003911--emacs-init-time__emacs.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231126T003911--emacs-init-time__emacs.html</guid>
  <pubDate>Thu, 14 Dec 2023 14:42:47 +0000</pubDate>
</item>
<item>
  <title><![CDATA[images in org files]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgee8362b">1. Display images in org files</a></li>
<li><a href="#orged4ea1d">2. If you have the image with you</a></li>
<li><a href="#org866ca28">3. If you don't have an image and want to insert a screenshot</a></li>
<li><a href="#org55721ca">4. Resizing images in emacs and html</a></li>
</ul>
</div>
</nav>

<figure id="org00e1483">
<img src="../media/water.jpg" alt="water.jpg" width="800px">

</figure>

<div id="outline-container-orgee8362b" class="outline-2">
<h2 id="orgee8362b"><span class="section-number-2">1.</span> Display images in org files</h2>
<div class="outline-text-2" id="text-1">
<p>
To display inline images in org buffer after you have placed some, click <code>C-c
C-x C-v</code>.
</p>
</div>
</div>

<div id="outline-container-orged4ea1d" class="outline-2">
<h2 id="orged4ea1d"><span class="section-number-2">2.</span> If you have the image with you</h2>
<div class="outline-text-2" id="text-2">
<p>
To insert an image, do C-u then C-c C-l. easy. if you add a
description, it won't show the image, but rather the description with
an indication of a link.
</p>

<p>
<span class="timestamp-wrapper"><span class="timestamp">[2023-12-14 Thu] </span></span> or what I use now is yasnippet that looks like such, that is
the yasnippet template:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">#+attr_html: :width 800px
#+ATTR_ORG: :width 600
[[./static/images/.png]]
</pre>
</div>

<p>
Simply modify the path of the image and it will display it.
</p>
</div>
</div>

<div id="outline-container-org866ca28" class="outline-2">
<h2 id="org866ca28"><span class="section-number-2">3.</span> If you don't have an image and want to insert a screenshot</h2>
<div class="outline-text-2" id="text-3">
<p>
Use <code>org-download</code> package. After you install it, run <code>M-x
org-download-screenshot</code>.
</p>

<p>
Then make sure in init file you have specified the directory. If not, it will
save images in your current org file directory. It is good if you want to
export the file to html later and then maybe even send to someone.
</p>
</div>
</div>

<div id="outline-container-org55721ca" class="outline-2">
<h2 id="org55721ca"><span class="section-number-2">4.</span> Resizing images in emacs and html</h2>
<div class="outline-text-2" id="text-4">
<p>
To resize an image, add this to your init:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(setq org-image-actual-width nil)
</pre>
</div>

<p>
Then, above EACH and EVERY image add such lines:
</p>

<div class="org-src-container">
<pre class="src src-org">#+attr_html: :width 900px
#+ATTR_ORG: :width 600
[[file:images/smutifruti.png]]
</pre>
</div>

<p>
and now after C-c C-x C-v - images will display nicely, as per your request.
Beautiful.
</p>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231126T003746--images-in-org-files__emacs.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231126T003746--images-in-org-files__emacs.html</guid>
  <pubDate>Thu, 14 Dec 2023 14:42:47 +0000</pubDate>
</item>
<item>
  <title><![CDATA[login to another server over ssh]]></title>
  <description><![CDATA[
<p>
Over emacs do:
</p>

<div class="org-src-container">
<pre class="src src-bash">/ssh:remote-user@remote.box:/path/to/my/file
</pre>
</div>

<p>
will be prompted for password n stuff.
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> <a href="https://arvydasg.github.io/devnotes/html/tag-ssh.html">ssh</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[ssh]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231126T003317--login-to-another-server-over-ssh__emacs_ssh.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231126T003317--login-to-another-server-over-ssh__emacs_ssh.html</guid>
  <pubDate>Thu, 14 Dec 2023 14:42:47 +0000</pubDate>
</item>
<item>
  <title><![CDATA[can not see branches]]></title>
  <description><![CDATA[
<p>
If after a fresh repo clone you can not see other git branches besides the main
one - do:
</p>

<p>
<code>git checkout &lt;branchname&gt;</code>
</p>

<p>
Or in magit, to see all the branches - do y(magit-show-refs)
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-git.html">git</a> </div>]]></description>
  <category><![CDATA[git]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231125T221917--can-not-see-branches__git.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231125T221917--can-not-see-branches__git.html</guid>
  <pubDate>Thu, 14 Dec 2023 14:42:47 +0000</pubDate>
</item>
<item>
  <title><![CDATA[reset changes]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org74e98cc">1. git clean -nd</a></li>
<li><a href="#org60d0b32">2. git clean -fd</a></li>
<li><a href="#orgb248a3a">3. git reset &#x2013;hard HEAD</a></li>
</ul>
</div>
</nav>
<p>
Useful to know these commands when you are on a production server for
example, not having magit or Git desktop thing.
</p>

<div id="outline-container-org74e98cc" class="outline-2">
<h2 id="org74e98cc"><span class="section-number-2">1.</span> git clean -nd</h2>
<div class="outline-text-2" id="text-1">
<div class="org-src-container">
<pre class="src src-bash">git clean -nd
</pre>
</div>

<p>
This command is a dry run of the git clean command. It's used to preview what
files will be removed from the working directory. The flags used here are:
</p>

<p>
<code>-n</code>: Performs a dry run, which means it shows what files would be deleted
without actually deleting them.
</p>

<p>
<code>-d</code>: Tells Git to also remove untracked directories along with untracked
files.
</p>

<p>
Running <code>git clean -nd</code> will display a list of files and directories that are
currently untracked in the repository and would be removed if the command were
executed without the <code>-n</code> flag.
</p>
</div>
</div>

<div id="outline-container-org60d0b32" class="outline-2">
<h2 id="org60d0b32"><span class="section-number-2">2.</span> git clean -fd</h2>
<div class="outline-text-2" id="text-2">
<div class="org-src-container">
<pre class="src src-bash">git clean -fd
</pre>
</div>

<p>
<code>git clean -fd</code>: This command is used to forcefully remove untracked files and
directories from the working directory. The flags used here are:
</p>

<p>
<code>-f</code>: Stands for "force" and is used to perform the clean operation without
prompting for confirmation.
</p>

<p>
<code>-d</code>: Tells Git to also remove untracked directories along with untracked
files.
</p>

<p>
Running <code>git clean -fd</code> will permanently delete all untracked files and
directories in the repository. Be cautious while using this command as it
irreversibly removes files and directories that are not tracked by Git.
</p>
</div>
</div>

<div id="outline-container-orgb248a3a" class="outline-2">
<h2 id="orgb248a3a"><span class="section-number-2">3.</span> git reset &#x2013;hard HEAD</h2>
<div class="outline-text-2" id="text-3">
<div class="org-src-container">
<pre class="src src-bash">git reset --hard HEAD
</pre>
</div>

<p>
<code>git reset --hard HEAD</code>: This command resets the current branch to the state of
the HEAD commit. Here's what each part does:
</p>

<p>
git reset: Resets the current HEAD to the specified state.
</p>

<p>
<code>--hard</code>: Indicates a hard reset, which means it not only changes the HEAD to
the specified commit but also resets the index and working directory to match
that commit.
</p>

<p>
<code>HEAD</code>: Refers to the latest commit of the current branch.
</p>

<p>
Running <code>git reset --hard HEAD</code> will discard all changes in the working
directory and index, reverting them to the state of the latest commit on the
current branch. Be careful when using git reset &#x2013;hard as it can discard all
uncommitted changes irretrievably.
</p>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-git.html">git</a> </div>]]></description>
  <category><![CDATA[git]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231125T221653--reset-changes__git.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231125T221653--reset-changes__git.html</guid>
  <pubDate>Thu, 14 Dec 2023 14:42:47 +0000</pubDate>
</item>
<item>
  <title><![CDATA[seq keep error message in emacs]]></title>
  <description><![CDATA[
<p>
<a href="https://emacs.stackexchange.com/questions/78977/seq-keep-is-void-when-installing-magit-through-use-package">https://emacs.stackexchange.com/questions/78977/seq-keep-is-void-when-installing-magit-through-use-package</a>
</p>

<p>
should install emacs 29 bla
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> <a href="https://arvydasg.github.io/devnotes/html/tag-magit.html">magit</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[magit]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231125T220943--seq-keep-error-message-in-emacs__emacs_magit.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231125T220943--seq-keep-error-message-in-emacs__emacs_magit.html</guid>
  <pubDate>Thu, 14 Dec 2023 14:42:47 +0000</pubDate>
</item>
<item>
  <title><![CDATA[partial clone]]></title>
  <description><![CDATA[
<p>
<a href="https://magit.vc/manual/magit/Sparse-checkouts.html">https://magit.vc/manual/magit/Sparse-checkouts.html</a>
</p>

<p>
Useful when I wanted to clone only one dir at work from my personal
org notes directory.
</p>

<ul class="org-ul">
<li>go to src folder and do <code>m-x magit-clone-sparse</code></li>
<li>investigate the .git folder, see the content and watch how it updates in next
steps</li>
<li><code>m-x magit sparse checkout enable</code> (see the changes)</li>
<li>inside info folder sparse-checkout appeared</li>
<li>config and index also changed</li>
<li><code>c-x g</code> - go to magit interface</li>
<li>do <code>&gt;</code></li>
<li><code>s</code> to set directories(tab to select)</li>
<li>needed directory is fetched. MAGIC!</li>
<li>if you do <code>s</code> again to change dirs - old dir gets removed :o</li>
</ul>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-git.html">git</a> <a href="https://arvydasg.github.io/devnotes/html/tag-magit.html">magit</a> </div>]]></description>
  <category><![CDATA[git]]></category>
  <category><![CDATA[magit]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231125T220901--partial-clone__git_magit.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231125T220901--partial-clone__git_magit.html</guid>
  <pubDate>Thu, 14 Dec 2023 14:42:47 +0000</pubDate>
</item>
<item>
  <title><![CDATA[copy a repo with all commit history]]></title>
  <description><![CDATA[
<p>
The commands provided below are used to push all local branches, tags, and
commits from one Git repository to another repository.
</p>

<p>
For instance, if the new repository is located in a directory named new<sub>repo</sub>,
you'd execute:
</p>

<div class="org-src-container">
<pre class="src src-bash">cd /path/to/new_repo
</pre>
</div>

<p>
<code>git push --mirror &lt;url of old repo&gt;</code>: This Git command pushes all branches,
tags, and commits from the current repository (in the changed directory) to
another repository specified by &lt;url of old repo&gt;. The <code>--mirror</code> flag is used
to ensure that all references (branches and tags) and associated objects are
pushed to the remote repository.
</p>

<p>
Replace <code>&lt;url of old repo&gt;</code> with the URL or remote repository location of the
old repository.
</p>

<p>
For example:
</p>

<div class="org-src-container">
<pre class="src src-bash">git push --mirror https://github.com/old_username/old_repo.git
</pre>
</div>

<p>
This sequence of commands, after changing the directory to the new repository,
essentially mirrors the content of the old repository, including all branches,
tags, commits, and their associated history, to the new repository specified by
<code>&lt;url of old repo&gt;</code>.
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-git.html">git</a> </div>]]></description>
  <category><![CDATA[git]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231125T220538--copy-a-repo-with-all-commit-history__git.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231125T220538--copy-a-repo-with-all-commit-history__git.html</guid>
  <pubDate>Thu, 14 Dec 2023 14:42:47 +0000</pubDate>
</item>
<item>
  <title><![CDATA[revert a commit with magit]]></title>
  <description><![CDATA[
<p>
<a href="https://www.youtube.com/watch?v=7D4cV0aodGw&amp;ab_channel=whatacold">best explanation</a> at 3:55
</p>

<div class="org-src-container">
<pre class="src src-bash"># open magit
C-x g -
# open log
l l
# select the commits
C-space n/p
# revert the commits
V V
</pre>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-git.html">git</a> <a href="https://arvydasg.github.io/devnotes/html/tag-magit.html">magit</a> </div>]]></description>
  <category><![CDATA[git]]></category>
  <category><![CDATA[magit]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231125T214132--revert-a-commit__git_magit.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231125T214132--revert-a-commit__git_magit.html</guid>
  <pubDate>Thu, 14 Dec 2023 14:42:47 +0000</pubDate>
</item>
<item>
  <title><![CDATA[split a github repository into multiple]]></title>
  <description><![CDATA[
<p>
Can do that with commit history like so -
<a href="https://www.youtube.com/watch?v=HV8hfmwDlPY&amp;ab_channel=CraigDavison">https://www.youtube.com/watch?v=HV8hfmwDlPY&amp;ab_channel=CraigDavison</a>
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-git.html">git</a> </div>]]></description>
  <category><![CDATA[git]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231125T190641--split-a-github-repository-into-multiple__git.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231125T190641--split-a-github-repository-into-multiple__git.html</guid>
  <pubDate>Thu, 14 Dec 2023 14:42:47 +0000</pubDate>
</item>
</channel>
</rss>
