<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<title><![CDATA[arvydasg.github.io]]></title>
<description><![CDATA[arvydasg.github.io]]></description>
<link>https://arvydasg.github.io/devnotes/html</link>
<lastBuildDate>Fri, 15 Dec 2023 17:50:44 +0000</lastBuildDate>
<item>
  <title><![CDATA[why build a website with emacs and not with something else]]></title>
  <description><![CDATA[
<p>
I tried creating personal blog/website the following ways:
</p>

<ul class="org-ul">
<li>First with php - <a href="https://github.com/arvydasg/gvazdikelis">gvazdikelis</a></li>
<li>Then with hugo - <a href="https://github.com/arvydasg/arvydas.dev_hugo">arvydas.dev<sub>hugo</sub></a></li>
<li>Finally with django - <a href="https://github.com/arvydasg/django_blog">django<sub>blog</sub></a></li>
<li>Emacs blog - <a href="https://github.com/arvydasg/emacs_blog">example</a></li>
<li>PKC wiki - <a href="https://github.com/arvydasg/pkc_wiki">example</a></li>
<li>PKC afk - <a href="https://github.com/arvydasg/PKC_AFK/blob/main/AFK/testamentas/afk.html">example</a></li>
<li>Emacs and built in <a href="https://orgmode.org/manual/HTML-Export.html">HTML exporting feature</a>(export one page at a time) <code>C-c C-e</code></li>
<li>Emacs and built in <a href="https://systemcrafters.net/publishing-websites-with-org-mode/building-the-site/">org-publish-project</a>, <a href="https://github.com/arvydasg/org-publish-project-blog">personal example</a> <code>C-c C-e P p</code></li>
<li>Emacs and <a href="https://github.com/bastibe/org-static-blog">org-static-blog package</a>, <a href="https://github.com/arvydasg/org-static-blog">personal example</a></li>
<li><span class="timestamp-wrapper"><span class="timestamp">[2023-12-15 Fri] </span></span> Had my <a href="https://github.com/arvydasg/devnotes">devnotes website</a> 90% built(<a href="https://github.com/arvydasg/devnotes/tree/baaee96445935c4d985990561ebc062054d980bf">link to commit</a>) with
<code>org-static-blog</code>, and then found out about ox-hugo from <a href="https://youtu.be/7s8cQ2cOnl8?si=Msps0EMgyY0cJYba&amp;t=1804">here</a>. Tried to
create a blog with it, example</li>
<li>Then found out about <a href="https://gtpedrosa.github.io/blog/using-org-mode-and-ox-hugo-to-replace-markdown-in-hugo-workflow/">Emacs and hugo</a>.. <a href="https://ox-hugo.scripter.co/">ox hugo</a> and <a href="https://github.com/masasam/emacs-easy-hugo">emacs-easy-hugo</a>.</li>
<li><a href="https://github.com/emacs-love/weblorg">Weblorg</a> - have not tried it</li>
<li>There is also <a href="https://github.com/novoid/lazyblorg">lazyborg</a>, for writing blogs. But it seems quite complex.</li>
<li>Also you can <a href="https://github.com/org2blog/org2blog">export your org files to wordpress</a>. Have not tried.</li>
</ul>

<p>
Creating personal website/blog with Emacs is the right way for me, because:
</p>

<ul class="org-ul">
<li>I can use Emacs shortcuts to write and edit text</li>
<li>I don’t need to reformat text to make it readable for something like <a href="20231215T055820--add-ckeditor-into-django-app__django.html">CKEditor</a>
in python <a href="https://github.com/arvydasg/emacs_blog">django</a> I can just straight up use emacs source blocks, headings,
text blocks and so on and everything just works,</li>
<li>I can publish my blog just as easily wit <a href="https://magit.vc/">Magit</a>, push straight to Github and
the changes will be visible live immediately.</li>
</ul>

<p>
For me, this is the fastest, most enjoyable, bulletproof, independent way to
blog. I don't want to depend on Wordpress, packages installs/updates/pricing,
having to deploy the site somewhere in certain file types.. now its simple
html/css. Can be hosted anywhere/forever.
</p>

<p>
You can find some inspirational websites build with org mode <a href="20231214T150411--inspirational-websites__emacs_websites.html">here</a>.
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> <a href="https://arvydasg.github.io/devnotes/html/tag-websites.html">websites</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[websites]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231215T140448--why-build-a-website-with-emacs-and-not-with-something-else__emacs_websites.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231215T140448--why-build-a-website-with-emacs-and-not-with-something-else__emacs_websites.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[cretate a blog with emacs-easy-hugo]]></title>
  <description><![CDATA[
<p>
Here is how you create a blog simply with Hugo - <a href="20231128T133020--create-a-blog-with-hugo__hugo_websites.html">example</a>. Unless you like to
write outside Emacs and you like wiring in plain Markdown - go ahead and create
a blog with hugo.
</p>

<p>
If you want to use Emacs, write in .org syntax AND publish your blog HUGO
STYLE, then there is a package for you -
<a href="https://github.com/masasam/emacs-easy-hugo">https://github.com/masasam/emacs-easy-hugo</a>. Heard about it here -
<a href="https://youtu.be/7s8cQ2cOnl8?si=NaOv-2uyv74PmZo6&amp;t=1708">https://youtu.be/7s8cQ2cOnl8?si=NaOv-2uyv74PmZo6&amp;t=1708</a>
</p>

<p>
And here -
<a href="https://gtpedrosa.github.io/blog/using-org-mode-and-ox-hugo-to-replace-markdown-in-hugo-workflow/">https://gtpedrosa.github.io/blog/using-org-mode-and-ox-hugo-to-replace-markdown-in-hugo-workflow/</a>
</p>

<p>
Have not tried it myself yet(yes, might seem strange, will I might do that in
the future, now simply keeping this as a reference for myself later.
<span class="timestamp-wrapper"><span class="timestamp">[2023-12-15 Fri] </span></span> and I am quite happy with my fresh out of the over devnotes
page(the one you are on now.)), I don't really want another dependency managing
my LIFE LONG notes. If it's just for a simple blog that you want to spin up on
the spot, then probably that could work.
</p>

<p>
Currently my flow is:
</p>
<blockquote>
<p>
Emacs and .org file -&gt; org-static-blog-package -&gt; github pages for deploying
</p>
</blockquote>

<p>
How it would be with emacs-easy-hugo package:
Emacs and .org file -&gt; emacs-easy-hugo -&gt; hugo for deploying
</p>

<p>
And I simply think that github pages will outlast hugo when it comes to
publishing pages.
</p>

<p>
TODO okay try it lol. try this also -
<a href="https://github.com/kaushalmodi/ox-hugo?tab=readme-ov-file">https://github.com/kaushalmodi/ox-hugo?tab=readme-ov-file</a>
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> <a href="https://arvydasg.github.io/devnotes/html/tag-hugo.html">hugo</a> <a href="https://arvydasg.github.io/devnotes/html/tag-websites.html">websites</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[hugo]]></category>
  <category><![CDATA[websites]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231215T101410--cretate-a-blog-with-emacs-easy-hugo__emacs_hugo_websites.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231215T101410--cretate-a-blog-with-emacs-easy-hugo__emacs_hugo_websites.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[add ckeditor into django app]]></title>
  <description><![CDATA[
<p>
CKEditor - rich text field
</p>

<ul class="org-ul">
<li class="off"><code>[&#xa0;]</code> pip install django-ckeditor</li>
<li class="off"><code>[&#xa0;]</code> <p>
add this inside models.py
</p>

<div class="org-src-container">
<pre class="src src-python">from ckeditor.fields import RichTextField

content = RichTextField(null=True, blank=True)  # add this
# content = models.TextField(null=True, blank=True) # instead of this
</pre>
</div></li>

<li class="off"><code>[&#xa0;]</code> python manage.py makemigrations</li>
<li class="off"><code>[&#xa0;]</code> python manage.py migrate</li>
<li class="off"><code>[&#xa0;]</code> add 'ckeditor' to settings.py installed apps</li>
<li class="off"><code>[&#xa0;]</code> <p>
add some config to give the editor more functionality. Inside settings.py
</p>
<div class="org-src-container">
<pre class="src src-python">CKEDITOR_CONFIGS = {
    'default': {
        'toolbar': 'full',
        'height': 300,
        'width': '100%',
        'skin': 'moono',
        'extraPlugins': ','.join(
            [
                'codesnippet',
            ]),
    },
}
</pre>
</div></li>
<li class="off"><code>[&#xa0;]</code> <p>
All blocks where Richtextfield was used, add |safe at the end, like so:
</p>
<div class="org-src-container">
<pre class="src src-html">&lt;p&gt;{{project.content|safe}}&lt;/p&gt;
</pre>
</div>
<p>
Now go to base.html (head section) and add this to get syntax highlighting in
the browser. using <a href="https://highlightjs.org/">highlight.js</a> learned from <a href="https://www.youtube.com/watch?v=L6y6cn1XUfw&amp;t=450s">this - Django - CKEditor
Tutorial (+ CodeSnippet)</a> video
</p>
<div class="org-src-container">
<pre class="src src-html">&lt;link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.5.0/styles/base16/zenburn.min.css"&gt;
&lt;script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.5.0/highlight.min.js"&gt;&lt;/script&gt;
&lt;script&gt;hljs.highlightAll();&lt;/script&gt;
</pre>
</div></li>
</ul>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-django.html">django</a> </div>]]></description>
  <category><![CDATA[django]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231215T055820--add-ckeditor-into-django-app__django.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231215T055820--add-ckeditor-into-django-app__django.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[use postgres db instead of sqlite]]></title>
  <description><![CDATA[
<p>
<a href="https://stackpython.medium.com/how-to-start-django-project-with-a-database-postgresql-aaa1d74659d8">Karina's tutorial of how to conenct sqlite to postgresql</a>
</p>

<p>
If you use SQLite, you can immediately connect Django with this database after
migrating process without installing any tools or software because SQLite
stores data into a single file, no server required.
</p>

<p>
But not what I’m looking for, the professional one I need is PostgreSQL “The
most recommended database for Django”
</p>

<ul class="org-ul">
<li><a href="https://www.postgresql.org/download/linux/ubuntu/">install postgresql</a></li>
<li><a href="https://www.pgadmin.org/download/pgadmin-4-apt/">download and install PGADMIN 4</a></li>
<li>ls <i>etc/postgresql/15/main</i></li>
<li>service posgreslq</li>
<li>service postgresql status</li>
<li>sudo -i -u postgres</li>
<li>psql</li>
<li>\</li>
<li>\l</li>
<li>\du</li>
<li>CREATE database pagalbaGyvunams;</li>
<li><a href="https://www.youtube.com/watch?v=CaxpuKwOs2w&amp;ab_channel=AnalyzingAlpha">explains users and rights</a></li>
<li>display your newly created db in pgadmin4 <a href="https://www.youtube.com/watch?v=7tfPKDba1Jo&amp;ab_channel=TechLearning">end of this video</a></li>
<li>man psql</li>
</ul>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-django.html">django</a> <a href="https://arvydasg.github.io/devnotes/html/tag-sql.html">sql</a> </div>]]></description>
  <category><![CDATA[django]]></category>
  <category><![CDATA[sql]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231215T055742--use-postgres-db-instead-of-sqlite__django_sql.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231215T055742--use-postgres-db-instead-of-sqlite__django_sql.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[deploy django app]]></title>
  <description><![CDATA[
<p>
If deploying with nginx, make sure to do server<sub>tokens</sub> = off (<a href="https://www.youtube.com/watch?v=-1xPfxtt0SY&amp;ab_channel=AndreyIvanov%7CPython">why is here</a>).
Mask response header so hackers wouldn't know your server and version of it.
</p>

<p>
Don't be opening random ports!! dont increase ways to attack your
server.
</p>

<p>
CLOSE ADMIN PANEL to everyone except me!!!!
</p>

<ul class="org-ul">
<li><p>
preview local deployment on your phone localhost
</p>
<div class="org-src-container">
<pre class="src src-bash"># be connected to the same wifi!!!
# add the local ip to allowed hosts
# ALLOWED_HOSTS = ["192.168.1.177"]
python manage.py runserver 192.168.1.177:8000
</pre>
</div></li>

<li><a href="https://mattsegal.dev/simple-django-deployment.html">digitalocean tutorial</a></li>
<li><a href="https://github.com/batpad/railways">django project about Indian trains - just for reference</a></li>
<li><a href="https://tutorial.djangogirls.org/en/deploy/">deploy with pythonanywhere</a></li>
<li>dennis have tutorial also</li>
<li>psycopg2 for postgresql db</li>
<li>whitenoise for images</li>
<li>railway quick deployment</li>
<li>csfr token for apps(including django admin) (CSRF<sub>TRUSTED</sub><sub>ORIGINS</sub>)</li>
<li>pythonanywhere for quick deployment</li>
<li><a href="https://tutorial.djangogirls.org/en/deploy/">djangogirls turorial how to launch and deploy</a></li>
<li>digitalocean production proper do everything yourself solution
komandos ir pan</li>
<li>GUI for sqlite browser in local app - "DB browser for sqlite" super
fun pazaist ir parasyt queries paciam</li>
<li>dont need to push db file</li>
<li>runtime.txt</li>
<li>requiremenets.txt</li>
<li>allowed hosts</li>
<li>pillow for images</li>
<li><p>
change db in settings.py
DATABASES = {
  "default": {
      "ENGINE": "django.db.backends.sqlite3",
      "NAME": BASE<sub>DIR</sub> / "db.sqlite3",
</p>

<p>
     'ENGINE': 'django.db.backends.postgresql',
     'NAME': 'railway',
     'USER': 'postgres',
     'PASSWORD': 'gT0TDKJM2K5N6F9QAkqi',
     'HOST': 'containers-us-west-105.railway.app',
     'PORT': '8014',
 }
}
</p></li>
<li>specify collecstatic location in settings.py</li>
<li>PYTHON DECOUPLING
for hiding variables store parameters in ini or .
env files; define comprehensive default values; properly convert
values to the correct data type; have only one configuration module
to rule all your instances.</li>
<li><a href="https://help.pythonanywhere.com/pages/environment-variables-for-web-apps">How to set environment variables for your web apps (for SECRET<sub>KEY</sub> etc)</a></li>
<li><a href="https://djangostars.com/blog/configuring-django-settings-best-practices/">Configuring Django Settings: Best Practices</a></li>
<li>can deploy on raspberry pi</li>
<li>Why do some people use AWS for their media files?</li>
<li><a href="https://www.reddit.com/r/django/comments/sr21h2/comment/hwtgrpb/">labai gera diskusija on reddit cia zmogus klausineja apie security dalykus</a></li>
</ul>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-django.html">django</a> <a href="https://arvydasg.github.io/devnotes/html/tag-python.html">python</a> </div>]]></description>
  <category><![CDATA[django]]></category>
  <category><![CDATA[python]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231215T055647--deploy-django-app__django_python.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231215T055647--deploy-django-app__django_python.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[deploy django app on railway]]></title>
  <description><![CDATA[
<ul class="org-ul">
<li><a href="https://dev.to/mr_destructive/django-postgresql-deployment-on-railway-app-d54">tutorial deploy with railway</a></li>

<li>make sure the environmetn variables are properly set up</li>
<li>need cli or terminal for migrate, createsuperuser, collectstatic</li>
<li>variables should be the same in local and remote</li>
<li>visa info here kaip padaryti superuser yra <a href="https://stackoverflow.com/questions/73843151/how-to-run-commands-in-cli-with-railway-app">here</a></li>
<li>PROCEDURA:
<ul class="org-ul">
<li>npm i -g @railway/cli</li>
<li>railway login</li>
<li>railway list</li>
<li>railway logs</li>
<li>railway vars</li>
<li>railway help</li>
<li>(in main branch!!!)railway run python manage.py collectstatic</li>
</ul></li>
</ul>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-django.html">django</a> <a href="https://arvydasg.github.io/devnotes/html/tag-railway.html">railway</a> </div>]]></description>
  <category><![CDATA[django]]></category>
  <category><![CDATA[railway]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231215T055535--deploy-django-app-on-railway__django_railway.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231215T055535--deploy-django-app-on-railway__django_railway.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[using emacs together with vscode]]></title>
  <description><![CDATA[
<p>
Don't remember where it is from, but I quote everything what is written below:
</p>

<blockquote>
<p>
I use Emacs for writing prose and general computing.
</p>

<p>
But, with respect to programming, I now use both Emacs and VSCode <b>at the same
time for the same files/projects</b>. (Although predominantly Emacs).
</p>

<p>
Some months ago, I started working professionally on a Typescript/Angular
project. And my co-workers, of course, use VSCode.
</p>

<p>
Initially, I kept using Emacs. After a while, seeing the several ide features
(go to definition, show documentation, etc.) that my colleagues were using, I
decided to give VSCode a serious try and I used it to write Typescript/Angular
for a whole month or so.
</p>

<p>
After that, I tried to see whether I could get similar functionalities in
Emacs. I tried both LSP Mode and Eglot. After some fighting, I had a quite
usable LSP Mode with the ide features I wanted. Not as polished as VSCode, but
totally usable. (Eglot was very nice, but I wanted to try ESLint and it looks
like with Eglot, atm, you cannot have multiple LSP servers running for the same
buffer.)
</p>

<p>
Instead of going back to Emacs 100%, I decided to try a hybrid approach, which
has been very pleasant so far. I use emacs most of the time, but when I feel
that VSCode can offer some additional help I turn to it and then go back to
Emacs. To make the process smooth I wrote some lines of elisp that make VSCode
open the same file I am currently editing, at the same line and the same
column. I have it bound to C-Caps (Actually it's C-Escape, because I have
Escape remapped to Caps systemwise). When I want, then, I hit a key, VSCode
appears, with the cursor placed exactly where Emacs cursor was, I do what I
want to do, save if necessary, and switch back to Emacs. I usually keep VSCode
already open in the same project, to allow things to be faster. Here is the
elisp:
</p>
</blockquote>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(defun gp/vscode-current-buffer-file-at-point ()
  (interactive)
  (start-process-shell-command "code"
                               nil
                               (concat "code --goto "
                                       (buffer-file-name)
                                       ":"
                                       (number-to-string (1+ (current-line))) ;; +1 who knows why
                                       ":"
                                       (number-to-string (current-column)))))

(define-key global-map (kbd "C-&lt;escape&gt;") 'gp/vscode-current-buffer-file-at-point)
</pre>
</div>

<blockquote>
<p>
I would also like to able to open Emacs from VSCode, remaining in the same
file, same line and column, too. Does anyone know how to do that? I couldn't be
bothered, so far&#x2026;
</p>

<p>
Assuming that Emacs is better than VSCode at certain things (say, text-editing,
keyboard-macros, extensibility on the fly) and VSCode is better than Emacs (at
least, non-relevantly extended Emacs) at other things (say, code
navigation/visualization and certain code-completions), using both at the same
time is, I think, an approach that deserves some thought.
</p>
</blockquote>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-angular.html">angular</a> <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> <a href="https://arvydasg.github.io/devnotes/html/tag-vscode.html">vscode</a> </div>]]></description>
  <category><![CDATA[angular]]></category>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[vscode]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231214T171810--using-emacs-together-with-vscode__angular_emacs_vscode.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231214T171810--using-emacs-together-with-vscode__angular_emacs_vscode.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[inspirational websites]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org28226fe">1. Websites made with Emacs and org-mode</a></li>
<li><a href="#orgf936187">2. Other</a></li>
</ul>
</div>
</nav>

<div id="outline-container-org28226fe" class="outline-2">
<h2 id="org28226fe"><span class="section-number-2">1.</span> Websites made with Emacs and org-mode</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li><a href="https://orgmode.org/worg/org-blog-wiki.html">Blogs and Wikis with Org</a></li>
<li><a href="https://nicolas.petton.fr/blog/blogging-with-org-mode.html">https://nicolas.petton.fr/blog/blogging-with-org-mode.html</a></li>
<li><a href="https://ogbe.net/">https://ogbe.net/</a></li>
<li><a href="https://bastibe.de/">https://bastibe.de/</a></li>
<li><a href="https://writepermission.com/">https://writepermission.com/</a></li>
<li><a href="https://config.daviwil.com/">https://config.daviwil.com/</a></li>
<li><a href="https://opensource.com/article/20/3/blog-emacs">https://opensource.com/article/20/3/blog-emacs</a></li>
<li><a href="https://psachin.gitlab.io/">https://psachin.gitlab.io/</a></li>
<li><a href="https://magnus.therning.org/index.html">https://magnus.therning.org/index.html</a> (org-static-blog)</li>
<li>oh hugo sites - <a href="https://ox-hugo.scripter.co/doc/examples/">https://ox-hugo.scripter.co/doc/examples/</a></li>
<li><a href="https://taingram.org/blog/org-mode-blog.html">https://taingram.org/blog/org-mode-blog.html</a></li>
<li><a href="https://taingram.org/">https://taingram.org/</a></li>
</ul>
</div>
</div>

<div id="outline-container-orgf936187" class="outline-2">
<h2 id="orgf936187"><span class="section-number-2">2.</span> Other</h2>
<div class="outline-text-2" id="text-2">
<ul class="org-ul">
<li><a href="https://drewdevault.com/">https://drewdevault.com/</a></li>
<li><a href="https://agnessa.pp.ru/archive.html">https://agnessa.pp.ru/archive.html</a></li>
<li><a href="https://sourcehut.org/consultancy/">https://sourcehut.org/consultancy/</a></li>
<li><a href="https://www.jarmalavicius.lt/">https://www.jarmalavicius.lt/</a></li>
<li><a href="https://bitfehler.srht.site/">https://bitfehler.srht.site/</a></li>
<li><a href="https://bastibe.de/projects.html">https://bastibe.de/projects.html</a></li>
<li><a href="https://braindump.jethro.dev/">org-roam creator</a></li>
<li><a href="https://thibaultmarin.github.io/blog/posts/2016-11-13-Personal_website_in_org.html#orgb5773b9">this guy is org pro</a></li>
<li><a href="https://orgmode.org/worg/org-web.html">webpages made with org</a></li>
<li><a href="https://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html">original tut making sites with ORG not roam</a></li>
<li>crazy site with nodes - <a href="https://hugocisneros.com/notes/">https://hugocisneros.com/notes/</a></li>
<li>org roam creator website - <a href="https://braindump.jethro.dev/">https://braindump.jethro.dev/</a></li>
<li>crazy - <a href="https://anagora.org/index">https://anagora.org/index</a></li>
</ul>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> <a href="https://arvydasg.github.io/devnotes/html/tag-websites.html">websites</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[websites]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231214T150411--inspirational-websites__emacs_websites.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231214T150411--inspirational-websites__emacs_websites.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[enable wsl on windows]]></title>
  <description><![CDATA[
<p>
<a href="https://web02.gonzaga.edu/faculty/talarico/vlsi/wsl.html">https://web02.gonzaga.edu/faculty/talarico/vlsi/wsl.html</a>
</p>

<p>
Then you have to install an image, whether its ubuntu, nixos, alpine or
anything else.
</p>

<p>
Guide how to do that here - <a href="20231128T165324--install-linux-distro-over-wsl__windows_wsl.html">install wsl repo on windows</a>.
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-windows.html">windows</a> <a href="https://arvydasg.github.io/devnotes/html/tag-wsl.html">wsl</a> </div>]]></description>
  <category><![CDATA[windows]]></category>
  <category><![CDATA[wsl]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231214T142532--enable-wsl-on-windows__windows_wsl.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231214T142532--enable-wsl-on-windows__windows_wsl.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[my dev environment]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org8c314c0">1. <span class="todo TODO">TODO</span> apie my computer setup</a></li>
</ul>
</div>
</nav>

<figure id="orgdf335e0">
<img src="../media/Screenshot 2023-11-17 163344 - very quaint.png" alt="Screenshot 2023-11-17 163344 - very quaint.png" width="400px">

</figure>

<div id="outline-container-org8c314c0" class="outline-2">
<h2 id="org8c314c0"><span class="section-number-2">1.</span> <span class="todo TODO">TODO</span> apie my computer setup</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>windows</li>
<li>wsl nixos</li>
<li>etc</li>
<li><a href="20231130T065309--fetch-and-pull-changes-automatically__git_wsl.html">kokie scriptai runina automatically</a></li>
<li>kaip darau savo bloga ir pan(yep)</li>
<li>kaip takinu notes(denote)</li>
<li>kaip codinu(vscode or emacs?)</li>
</ul>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-git.html">git</a> <a href="https://arvydasg.github.io/devnotes/html/tag-scripting.html">scripting</a> <a href="https://arvydasg.github.io/devnotes/html/tag-wsl.html">wsl</a> </div>]]></description>
  <category><![CDATA[git]]></category>
  <category><![CDATA[scripting]]></category>
  <category><![CDATA[wsl]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231214T105653--my-dev-environment__git_scripting_wsl.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231214T105653--my-dev-environment__git_scripting_wsl.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[setup custom domain for github pages]]></title>
  <description><![CDATA[
<p>
This video below has a good explanation - <a href="https://www.youtube.com/watch?v=rKz6kIW4Uos&amp;ab_channel=MichaelSolorio">https://www.youtube.com/watch?v=rKz6kIW4Uos&amp;ab_channel=MichaelSolorio</a>
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-git.html">git</a> <a href="https://arvydasg.github.io/devnotes/html/tag-websites.html">websites</a> </div>]]></description>
  <category><![CDATA[git]]></category>
  <category><![CDATA[websites]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231214T094426--setup-custom-domain-for-github-pages__git_websites.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231214T094426--setup-custom-domain-for-github-pages__git_websites.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[authenticate to git with gpg key]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org3078866">1. <span class="todo TODO">TODO</span> gpg key method</a></li>
</ul>
</div>
</nav>

<div id="outline-container-org3078866" class="outline-2">
<h2 id="org3078866"><span class="section-number-2">1.</span> <span class="todo TODO">TODO</span> gpg key method</h2>
<div class="outline-text-2" id="text-1">
<p>
Colleague gave some tutorials in work notes.
</p>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-git.html">git</a> <a href="https://arvydasg.github.io/devnotes/html/tag-gpg.html">gpg</a> </div>]]></description>
  <category><![CDATA[git]]></category>
  <category><![CDATA[gpg]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231214T061312--authenticate-to-git-with-gpg-key__git_gpg.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231214T061312--authenticate-to-git-with-gpg-key__git_gpg.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[authenticate to git with personal access token]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org5b79d21">1. Personal access token</a></li>
<li><a href="#org7cc9565">2. Misc info</a></li>
</ul>
</div>
</nav>

<div id="outline-container-org5b79d21" class="outline-2">
<h2 id="org5b79d21"><span class="section-number-2">1.</span> Personal access token</h2>
<div class="outline-text-2" id="text-1">
<p>
After you have <a href="20231211T161252--introduce-yourself-to-git__git.html">introduced yourself to git</a>.
</p>

<p>
When you do a git operation(with magit or just from the terminal) you will be
prompted for password. One way is to get with a generated <code>personal access
token</code> in github developer settings.
</p>

<p>
Go generate that token, save it somewhere safe.
</p>

<p>
Then in the terminal do:
</p>

<div class="org-src-container">
<pre class="src src-bash">git config --global --replace-all credential.helper cache
git config --global credential.helper store
</pre>
</div>

<p>
Now try to push the code, enter your git username as username and enter the
token that you have generated as password.
</p>

<p>
Git will remember your credentials for future git operations.
</p>
</div>
</div>

<div id="outline-container-org7cc9565" class="outline-2">
<h2 id="org7cc9565"><span class="section-number-2">2.</span> Misc info</h2>
<div class="outline-text-2" id="text-2">
<p>
Changing the token - <a href="https://stackoverflow.com/questions/46645843/where-to-store-my-git-personal-access-token">Explanation here</a>.
</p>

<div class="org-src-container">
<pre class="src src-bash">git config --list (some info about you)
</pre>
</div>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-git.html">git</a> </div>]]></description>
  <category><![CDATA[git]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231214T060637--authenticate-to-git-with-personal-access-token__git.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231214T060637--authenticate-to-git-with-personal-access-token__git.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[authenticate to git with ssh]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org9096c70">1. <span class="todo TODO">TODO</span> ssh key method</a></li>
</ul>
</div>
</nav>

<div id="outline-container-org9096c70" class="outline-2">
<h2 id="org9096c70"><span class="section-number-2">1.</span> <span class="todo TODO">TODO</span> ssh key method</h2>
<div class="outline-text-2" id="text-1">
<p>
I have described it in work notes.
</p>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-git.html">git</a> <a href="https://arvydasg.github.io/devnotes/html/tag-ssh.html">ssh</a> </div>]]></description>
  <category><![CDATA[git]]></category>
  <category><![CDATA[ssh]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231214T060558--authenticate-to-git-with-ssh__git_ssh.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231214T060558--authenticate-to-git-with-ssh__git_ssh.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[multiple ways to blog with emacs]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org0fff45a">two blog examples</a></li>
<li><a href="#orgb502387">multiple ways to blog with emacs</a>
<ul>
<li><a href="#org767db1c">simple export with C-c C-e h o</a>
<ul>
<li><a href="#org5dd6d2e">PROS</a></li>
<li><a href="#org6727119">CONS</a></li>
</ul>
</li>
<li><a href="#org2b5cbbd">ox-publish C-c C-e P p</a>
<ul>
<li><a href="#orgdffe8c5">PROS</a></li>
<li><a href="#org825d993">CONS</a></li>
</ul>
</li>
<li><a href="#orgf2d4845">org-static-blog-publish</a>
<ul>
<li><a href="#org3e632d4">PROS</a></li>
<li><a href="#org5549aa1">CONS</a></li>
</ul>
</li>
<li><a href="#orgc20fda0">weblorg?</a></li>
</ul>
</li>
<li><a href="#orgbe0c3a8">Checkout</a>
<ul>
<li><a href="#org9306c15"><span class="todo TODO">TODO</span> Cool check this out!</a></li>
<li><a href="#org839da19"><span class="todo TODO">TODO</span> bro what??? automatic to github?</a></li>
<li><a href="#orgf42a9b2"><span class="todo TODO">TODO</span> check his postamble/preamble things</a></li>
</ul>
</li>
<li><a href="#org16a601d">How I am using denote</a></li>
</ul>
</div>
</nav>
<p>
Leaving this as an example, the text below is messy, did it during the current
blog setup. So it&rsquo;s just brainstorming.. did not want to lose it, so keeping it.
</p>

<p>
Explains how to build a blog wiht org mode - <a href="https://taingram.org/blog/org-mode-blog.html">https://taingram.org/blog/org-mode-blog.html</a>
</p>

<div id="outline-container-org0fff45a" class="outline-2">
<h2 id="org0fff45a">two blog examples</h2>
<div class="outline-text-2" id="text-org0fff45a">
<p>
This way of creating a blog, unlike
<a href="https://github.com/arvydasg/org-static-blog">https://github.com/arvydasg/org-static-blog</a>, does not have a possibility to do
anything with tags. It does not generate separate pages for tags. In theory it
could be custom made with html/javascript, but if org-static-blog is there and
you need tags, use it instead.
</p>

<p>
This is good if you have a few org files that contain ALL the information a
bout a certain topic. For example - about Emacs, you have one file called
&ldquo;emacs.org&rdquo; and in it you have tens or hundreds of subheadings. You open one
file - search - find what you need. This is how I built codeacademy page.
</p>

<p>
what <a href="https://github.com/arvydasg/org-static-blog">https://github.com/arvydasg/org-static-blog</a> does is splits that 1
&ldquo;emacs.org&rdquo; file in to 100 small files(if you had 100 headlines as an example)
and creates separate blog post(html page) out of it, which can also be tagged
and later sorted by tags. This way you are closer to creating a network of
thoughts where you link one with another by using links. This blog is built
using denote notes, but linking wiht simple org-insert-link because as of
<span class="timestamp-wrapper"><span class="timestamp">[2023-12-14 Thu]</span></span>, denote links do not work and are not being onderstood by
emacs html backend engine. This is how my arvydas.dev page is built.
</p>
</div>
</div>

<div id="outline-container-orgb502387" class="outline-2">
<h2 id="orgb502387">multiple ways to blog with emacs</h2>
<div class="outline-text-2" id="text-orgb502387">
<p>
In all ways - to deploy to github, must have index.html in the directory! Other
wise git will not know what to serve. Can use special symbols(bottom of the
page - <a href="https://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html">https://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html</a>)
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(setq org-publish-project-alist
      '(
        ("my-org-site"
         :base-directory "/home/nixos/GIT/org-publish/org/" ;tells Org the folder of files that we want to publish to HTML
         :publishing-directory "/home/nixos/GIT/org-publish/html/" ;configures the output folder for all published files
         :base-extension "org"
         :publishing-function org-html-publish-to-html ;tells Org that we want to publish the files as HTML
         :recursive t			;tells Org to publish .org files under all subdirectories of :base-directory
         :with-author nil           ; Don't include author name
         :with-creator t            ; Include Emacs and Org versions in footer
         :with-toc t                ; Include a table of contents
         :section-numbers nil       ; Don't include section numbers
         :time-stamp-file nil    ; Don't include time stamp in file
         :auto-sitemap t			;creates sitemap, a place with all the links
         )
        ("build-site.el" :components ("my-org-site"))))
</pre>
</div>
</div>

<div id="outline-container-org767db1c" class="outline-3">
<h3 id="org767db1c">simple export with C-c C-e h o</h3>
<div class="outline-text-3" id="text-org767db1c">
</div>
<div id="outline-container-org5dd6d2e" class="outline-4">
<h4 id="org5dd6d2e">PROS</h4>
<div class="outline-text-4" id="text-org5dd6d2e">
<ul class="org-ul">
<li>no dependencies, can do anywhere</li>
<li>built in</li>
</ul>
</div>
</div>

<div id="outline-container-org6727119" class="outline-4">
<h4 id="org6727119">CONS</h4>
<div class="outline-text-4" id="text-org6727119">
<ul class="org-ul">
<li>can&rsquo;t export more than one file</li>
<li>unclear about links, have not tried, but probs dont work</li>
</ul>
</div>
</div>
</div>

<div id="outline-container-org2b5cbbd" class="outline-3">
<h3 id="org2b5cbbd">ox-publish C-c C-e P p</h3>
<div class="outline-text-3" id="text-org2b5cbbd">
<p>
Can do basic batch export with header, footer, no need to use additional package.
</p>

<p>
More info here how it could be built from PKC times -
<a href="https://github.com/arvydasg/PKC_AFK/tree/main/AFK/src/pkcwiki">https://github.com/arvydasg/PKC_AFK/tree/main/AFK/src/pkcwiki</a>
</p>

<p>
and from this guy&rsquo;s video -
<a href="https://www.youtube.com/watch?v=Elynmb3kTE4&amp;ab_channel=ChrisMaiorana">https://www.youtube.com/watch?v=Elynmb3kTE4&amp;ab_channel=ChrisMaiorana</a>
</p>

<p>
and official docs -
<a href="https://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html">https://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html</a>
</p>

<p>
if the org file has not changed and you have deleted the html file and you try
to publish project again - it will say that the file is unmodified and will not
export to html. What we do then, we can forcefully publish it by setting a
prefix in org dispacher:
</p>

<blockquote>
<p>
The export dispatcher, which you can summon with C-c C-e in the Org mode,
provides the relevant &ldquo;Force publishing&rdquo; option under C-f. Thus, to
force-publish the current file, type C-c C-e C-f P f.
</p>
</blockquote>

<p>
It will then publish ALL the files once again?
</p>

<p>
note(look for prefix) - <a href="https://orgmode.org/guide/Publishing.html#Publishing">https://orgmode.org/guide/Publishing.html#Publishing</a>,
similar here also -
<a href="https://stackoverflow.com/questions/21258769/using-emacs-org-mode-how-to-publish-the-unchanged-files-in-a-project">https://stackoverflow.com/questions/21258769/using-emacs-org-mode-how-to-publish-the-unchanged-files-in-a-project</a>
</p>

<p>
can actually make links with C-c C-l to file, that&rsquo;s good.
</p>

<p>
you can also create a script instead of going the default way. explain why its
good and how to do  both ways.
</p>

<p>
script - dont export when link problems, nicer preview, logs, see what has been
done. no need to use the menus etc.
</p>

<p>
Check the docs for more options here -
<a href="org-publish-project-alist">org-publish-project-alist</a> docs
</p>
</div>

<div id="outline-container-orgdffe8c5" class="outline-4">
<h4 id="orgdffe8c5">PROS</h4>
<div class="outline-text-4" id="text-orgdffe8c5">
<ul class="org-ul">
<li>can work with multiple projects</li>
<li>each project can be specified in a separate config</li>
<li>built in</li>
<li>many options to customise the site</li>
<li>worked in pkc, should work for me now also</li>
</ul>
</div>
</div>

<div id="outline-container-org825d993" class="outline-4">
<h4 id="org825d993">CONS</h4>
<div class="outline-text-4" id="text-org825d993">
<ul class="org-ul">
<li>links don&rsquo;t work</li>
</ul>
</div>
</div>
</div>

<div id="outline-container-orgf2d4845" class="outline-3">
<h3 id="orgf2d4845">org-static-blog-publish</h3>
<div class="outline-text-3" id="text-orgf2d4845">
</div>
<div id="outline-container-org3e632d4" class="outline-4">
<h4 id="org3e632d4">PROS</h4>
<div class="outline-text-4" id="text-org3e632d4">
<ul class="org-ul">
<li>does everything for you</li>
<li>tags</li>
<li>archives</li>
<li>rss feed</li>
<li>especially good for blogs, but for other things - overkill?</li>
</ul>
</div>
</div>

<div id="outline-container-org5549aa1" class="outline-4">
<h4 id="org5549aa1">CONS</h4>
<div class="outline-text-4" id="text-org5549aa1">
<ul class="org-ul">
<li>big program(installable package, not built in)</li>
<li>links don&rsquo;t work</li>
<li>can&rsquo;t handle multiple projects</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-orgc20fda0" class="outline-3">
<h3 id="orgc20fda0">weblorg?</h3>
<div class="outline-text-3" id="text-orgc20fda0">
<p>
David tried -
<a href="https://www.youtube.com/watch?v=5R7ad5xz5wo&amp;t=5746s&amp;ab_channel=SystemCrafters">https://www.youtube.com/watch?v=5R7ad5xz5wo&amp;t=5746s&amp;ab_channel=SystemCrafters</a>
</p>
</div>
</div>
</div>
<div id="outline-container-orgbe0c3a8" class="outline-2">
<h2 id="orgbe0c3a8">Checkout</h2>
<div class="outline-text-2" id="text-orgbe0c3a8">
</div>
<div id="outline-container-org9306c15" class="outline-3">
<h3 id="org9306c15"><span class="todo TODO">TODO</span> Cool check this out!</h3>
<div class="outline-text-3" id="text-org9306c15">
<p>
<a href="https://ict4g.net/adolfo/notes/emacs/linking-my-html-pages-to-source-code.html">https://ict4g.net/adolfo/notes/emacs/linking-my-html-pages-to-source-code.html</a>
</p>

<p>
amazing guide kaip org publish veikia - <a href="https://systemcrafters.net/publishing-websites-with-org-mode/building-the-site/">https://systemcrafters.net/publishing-websites-with-org-mode/building-the-site/</a>
</p>

<p>
kaip jis prideda postamble ir style nice ir galiakas nice ir javascript
naudoja?
</p>
</div>
</div>

<div id="outline-container-org839da19" class="outline-3">
<h3 id="org839da19"><span class="todo TODO">TODO</span> bro what??? automatic to github?</h3>
<div class="outline-text-3" id="text-org839da19">
<p>
<a href="https://systemcrafters.net/publishing-websites-with-org-mode/building-the-site/">https://systemcrafters.net/publishing-websites-with-org-mode/building-the-site/</a>
</p>

<p>
In the next video I’ll show you how to automatically publish an Org-based
website to Git hosting services like GitHub Pages and Sourcehut Pages!
</p>
</div>
</div>

<div id="outline-container-orgf42a9b2" class="outline-3">
<h3 id="orgf42a9b2"><span class="todo TODO">TODO</span> check his postamble/preamble things</h3>
<div class="outline-text-3" id="text-orgf42a9b2">
<p>
<a href="https://ict4g.net/adolfo/notes/emacs/linking-my-html-pages-to-source-code.html">https://ict4g.net/adolfo/notes/emacs/linking-my-html-pages-to-source-code.html</a>
</p>
</div>
</div>
</div>
<div id="outline-container-org16a601d" class="outline-2">
<h2 id="org16a601d">How I am using denote</h2>
<div class="outline-text-2" id="text-org16a601d">
<p>
Denote allows me to generate blog files quick and easy. They are all in the
same structure, do not require databse. I can link between them.
</p>

<p>
maybe silo could be a separate note?
</p>

<p>
Default denote dir is Documents/org, but my denote dir is ~/GIT/notes. This is
where ALL my notes used to lie. When I decided to move the programming/work
related notes to a different directory, I had to make a &ldquo;silo&rdquo; in denote
terms - as described in <a href="https://protesilaos.com/emacs/denote">https://protesilaos.com/emacs/denote</a>.
</p>

<p>
instead of denote looking at my default denote dir when I create and manage
denote files, I had to specify another directory. I could do that by simply
creating a <code>.dir-locals.el</code> file in my new directory and add such content to
it:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">;;; Directory Local Variables.  For more information evaluate:
;;;
;;;     (info "(emacs) Directory Variables")

((nil . ((denote-directory . default-directory))))
</pre>
</div>

<p>
so now when denote is launched from THAT particular folder in which there is
this dir-locals.el file, it will know that It has to create notes in that
directory and not the default directory which I have specified in my init file,
which contains all my personal files.
</p>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231212T200335--multiple-ways-to-blog-with-emacs__emacs.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231212T200335--multiple-ways-to-blog-with-emacs__emacs.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[deploy a static website with github pages]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org539c0f9">1. Create the main <code>username.github.io</code> page</a></li>
<li><a href="#org6b7aeda">2. Create <code>subpages</code> for <code>username.github.io</code></a></li>
</ul>
</div>
</nav>

<div id="outline-container-org539c0f9" class="outline-2">
<h2 id="org539c0f9"><span class="section-number-2">1.</span> Create the main <code>username.github.io</code> page</h2>
<div class="outline-text-2" id="text-1">
<p>
The idea is - you have lot's of html pages(or a single html page).
</p>

<p>
You add it(them) to github repo which is named
<code>&lt;yourgithubusername@github.io&gt;</code>. In my case -
<a href="https://github.com/arvydasg/arvydasg.github.io">https://github.com/arvydasg/arvydasg.github.io</a>.
</p>

<p>
Then in <code>repo settings -&gt; pages</code> you specify that you want master branch to be
deployed to github pages. After a few minutes you can go to
<code>&lt;yourgithubusername@github.io&gt;</code>. In my case it is <a href="https://arvydasg.github.io/">https://arvydasg.github.io/</a>.
Wait 5 minutes, do a hard browser refresh and you should see the page.
</p>

<p>
If I have a domain name, I can then specify it in repo settings as well. In my
case it is <code>arvydas.dev</code>. You might need to do some configuration on domain
side also to link to github. Probably <a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site">this</a> guide could help with that.
</p>
</div>
</div>

<div id="outline-container-org6b7aeda" class="outline-2">
<h2 id="org6b7aeda"><span class="section-number-2">2.</span> Create <code>subpages</code> for <code>username.github.io</code></h2>
<div class="outline-text-2" id="text-2">
<p>
So you have <code>&lt;yourgithubusername@github.io&gt;</code> website up and running. But you
want to deploy another page. You can do that by creating another repo(any name
now, for example a repo called <code>teddybears</code>), repo settings -&gt; pages and choose
master branch, save, save and after 5 minutes or so it will display the
contents of your teddybears repo under
<code>&lt;yourgithubusername@github.io/teddybears&gt;</code>.
</p>

<p>
I have codeacademy setup this way - <a href="https://github.com/arvydasg/codeacademy">https://github.com/arvydasg/codeacademy</a>
Also devnotes - <a href="https://arvydas.dev/devnotes/html">https://arvydas.dev/devnotes/html</a>
</p>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-git.html">git</a> <a href="https://arvydasg.github.io/devnotes/html/tag-websites.html">websites</a> </div>]]></description>
  <category><![CDATA[git]]></category>
  <category><![CDATA[websites]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231212T123552--deploy-a-static-website-with-github-pages__git_websites.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231212T123552--deploy-a-static-website-with-github-pages__git_websites.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[blog with built in org export]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org3a679c9">1. what is org-export-html</a></li>
<li><a href="#org6d6e519">2. How to use it</a></li>
<li><a href="#orgd0dc830">3. How to extend it</a>
<ul>
<li><a href="#org148c053">3.1. My org file looks like so:</a></li>
<li><a href="#org294b187">3.2. The extension with org-html-head/preamble/postamble</a></li>
</ul>
</li>
<li><a href="#org16cee2a">4. Limitations</a></li>
</ul>
</div>
</nav>

<div id="outline-container-org3a679c9" class="outline-2">
<h2 id="org3a679c9"><span class="section-number-2">1.</span> what is org-export-html</h2>
<div class="outline-text-2" id="text-1">
<p>
Built in Emacs export posibility. Html export is just one of the options (C-c
C-e).
</p>
</div>
</div>

<div id="outline-container-org6d6e519" class="outline-2">
<h2 id="org6d6e519"><span class="section-number-2">2.</span> How to use it</h2>
<div class="outline-text-2" id="text-2">
<p>
<code>C-e h h</code> command exports .org file without ANY additional settings. It is just
built in Emacs behavior.
</p>

<p>
Can try it out with such sample .org file with such content :
</p>

<div class="org-src-container">
<pre class="src src-org">* Intro

* Body

** First attempts

I was trying to do the same with my journey to programming. It started
a bit more than a year ago and since them I was trying to create
personal blog/website.

- First with php - [[https://github.com/arvydasg/gvazdikelis][gvazdikelis]]
- Then with hugo - [[https://github.com/arvydasg/arvydas.dev_hugo][arvydas.dev_hugo]]
- Finally with django - [[https://github.com/arvydasg/django_blog][django_blog]]

* Current setup

[2022-04-17 Sk] I discovered a way to make a website with emacs.
[[https://systemcrafters.net/publishing-websites-with-org-mode/][Systemcrafters channel]] has a lot of great material covering just that.

I knew that this is the right way for me to blog, because:

- I can use my emacs shortcuts to write and edit
- I don’t need to reformat text to make it readable for something like
  CKEditor in python [[https://github.com/arvydasg/emacs_blog][django]]. I can just straight up use emacs source
  blocks, headings, text blocks and so on and everything just works,
- I can publish my blog just as easily wit [[https://magit.vc/][Magit]], push straight to
  Github and the changes will be visible immediately in my website,

* Summary

For me, this is the fastest way to blog. I will be using it in the
future and hopefully improve my workflow as I go along.

P.S. Update 2022-08-29. I am creating a hugo blog - AGAIN. Read why -
[[https://github.com/arvydasg/emacs_blog][here]].
</pre>
</div>
</div>
</div>

<div id="outline-container-orgd0dc830" class="outline-2">
<h2 id="orgd0dc830"><span class="section-number-2">3.</span> How to extend it</h2>
<div class="outline-text-2" id="text-3">
<p>
For "Codeacademy" project, for when I was taking notes for it, I added
additional configuration that you see below to make the site look nicer and add
additional functionality.
</p>
</div>

<div id="outline-container-org148c053" class="outline-3">
<h3 id="org148c053"><span class="section-number-3">3.1.</span> My org file looks like so:</h3>
<div class="outline-text-3" id="text-3-1">
<div class="org-src-container">
<pre class="src src-org">#+title: Attempts to Blog
#+date: &lt;2022-06-19 20:04&gt;
#+description:
#+filetags: emacs python

#+attr_html: :width 1200px
#+ATTR_ORG: :width 600
[[./static/images/emacsblog.png]]

* Intro

* Body

** First attempts

I was trying to do the same with my journey to programming. It started
a bit more than a year ago and since them I was trying to create
personal blog/website.

- First with php - [[https://github.com/arvydasg/gvazdikelis][gvazdikelis]]
- Then with hugo - [[https://github.com/arvydasg/arvydas.dev_hugo][arvydas.dev_hugo]]
- Finally with django - [[https://github.com/arvydasg/django_blog][django_blog]]

* Current setup

[2022-04-17 Sk] I discovered a way to make a website with emacs.
[[https://systemcrafters.net/publishing-websites-with-org-mode/][Systemcrafters channel]] has a lot of great material covering just that.

I knew that this is the right way for me to blog, because:

- I can use my emacs shortcuts to write and edit
- I don’t need to reformat text to make it readable for something like
  CKEditor in python [[https://github.com/arvydasg/emacs_blog][django]]. I can just straight up use emacs source
  blocks, headings, text blocks and so on and everything just works,
- I can publish my blog just as easily wit [[https://magit.vc/][Magit]], push straight to
  Github and the changes will be visible immediately in my website,

* Summary

For me, this is the fastest way to blog. I will be using it in the
future and hopefully improve my workflow as I go along.

P.S. Update 2022-08-29. I am creating a hugo blog - AGAIN. Read why -
[[https://github.com/arvydasg/emacs_blog][here]].

</pre>
</div>
</div>
</div>

<div id="outline-container-org294b187" class="outline-3">
<h3 id="org294b187"><span class="section-number-3">3.2.</span> The extension with org-html-head/preamble/postamble</h3>
<div class="outline-text-3" id="text-3-2">
<p>
The code below adds navigation right after the opening &lt;body&gt; tag and some js
right before the closing &lt;/body&gt; tag.
</p>

<p>
&lt;head&gt; html content is added from within the org file, dont forget to change
the “title” and “content” the file.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">;; leaving this content to be in specific org files instead

;; (setq org-html-head
;;       (concat
;;        "&lt;head&gt;\n"
;;        "&lt;meta charset=\"UTF-8\"&gt;\n"
;;        "&lt;meta name=\"description\" content=\"CodeAcademy Python notes\"&gt;\n"
;;        "&lt;link rel=\"alternate\" type=\"application/rss+xml\" href=\"https://arvydasg.github.io/rss.xml\" title=\"RSS feed for https://arvydasg.github.io/\"&gt;\n"
;;        "&lt;title&gt;CodeAcademy Databases&lt;/title&gt;\n"
;;        "&lt;!-- Google Tag Manager --&gt;\n"
;;        "&lt;script&gt;(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start': new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0], j=d.createElement(s),dl=l!='dataLayer'?'&amp;l='+l:'';j.async=true;j.src= 'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f); })(window,document,'script','dataLayer','GTM-MC4ZQHP');&lt;/script&gt;\n"
;;        "&lt;!-- End Google Tag Manager --&gt;\n"
;;        "&lt;meta name=\"author\" content=\"Arvydas Gasparavicius\"&gt;\n"
;;        "&lt;meta name=\"referrer\" content=\"no-referrer\"&gt;\n"
;;        "&lt;meta name=\"viewport\" content=\"initial-scale=1,width=device-width,minimum-scale=1\"&gt;\n"
;;        "&lt;link href=\"../readtheorg.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n"
;;        "&lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css\" integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\" crossorigin=\"anonymous\" /&gt;\n"
;;        "&lt;script src=\"static/lightbox.js\"&gt;&lt;/script&gt;\n"
;;        "&lt;script src=\"static/auto-render.min.js\"&gt;&lt;/script&gt;\n"
;;        "&lt;link rel=\"icon\" href=\"static/ag.ico\"&gt;\n"
;;        "&lt;/head&gt;\n"
;;        ))

(setq org-html-preamble
      (concat
       "&lt;body&gt;\n"
       "
&lt;!-- Google Tag Manager (noscript) --&gt;
    &lt;noscript&gt;&lt;iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-MC4ZQHP\"
                      height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"&gt;&lt;/iframe&gt;&lt;/noscript&gt;
    &lt;!-- End Google Tag Manager (noscript) --&gt;
    &lt;nav class=\"text-center navbar navbar-expand-lg navbar-light bg-light\"&gt;
            &lt;button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"&gt;
                &lt;span class=\"navbar-toggler-icon\"&gt;&lt;/span&gt;
            &lt;/button&gt;
            &lt;div style=\"justify-content:center\" class=\"collapse navbar-collapse \" id=\"navbarNav\"&gt;
                &lt;ul class=\"navbar-nav\"&gt;
                    &lt;li class=\"nav-item\"&gt;
                        &lt;a class=\"nav-link\" href=\"https://arvydas.dev/codeacademy/\"&gt;Home &lt;span class=\"sr-only\"&gt;(current)&lt;/span&gt;&lt;/a&gt;
                    &lt;/li&gt;
                    &lt;li class=\"nav-item\"&gt;
                        &lt;a class=\"nav-link\" href=\"https://arvydas.dev/codeacademy/html_css/index.html\"&gt;HTML/CSS&lt;/a&gt;
                    &lt;/li&gt;
                    &lt;li class=\"nav-item\"&gt;
                        &lt;a class=\"nav-link\" href=\"https://arvydas.dev/codeacademy/javascript/index.html\"&gt;JavaScript&lt;/a&gt;
                    &lt;/li&gt;
                    &lt;li class=\"nav-item\"&gt;
                        &lt;a class=\"nav-link \" href=\"https://arvydas.dev/codeacademy/python/index.html\"&gt;Python&lt;/a&gt;
                    &lt;/li&gt;
                    &lt;li class=\"nav-item\"&gt;
                        &lt;a class=\"nav-link active \" href=\"https://arvydas.dev/codeacademy/databases/index.html\"&gt;Databases&lt;/a&gt;
                    &lt;/li&gt;
                    &lt;li class=\"nav-item\"&gt;
                        &lt;a class=\"nav-link \" href=\"https://arvydas.dev/codeacademy/flask/index.html\"&gt;Flask&lt;/a&gt;
                    &lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
    &lt;/nav&gt;"
       ))

(setq org-html-postamble
      (concat
       "&lt;!-- bootstrap scripts --&gt;\n"
       "&lt;script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\"\n"
       "        integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\"\n"
       "        crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n"
       "&lt;script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.14.7/dist/umd/popper.min.js\"\n"
       "        integrity=\"sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1\"\n"
       "        crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n"
       "&lt;script src=\"https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/js/bootstrap.min.js\"\n"
       "        integrity=\"sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM\"\n"
       "        crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n"
       "&lt;button onclick=\"topFunction()\" id=\"myBtn\" title=\"Go to top\"&gt;Top&lt;/button&gt;\n"
       "&lt;script src=\"../scripts.js\"&gt;&lt;/script&gt;\n"
       "&lt;/body&gt;\n"
       "&lt;/html&gt;\n"
       ))

</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-org16cee2a" class="outline-2">
<h2 id="org16cee2a"><span class="section-number-2">4.</span> Limitations</h2>
<div class="outline-text-2" id="text-4">
<ul class="org-ul">
<li>no tags</li>
<li>exports in the same folder</li>
<li>if multiple files have changes - run the export for multiple files. too much
hassle.</li>
</ul>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> <a href="https://arvydasg.github.io/devnotes/html/tag-websites.html">websites</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[websites]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231212T102719--blog-with-built-in-org-export__emacs_websites.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231212T102719--blog-with-built-in-org-export__emacs_websites.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[introduce yourself to git]]></title>
  <description><![CDATA[
<p>
When on new system, you might get such message when trying to perform a
push/pull git command:
</p>

<blockquote>
<p>
Author identity unknown
</p>

<p>
Please tell me who you are.
</p>

<p>
Run
</p>

<p>
git config &#x2013;global user.email "you@example.com"
</p>

<p>
git config &#x2013;global user.name "Your Name"
</p>
</blockquote>

<p>
In my case that would be:
</p>

<div class="org-src-container">
<pre class="src src-bash">git config --global user.email "azegaspa@gmail.com"
git config --global user.name "arvydasg"
</pre>
</div>

<p>
You will get prompted for a password.
</p>

<p>
There are multiple ways to get that password:
</p>
<ul class="org-ul">
<li>write your git password manually each time</li>
<li><a href="20231214T060637--authenticate-to-git-with-personal-access-token__git.html">authenticate with personal access token</a></li>
<li><a href="20231214T060558--authenticate-to-git-with-ssh__git_ssh.html">authenticate with ssh</a></li>
<li><a href="20231214T061312--authenticate-to-git-with-gpg-key__git_gpg.html">authenticate with gpg</a></li>
</ul>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-git.html">git</a> </div>]]></description>
  <category><![CDATA[git]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231211T161252--introduce-yourself-to-git__git.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231211T161252--introduce-yourself-to-git__git.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[first nixos installation]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgb4d7adf">1. <span class="todo TODO">TODO</span> Why NixOS</a></li>
<li><a href="#org24073b9">2. Why NixOS by others</a></li>
<li><a href="#orgb210682">3. Documentation</a></li>
<li><a href="#org57e4986">4. Installation on WSL</a></li>
<li><a href="#org856eb17">5. Configure the installation over emacs</a></li>
<li><a href="#org3703ea3">6. Using your own custom nixos configuration file</a></li>
<li><a href="#org9a91acb">7. Setting up git</a></li>
</ul>
</div>
</nav>

<div id="outline-container-orgb4d7adf" class="outline-2">
<h2 id="orgb4d7adf"><span class="section-number-2">1.</span> <span class="todo TODO">TODO</span> Why NixOS</h2>
<div class="outline-text-2" id="text-1">
<p>
AFTER you reinstall your computer - to install the DEV environment, all you
have to take with you is <code>/etc/nixos/configuration.nix</code> file, everything is
described in it. Amazing!
</p>

<p>
Avoid long reinstall &amp; config process
</p>
</div>
</div>

<div id="outline-container-org24073b9" class="outline-2">
<h2 id="org24073b9"><span class="section-number-2">2.</span> Why NixOS by others</h2>
<div class="outline-text-2" id="text-2">
<ul class="org-ul">
<li><a href="https://github.com/hlissner/dotfiles">https://github.com/hlissner/dotfiles</a></li>
<li><a href="https://github.com/terlar/nix-config">https://github.com/terlar/nix-config</a></li>
</ul>
</div>
</div>

<div id="outline-container-orgb210682" class="outline-2">
<h2 id="orgb210682"><span class="section-number-2">3.</span> Documentation</h2>
<div class="outline-text-2" id="text-3">
<ul class="org-ul">
<li>nixos github repo - <a href="https://github.com/nix-community/NixOS-WSL">https://github.com/nix-community/NixOS-WSL</a></li>
<li>nixos manual - <a href="https://nixos.org/manual/nix/stable/">https://nixos.org/manual/nix/stable/</a></li>
</ul>
</div>
</div>

<div id="outline-container-org57e4986" class="outline-2">
<h2 id="org57e4986"><span class="section-number-2">4.</span> Installation on WSL</h2>
<div class="outline-text-2" id="text-4">
<p>
Steps described here:
</p>

<p>
<a href="https://github.com/nix-community/NixOS-WSL">https://github.com/nix-community/NixOS-WSL</a>
</p>

<p>
But basically download nixos-wsl.tar.gz into your windows /Download folder
</p>

<p>
Then in CMD run(while in /Downloads folder):
</p>
<div class="org-src-container">
<pre class="src src-bash">wsl --import NixOS .\NixOS\ nixos-wsl.tar.gz --version 2
</pre>
</div>

<p>
check if it was really installed:
</p>
<div class="org-src-container">
<pre class="src src-bash">wsl -l -v
</pre>
</div>

<p>
You should see NixOS listed. Now we can run nixos:
</p>
<div class="org-src-container">
<pre class="src src-bash">wsl -d NixOS
</pre>
</div>

<p>
After the initial installation, you need to update your channels once, to be
able to use <code>nixos-rebuild</code>:
</p>
<div class="org-src-container">
<pre class="src src-bash">sudo nix-channel --add https://nixos.org/channels/nixos-23.11 nixos
sudo nix-channel --update
</pre>
</div>
</div>
</div>

<div id="outline-container-org856eb17" class="outline-2">
<h2 id="org856eb17"><span class="section-number-2">5.</span> Configure the installation over emacs</h2>
<div class="outline-text-2" id="text-5">
<p>
Enter nix-shell to use emacs(it does not get installed on the system, just
<a href="https://nix.dev/tutorials/first-steps/ad-hoc-shell-environments">TEMPORARILY</a> FROM NIXOS CACHE?). So I can then modify the
<code>/etc/nixos/configuration.nix</code> file.
</p>
<div class="org-src-container">
<pre class="src src-bash">nix-shell -p emacs29
</pre>
</div>

<p>
Then let's run emacs in nix-shell(run with sudo)
</p>
<div class="org-src-container">
<pre class="src src-bash">sudo emacs
</pre>
</div>

<p>
Ok now you are in emacs, but in nix-shell. If we turn off nixos now, when we
launch it again, emacs will not be available. Only after you run <code>nix-shell -p
emacs</code>. Let's install emacs permanetely:
</p>
<div class="org-src-container">
<pre class="src src-bash">sudo emacs /etc/nixos/configuration.nix
</pre>
</div>

<p>
add these lines:
</p>
<div class="org-src-container">
<pre class="src src-nix">environment.systemPackages = with pkgs; [
  emacs29
  git
];
</pre>
</div>

<p>
we Install emacs29 because of <a href="20231125T220943--seq-keep-error-message-in-emacs__emacs_magit.html">seq error message</a>.
</p>

<p>
after you do that, <code>C-d</code> to go back to nixos@nixos(out of nix-shell) and BUILD
the nixos with the new changes(emacs installation).
</p>
<div class="org-src-container">
<pre class="src src-bash">sudo nixos-rebuild switch
</pre>
</div>

<p>
After this runs, you should be able to use Emacs and use git!
</p>

<p>
Clone the dotfiles repo:
</p>
<div class="org-src-container">
<pre class="src src-bash">mkdir ~/GIT
cd ~/GIT
git clone https://github.com/arvydasg/dotfiles
ln -s GIT/dotfiles/.emacs.d/ ~/.emacs.d
cd ~/.emacs.d
git update-index --assume-unchanged init.el
</pre>
</div>

<p>
Try to launch emacs for all the packages to be installed.
</p>
</div>
</div>

<div id="outline-container-org3703ea3" class="outline-2">
<h2 id="org3703ea3"><span class="section-number-2">6.</span> Using your own custom nixos configuration file</h2>
<div class="outline-text-2" id="text-6">
<p>
It suchs to not be able to edit the <code>/etc/nixos/configuration.nix</code> file over
emacs as nixos default user. I want this file to not be owned by root, but bu
nixos user. So what we will do is we will:
</p>

<div class="org-src-container">
<pre class="src src-bash"># delete current nixos directory
sudo rm -rf /etc/nixos
# put our config folder instead of the default one
sudo ln -s ~/GIT/dotfiles/nixos/ /etc/nixos
</pre>
</div>

<p>
You are done. Should be able to edit <code>configuration.nix</code> file now.
</p>
</div>
</div>

<div id="outline-container-org9a91acb" class="outline-2">
<h2 id="org9a91acb"><span class="section-number-2">7.</span> Setting up git</h2>
<div class="outline-text-2" id="text-7">
<p>
First try <a href="20231211T161252--introduce-yourself-to-git__git.html">this</a>, then one of these:
</p>

<ul class="org-ul">
<li><a href="20231214T060637--authenticate-to-git-with-personal-access-token__git.html">authenticate with personal access token</a></li>
<li><a href="20231214T060558--authenticate-to-git-with-ssh__git_ssh.html">authenticate with ssh</a></li>
<li><a href="20231214T061312--authenticate-to-git-with-gpg-key__git_gpg.html">authenticate with gpg</a></li>
</ul>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-nixos.html">nixos</a> </div>]]></description>
  <category><![CDATA[nixos]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231211T151427--first-nixos-installation__nixos.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231211T151427--first-nixos-installation__nixos.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[wsl clock is out of sync with windows]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org5f737a6">1. The problem</a></li>
<li><a href="#org10358d3">2. Possible solution</a></li>
<li><a href="#orgb12cd33">3. Solution that works best for me now</a></li>
</ul>
</div>
</nav>

<div id="outline-container-org5f737a6" class="outline-2">
<h2 id="org5f737a6"><span class="section-number-2">1.</span> The problem</h2>
<div class="outline-text-2" id="text-1">
<p>
Having this problem -
<a href="https://stackoverflow.com/questions/65086856/wsl2-clock-is-out-of-sync-with-windows">https://stackoverflow.com/questions/65086856/wsl2-clock-is-out-of-sync-with-windows</a>
</p>

<p>
run this in powershell to confirm it:
</p>

<div class="org-src-container">
<pre class="src src-bash">Get-Date; wsl date
</pre>
</div>

<p>
You will notice two different times. They should be the same.
</p>
</div>
</div>

<div id="outline-container-org10358d3" class="outline-2">
<h2 id="org10358d3"><span class="section-number-2">2.</span> Possible solution</h2>
<div class="outline-text-2" id="text-2">
<p>
Solution is to run <code>sudo hwclock -s</code> command. It will sync the time. For that
moment. But time will shift again when I put the laptop to sleep.
</p>

<p>
I don want to run the command manually each time. I will make a script that
runs this command and put it in <code>.bashrc</code> so it automatically runs the script
each time I launch wsl. Should be enough?
</p>

<p>
<span class="timestamp-wrapper"><span class="timestamp">[2023-12-10 Sun] </span></span> sudo hwclock -s is not an option.. it does not always work
when I run it.
</p>
</div>
</div>

<div id="outline-container-orgb12cd33" class="outline-2">
<h2 id="orgb12cd33"><span class="section-number-2">3.</span> Solution that works best for me now</h2>
<div class="outline-text-2" id="text-3">
<p>
<a href="https://github.com/microsoft/WSL/issues/8204#issuecomment-1338334154">https://github.com/microsoft/WSL/issues/8204#issuecomment-1338334154</a>
</p>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-windows.html">windows</a> <a href="https://arvydasg.github.io/devnotes/html/tag-wsl.html">wsl</a> </div>]]></description>
  <category><![CDATA[windows]]></category>
  <category><![CDATA[wsl]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231209T200922--wsl-clock-is-out-of-sync-with-windows__windows_wsl.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231209T200922--wsl-clock-is-out-of-sync-with-windows__windows_wsl.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[perspective and denote conflict]]></title>
  <description><![CDATA[
<p>
I just figured out <code>perspective-mode</code> and how cool is it, I can have a similar
behavior like tmux or default window as window management.
</p>

<p>
But the problem is when I create perspective frames and in those frames there
is at least one denote file. That frame does not get saved. Why? Because denote
purposefully by default renames it's buffers not to contain all the gibberish
like date when it was created, tag names and so on with this function -
<code>denote-rename-buffer-mode</code>.
</p>

<p>
Instead of such filename:
</p>

<ul class="org-ul">
<li>20231209T181842&#x2013;perspective-and-denote-conflict_<sub>emacs.org</sub></li>
</ul>

<p>
it renames it to(removes the file extension, tags, date):
</p>

<ul class="org-ul">
<li>perspective and denote conflict</li>
</ul>

<p>
And when you save in perspective the name of the buffer, it gets saved as this
short version which AFTER we try to open the saved perspective - it does not
find such filename, because it simply does not exist.
</p>

<p>
Nice I am happy that I could figure this out.
</p>

<p>
Let's try to change that variable and see if it helps.
</p>

<p>
Denote docs - <a href="https://protesilaos.com/emacs/denote#h:3ca4db16-8f26-4d7d-b748-bac48ae32d69">10. Automatically rename Denote buffers</a>
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(denote-rename-buffer-mode -1)
</pre>
</div>

<p>
It did help!!! I am a magician!!
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231209T181842--perspective-and-denote-conflict__emacs.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231209T181842--perspective-and-denote-conflict__emacs.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[freshsetup]]></title>
  <description><![CDATA[
<p>
After creating a new <a href="20231209T080431--moving-emacsd-into-dotfiles-repo__emacs.html">dotfiles repo</a> - I realized there is a need to set up
everything automatically on the new machine IF the user so desires.
</p>

<p>
For that I have created a script called "freshsetup.sh" in dotfiles directory.
When it is launched, it does everything I need. TODO write a bit about
freshsetup ir ar jis vapse needed, since using nix now.
</p>

<p>
Everyting regarding <code>freshsetup</code> topic(tag):
</p>

<ul class="org-ul">
<li><a href="20231126T012052--make-denote-faster-on-wsl__emacs_rsync_scripting_wsl.html">Make denote faster on wsl</a></li>
<li><a href="20231130T065309--fetch-and-pull-changes-automatically__git_wsl.html">fetch and pull automatically</a></li>
<li><a href="20231209T200922--wsl-clock-is-out-of-sync-with-windows__windows_wsl.html">wsl clock is out of sync</a></li>
</ul>

<p>
All of the steps above are described for when using an Ubuntu distro on wsl on
windows. But If I am using nixos&#x2026; stuff will change. :) More on that later.
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231209T093750--freshsetup__emacs.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231209T093750--freshsetup__emacs.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[moving emacsd into dotfiles repo]]></title>
  <description><![CDATA[
<p>
So today <span class="timestamp-wrapper"><span class="timestamp">[2023-12-09 Sat] </span></span> is a morning for configs.
</p>

<p>
Shell is not working properly(wrong time in wsl). I use tmux sometimes, I use
fish now(config will come also probably), I use vim sometimes, I want my
.bashrc file to look certain way&#x2026; many config files and they are now all over
the place on different machines.
</p>

<p>
I need to have one repo for this.
</p>

<p>
What I did, because I did not want to lose the <code>.emacs.d</code> version history is
renamed that repo to <code>dotfiles</code>. Inside of that dotfiles directory I have
created .emacs.d folder content. I then git clone that folder into any location
on my machine and then link the .emacd.d folder to that git folder like such:
</p>

<div class="org-src-container">
<pre class="src src-bash">cd
# source destination(your wanted new location)
ln -s GIT/dotfiles/.emacs.d/ .emacs.d
</pre>
</div>

<p>
and now when I launch emacs from anywhere inside my wsl, it looks into
<code>GIT/dotfiles/.emacs.d/</code> for my .emacs.d config files. Great.
</p>

<p>
Now in that <code>dotfiles</code> folder I can start putting other config files.
</p>

<p>
<span class="timestamp-wrapper"><span class="timestamp">[2023-12-09 Sat 09:40] </span></span> I have also created a (new machine setup)TODO file in
dotfiles folder which will automatically allow you to configure the new
machine. Great! xoxo
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231209T080431--moving-emacsd-into-dotfiles-repo__emacs.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231209T080431--moving-emacsd-into-dotfiles-repo__emacs.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[django best practices]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org399d413">1. Instead of /admin change to smth else URL Django</a></li>
<li><a href="#orgea0ac27">2. Use environment variables</a></li>
<li><a href="#orgfbc404e">3. Use postgres db</a></li>
<li><a href="#org66c0fbe">4. Use two different settings files</a></li>
<li><a href="#orgd16165f">5. Expanding user model to store more user information</a></li>
<li><a href="#orgbaf81e2">6. Update django every major version once every 9 months</a></li>
</ul>
</div>
</nav>
<p>
Here I will write the tips that I found and that I use when building a Django
project.
</p>

<div id="outline-container-org399d413" class="outline-2">
<h2 id="org399d413"><span class="section-number-2">1.</span> Instead of /admin change to smth else URL Django</h2>
<div class="outline-text-2" id="text-1">
<p>
For security. Everyone knows that if its a django project, it will have an
admin page
</p>
</div>
</div>

<div id="outline-container-orgea0ac27" class="outline-2">
<h2 id="orgea0ac27"><span class="section-number-2">2.</span> Use environment variables</h2>
<div class="outline-text-2" id="text-2">
<ul class="org-ul">
<li>for secret key</li>
<li>for database name/location</li>
<li>api keys</li>
<li>other things if needed</li>
</ul>
</div>
</div>

<div id="outline-container-orgfbc404e" class="outline-2">
<h2 id="orgfbc404e"><span class="section-number-2">3.</span> Use postgres db</h2>
<div class="outline-text-2" id="text-3">
<p>
Kind of default ageed db to use with Django
</p>
</div>
</div>

<div id="outline-container-org66c0fbe" class="outline-2">
<h2 id="org66c0fbe"><span class="section-number-2">4.</span> Use two different settings files</h2>
<div class="outline-text-2" id="text-4">
<p>
One for prod another for acc(test) environment
</p>

<p>
Like described in here TODO split django settings into multiple files(TODO - add
from notes)
</p>
</div>
</div>

<div id="outline-container-orgd16165f" class="outline-2">
<h2 id="orgd16165f"><span class="section-number-2">5.</span> Expanding user model to store more user information</h2>
<div class="outline-text-2" id="text-5">
<p>
As described in my other post <a href="20231128T132201--expanding-user-model__django_sql.html">here</a>.
</p>
</div>
</div>

<div id="outline-container-orgbaf81e2" class="outline-2">
<h2 id="orgbaf81e2"><span class="section-number-2">6.</span> Update django every major version once every 9 months</h2>
<div class="outline-text-2" id="text-6">
<p>
Python -wd runserver depreciation warnings
</p>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-django.html">django</a> <a href="https://arvydasg.github.io/devnotes/html/tag-python.html">python</a> </div>]]></description>
  <category><![CDATA[django]]></category>
  <category><![CDATA[python]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231207T204304--django-best-practices__django_python.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231207T204304--django-best-practices__django_python.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[seb nixos installation]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgddf1777">1. <span class="todo TODO">TODO</span> do smth about this</a></li>
</ul>
</div>
</nav>

<div id="outline-container-orgddf1777" class="outline-2">
<h2 id="orgddf1777"><span class="section-number-2">1.</span> <span class="todo TODO">TODO</span> do smth about this</h2>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-linux.html">linux</a> <a href="https://arvydasg.github.io/devnotes/html/tag-nixos.html">nixos</a> <a href="https://arvydasg.github.io/devnotes/html/tag-wsl.html">wsl</a> </div>]]></description>
  <category><![CDATA[linux]]></category>
  <category><![CDATA[nixos]]></category>
  <category><![CDATA[wsl]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231130T203401--seb-nixos-installation__linux_nixos_nonpost_wsl.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231130T203401--seb-nixos-installation__linux_nixos_nonpost_wsl.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[fetch and pull changes automatically]]></title>
  <description><![CDATA[
<p>
This is mainly important when you are working ont he same repo on two different
machines. You make changes on one, then login to another one - you must always
rememebr to pull those changes, otherwise if you make your own - you will get
into merge conflicst. And as of <span class="timestamp-wrapper"><span class="timestamp">[2023-12-14 Thu] </span></span> I am not so good at solving
those. So I try to avoid them as much as possible.
</p>

<p>
This is the reason I am creating this script that will automatically run <code>git
fetch &amp;&amp; git pull</code> that command for me whenever I turn on the WSL.
</p>

<p>
The script example:
</p>

<div class="org-src-container">
<pre class="src src-bash">#!/bin/bash
REPO_DIR="$HOME/GIT/notes/"

function auto-fetch-pull() {
    if [ -d "$1" ]; then
        cd "$1" || exit
        echo "Fetching latest changes..."
        git fetch
        echo "Pulling changes into your branch..."
        git pull
    else
        echo "Directory '$1' not found."
    fi
}

auto-fetch-pull "$REPO_DIR"
</pre>
</div>

<p>
Ensure the script has execute permissions:
</p>
<div class="org-src-container">
<pre class="src src-bash">chmod +x auto_fetch_pull.sh
</pre>
</div>

<p>
Then, try running the script:
</p>
<div class="org-src-container">
<pre class="src src-bash">./auto_fetch_pull.sh
</pre>
</div>

<p>
Add the script execution to your .bashrc
</p>
<div class="org-src-container">
<pre class="src src-bash">echo '~/.emacs.d/MISC/auto_fetch_pull.sh' &gt;&gt; ~/.bashrc
</pre>
</div>

<p>
Each time WSL (or any other linux distribution launches) launches, one of the
thing it does that concern us in this case, is it runs <code>source .bashrc</code>.
Basically evaluates and applies everything that it sees in <code>.bashrc</code> file. And
since we have conveniently placed our script into .bashrc with the last
command - it will run the script each time WSL is launched.
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-git.html">git</a> <a href="https://arvydasg.github.io/devnotes/html/tag-wsl.html">wsl</a> </div>]]></description>
  <category><![CDATA[git]]></category>
  <category><![CDATA[wsl]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231130T065309--fetch-and-pull-changes-automatically__git_wsl.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231130T065309--fetch-and-pull-changes-automatically__git_wsl.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[dockerfile example of emacs installation]]></title>
  <description><![CDATA[
<p>
PERFECT DOCS/REFERECE -
<a href="https://kapeli.com/cheat_sheets/Dockerfile.docset/Contents/Resources/Documents/index">https://kapeli.com/cheat_sheets/Dockerfile.docset/Contents/Resources/Documents/index</a>
</p>

<p>
Dockerfile best practices -
<a href="https://docs.docker.com/develop/develop-images/dockerfile_best-practices/">https://docs.docker.com/develop/develop-images/dockerfile_best-practices/</a>
</p>

<p>
Dockerfile example used to generate emacs image:
</p>

<div class="org-src-container">
<pre class="src src-bash"># The emacs installation phase itself takes aroun 7 minutes to complete
# for the first time after we change something in the initial or second
# stage - everything under them will have to be rerun... meaning another
# 7 minutes of your life. Not cool.

# so what I found is that you can split the Dockerfile into stages. I
# will put the steps that might change frequently towards the end of
# the Dockerfile to maximize caching. By separating the stages in this
# manner, Docker will reuse the intermediate images created in each
# stage, utilizing the cache for the unchanged layers. When changes
# occur, only the steps AFTER THE MODIFICATION will be re-executed.

# -----------------------------------------------------------
# INITIAL STAGE: Installing essential packages and tools
FROM ubuntu:latest AS base

RUN apt update &amp;&amp; apt upgrade -y \
    &amp;&amp; apt install sudo make wget -y

# -----------------------------------------------------------
# SECOND STAGE: Installing Git and cloning the repository
FROM base AS gitclone

RUN apt-get install -y git \
    &amp;&amp; git clone https://github.com/arvydasg/dotfiles.git /root/dotfiles

# -----------------------------------------------------------
# THIRD STAGE: Emacs installation
FROM gitclone AS emacs

WORKDIR /root
COPY compile-install-emacs.sh compile-install-emacs.sh
RUN chmod +x compile-install-emacs.sh
RUN sh compile-install-emacs.sh

# -----------------------------------------------------------
# FOURTH STAGE: Random stuff
# since emacs has been installed(heaviest process), we can do any
# random installs and actions here now, so only the steps under would
# be rerun and not the whole container including the emacs compilation
# stage(Third stage)
RUN apt install vim htop tmux -y

# -----------------------------------------------------------
# FINAL STAGE
FROM emacs AS final

ENTRYPOINT ["emacs"]
</pre>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-docker.html">docker</a> <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> </div>]]></description>
  <category><![CDATA[docker]]></category>
  <category><![CDATA[emacs]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231128T175614--dockerfile-example-of-emacs-installation__docker_emacs.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231128T175614--dockerfile-example-of-emacs-installation__docker_emacs.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[docker commands]]></title>
  <description><![CDATA[
<div class="org-src-container">
<pre class="src src-bash"># --------------------------------------------------------------------
# STATS
# active and running containers
docker ps
# previously ran images, you can start them and connect to them again
docker ps -a
# docker stats
docker stats
# list docker images available
docker images

# --------------------------------------------------------------------
# BUILD/RUN
# build an image with Dockerfile in the current dir
docker build .

# run the docker image
docker run &lt;image_id/name&gt;

# Run the container with --rm flag to automatically remove the container
# that was created when the container EXITS. Good for testing.
docker run --rm b3e0903d079d

# something
docker run -rm -it b3e0903d079d /bin/bash

# --------------------------------------------------------------------
# CONNECT TO THE DOCKER
# run in interactive mode, connect to it
docker run -ti ubuntu /bin/bash
docker run -ti ubuntu /bin/bash -c "apt update &amp;&amp; apt upgrade -y"

# run in interactive mode, connect to it, will be deleted after
# disconnect
docker run -ti --rm ubuntu /bin/bash

# attach to already created container!!!!
docker attach &lt;id&gt;

# --------------------------------------------------------------------
# CLEANUP

# remove docker containers from ps -a
docker rm -f &lt;id&gt;
# remove docker image
docker rmi &lt;image_name&gt;
# delete or remove all docker data like containers, images and volumes
# delete all containers
docker rm --force `docker ps -qa`
# delte all images
docker rmi --force `docker images -aq`
# idk prune smth
docker volume prune

# --------------------------------------------------------------------
# SAVE

# save an image of container. A commit is only necessary after each
# run if you want to make a snapshot there for future use, otherwise
# the container itself will stick around for you to keep using.
docker commit &lt;id&gt; new_name
</pre>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-docker.html">docker</a> </div>]]></description>
  <category><![CDATA[docker]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231128T172943--docker-commands__docker.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231128T172943--docker-commands__docker.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[wsl commands]]></title>
  <description><![CDATA[
<p>
<a href="https://learn.microsoft.com/en-us/windows/wsl/basic-commands">https://learn.microsoft.com/en-us/windows/wsl/basic-commands</a>
</p>

<div class="org-src-container">
<pre class="src src-bash"># list available linux distros
wsl --list --online
# install a default distro(which is ubuntu)
wsl --install
# View the list of distros and their current state:
wsl.exe -l -v
# Shutdown everything:
wsl.exe --shutdown
# Terminate a specific distro:
wsl.exe -t &lt;DistroName&gt;
# Boot up the default distro (marked with *):
wsl.exe
# Boot up a specific distro:
wsl.exe -d &lt;DistroName&gt;
# update wsl
wsl --update
# check wsl status
wsl --status
# check wsl version
wsl --version
# wsl help
wsl --help
</pre>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-wsl.html">wsl</a> </div>]]></description>
  <category><![CDATA[wsl]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231128T172125--wsl-commands__wsl.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231128T172125--wsl-commands__wsl.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[install linux distro over wsl]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgc087fb0">1. Installation instructions</a></li>
<li><a href="#org79cf288">2. Setup terminal</a></li>
</ul>
</div>
</nav>
<p>
Ok so at <span class="timestamp-wrapper"><span class="timestamp">&lt;2023-11-26 Sun&gt; </span></span> I was very much getting to know to wsl and how to
install it properly.
</p>

<p>
First reason - I finally decided to use emacs more so I could use denote TODO -
add a link. For that of course I did not want to override my already custom
emacs config and notes file structure, wanted to create a NEW WSL UBUNTU
instance where I could experiment.
</p>

<p>
Second reason - I was <a href="20231128T164359--wsl-glitches-in-gui-applications__wsl.html">getting gliches in my wsl</a>.
</p>

<p>
So while I was trying to solve the first thing, I found out about the second
thing and that led me to all this documentation below.
</p>

<div id="outline-container-orgc087fb0" class="outline-2">
<h2 id="orgc087fb0"><span class="section-number-2">1.</span> Installation instructions</h2>
<div class="outline-text-2" id="text-1">
<p>
After you have <a href="20231214T142532--enable-wsl-on-windows__windows_wsl.html">enabled wsl on windows</a>, you can do these steps:
</p>

<p>
in cmd/powershell run:
</p>

<div class="org-src-container">
<pre class="src src-shell"># see all repos available
wsl --list
# install the default repo(or any other)
wsl --install ubuntu
# install a custom repo version(can have multiple different versions installed)
wsl --install -d Ubuntu-20.04
</pre>
</div>

<p>
After your distro is installed, login to it:
</p>

<div class="org-src-container">
<pre class="src src-bash"># View the list of distros and their current state:
wsl.exe -l -v
 # Boot up a specific distro:
wsl.exe -d &lt;DistroName&gt;
</pre>
</div>

<p>
And confirm the version number:
</p>
<div class="org-src-container">
<pre class="src src-bash">lsb_release -a
</pre>
</div>

<p>
Now check "add remove programs" if your wsl instance is listed there.
</p>
</div>
</div>

<div id="outline-container-org79cf288" class="outline-2">
<h2 id="org79cf288"><span class="section-number-2">2.</span> Setup terminal</h2>
<div class="outline-text-2" id="text-2">
<p>
Setup terminal to be ubuntu. So when you open cmd you would also see
the ubuntu terminal.
</p>

<p>
After the installation ubuntu wsl make ubuntu profile in cmd -&gt; settings -&gt;
profiles - &gt; new profile -&gt; duplicate ubuntu profile
</p>

<p>
to install emacs now, follow - TODO
</p>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-windows.html">windows</a> <a href="https://arvydasg.github.io/devnotes/html/tag-wsl.html">wsl</a> </div>]]></description>
  <category><![CDATA[windows]]></category>
  <category><![CDATA[wsl]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231128T165324--install-linux-distro-over-wsl__windows_wsl.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231128T165324--install-linux-distro-over-wsl__windows_wsl.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[wsl glitches in gui applications]]></title>
  <description><![CDATA[
<p>
Registered a bug in WSLg - <a href="https://github.com/microsoft/wslg/issues/1148">https://github.com/microsoft/wslg/issues/1148</a>
</p>

<p>
Some more notes below here. From when I was debugging this issue.
</p>

<hr>

<p>
Or here with gui - <a href="https://web02.gonzaga.edu/faculty/talarico/vlsi/wsl.html">https://web02.gonzaga.edu/faculty/talarico/vlsi/wsl.html</a>
</p>

<p>
po visu situ zingsniu install wsl 2 kernel thing from here - <a href="https://learn.microsoft.com/en-us/windows/wsl/install-manual#step-4---download-the-linux-kernel-update-package">https://learn.microsoft.com/en-us/windows/wsl/install-manual#step-4---download-the-linux-kernel-update-package</a>
</p>

<p>
first do the wsl kernel update only then isntall wsl , since we have installed wsl 2 - needed for gui apps
</p>

<p>
wsl &#x2013;update
wsl &#x2013;shutdown
wsl &#x2013;install
wsl.exe &#x2013;list &#x2013;online to choose a distro
</p>

<p>
Linux GUI apps are only supported with WSL 2 and will not work with a Linux
distribution configured for WSL 1. Read about how to change your distribution
from WSL 1 to WSL 2.
</p>

<p>
sudo apt-get update &amp;&amp; sudo apt-get upgrade -y
</p>

<p>
<a href="https://learn.microsoft.com/en-us/windows/wsl/install-manual#step-4---download-the-linux-kernel-update-package">https://learn.microsoft.com/en-us/windows/wsl/install-manual#step-4---download-the-linux-kernel-update-package</a>
<a href="https://web02.gonzaga.edu/faculty/talarico/vlsi/wsl.html">https://web02.gonzaga.edu/faculty/talarico/vlsi/wsl.html</a>
<a href="https://learn.microsoft.com/en-us/windows/wsl/install-manual#step-4---download-the-linux-kernel-update-package">https://learn.microsoft.com/en-us/windows/wsl/install-manual#step-4---download-the-linux-kernel-update-package</a>
<a href="https://learn.microsoft.com/en-us/windows/wsl/tutorials/gui-apps">https://learn.microsoft.com/en-us/windows/wsl/tutorials/gui-apps</a>
<a href="https://superuser.com/questions/1126721/rebooting-ubuntu-on-windows-without-rebooting-windows">https://superuser.com/questions/1126721/rebooting-ubuntu-on-windows-without-rebooting-windows</a>
<a href="https://emacsredux.com/blog/2021/12/19/using-emacs-on-windows-11-with-wsl2/">https://emacsredux.com/blog/2021/12/19/using-emacs-on-windows-11-with-wsl2/</a>
</p>

<p>
research wslg:
</p>

<p>
<a href="https://www.reddit.com/r/bashonubuntuonwindows/comments/wezwhi/bug_with_gui_apps/">https://www.reddit.com/r/bashonubuntuonwindows/comments/wezwhi/bug_with_gui_apps/</a>
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-wsl.html">wsl</a> </div>]]></description>
  <category><![CDATA[wsl]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231128T164359--wsl-glitches-in-gui-applications__wsl.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231128T164359--wsl-glitches-in-gui-applications__wsl.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[consult package benefits]]></title>
  <description><![CDATA[
<p>
Tu juokauji gal. Koks amazing package.. :) Apie ji suzinojau tik 2023.12.
</p>

<p>
Bemegindamas irasti denote radau sita package.
</p>

<p>
Cia intro video -
<a href="https://www.youtube.com/watch?v=HwBHBwYgs2g&amp;ab_channel=EmacsElements">https://www.youtube.com/watch?v=HwBHBwYgs2g&amp;ab_channel=EmacsElements</a>
</p>

<ul class="org-ul">
<li>Galiu paturbinti C-x b, kad rodytu man buffer contenta. Nice.</li>
<li><code>consult-grep</code> - find whateveryouwant in a current PROJECT(git project).</li>
<li><code>consul-man</code> - look for ANYTHING in LINUX MANUAL PAGE. WTF.</li>
<li><code>consult-info</code> - find ANYTHING in your installed packages manuals&#x2026;</li>
<li><code>consult-bookmark</code> - set a bookmark in a location and then easily jump to it
later&#x2026; almost like my org find agenda file.</li>
<li><code>consult-theme</code> - change and try themes on the fly. wtf.</li>
<li><code>consult-flymake</code>???????????????????? Labadiena</li>
<li><code>consult-goto-line</code> - cool</li>
<li><code>consult-outline/consult-org-headings</code> - look through ORG file outlines.
Through all the headings. Thats cool when in a large document! That's like a
table of contents for you.</li>
<li><code>consult-org-agenda</code>??? must try that out</li>
<li><code>consult-project-buffer</code> - look only through opened files in the project.</li>
<li><code>M-s</code> is a big one!</li>
<li><code>M-s e</code> for example shows you all the search functions you previously typed
for. Nice.</li>
<li><code>M-g i</code> - look for functions inside the file!!!</li>
<li><code>C-u M-s g</code> - first specify the directory and then do the search. Great,
works like regular RG.</li>
</ul>

<p>
bookmarks is another cool thing.. can set them and then later jump to them with
c-x b and pressing m then SPACE and you will have a list of bookmarks!!
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231128T145249--consult-package-benefits__emacs.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231128T145249--consult-package-benefits__emacs.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[create a blog with hugo]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org54ae60a">1. commands</a></li>
</ul>
</div>
</nav>
<p>
get started video - <a href="https://www.youtube.com/watch?v=LIFvgrRxdt4&amp;ab_channel=RyanSchachte">https://www.youtube.com/watch?v=LIFvgrRxdt4&amp;ab_channel=RyanSchachte</a>
</p>

<p>
second video - <a href="https://www.youtube.com/watch?v=hjD9jTi_DQ4&amp;t=2225s&amp;ab_channel=EnvatoTuts%2B">https://www.youtube.com/watch?v=hjD9jTi_DQ4&amp;t=2225s&amp;ab_channel=EnvatoTuts%2B</a>
</p>

<div id="outline-container-org54ae60a" class="outline-2">
<h2 id="org54ae60a"><span class="section-number-2">1.</span> commands</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>hugo new site nameofthesite</li>
<li>cd themes git clone theme</li>
<li>change config.toml to config.yml</li>
<li>hugo server - works</li>
<li>hugo new posts/firstpost.md</li>
<li>git submodule add -b master <a href="https://github.com/arvydasg/arvydasg.github.io.git">https://github.com/arvydasg/arvydasg.github.io.git</a>
public (public where file will be stored)</li>
<li>hugo -t hugo-PaperMod</li>
<li>cd public</li>
<li>git remote -v (origin is not what you expected ;) its arvydas.github.io</li>
<li>push public folder and site is live!</li>
</ul>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-hugo.html">hugo</a> <a href="https://arvydasg.github.io/devnotes/html/tag-websites.html">websites</a> </div>]]></description>
  <category><![CDATA[hugo]]></category>
  <category><![CDATA[websites]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231128T133020--create-a-blog-with-hugo__hugo_websites.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231128T133020--create-a-blog-with-hugo__hugo_websites.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[windows keybindings]]></title>
  <description><![CDATA[
<p>
Lots of shortcuts already in my head, but some that are new are:
</p>

<ul class="org-ul">
<li>win + ctrl + t - always on top window</li>
<li>alt + space - look for programs</li>
<li>win + shift + / - ALL SHORTCUTS</li>
<li>win+shift+T - TEXT EXTRACTOR WTF??!!</li>
</ul>

<p>
Install <code>powertoys</code> app in windows for rebinding various keys, especially caps
-&gt; ctrl
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-windows.html">windows</a> </div>]]></description>
  <category><![CDATA[windows]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231128T132920--windows-keybindings__windows.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231128T132920--windows-keybindings__windows.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[emacs bindings]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org11afe67">1. Shortcuts</a>
<ul>
<li><a href="#org09756d1">1.1. Shortcuts</a>
<ul>
<li><a href="#orgc5e8bbc">1.1.1. network</a></li>
<li><a href="#org89883fc">1.1.2. emacs</a></li>
<li><a href="#org2b5afc6">1.1.3. Bindings</a></li>
</ul>
</li>
<li><a href="#org9194a43">1.2. commands emacs</a>
<ul>
<li><a href="#org02ae620">1.2.1. ansi-term copy/paste</a></li>
</ul>
</li>
<li><a href="#orga7e23ee">1.3. Bookmarks emacs</a></li>
</ul>
</li>
</ul>
</div>
</nav>
<p>
OLD document from when I was still trying to write down the useful emacs
shortcuts.
</p>

<p>
Now I know where to look for what I am looking for even if I don't remember
what keybinding it is assigned to :) C-h f basically and M-x.
</p>

<div id="outline-container-org11afe67" class="outline-2">
<h2 id="org11afe67"><span class="section-number-2">1.</span> Shortcuts</h2>
<div class="outline-text-2" id="text-1">
<table>


<colgroup>
<col  class="org-left">

<col  class="org-left">

<col  class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Key Binding</th>
<th scope="col" class="org-left">Function</th>
<th scope="col" class="org-left">Mode</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">p</td>
<td class="org-left">Forward one indentation block</td>
<td class="org-left">Elpy</td>
</tr>

<tr>
<td class="org-left">C-up</td>
<td class="org-left">Backward one indentation block</td>
<td class="org-left">Elpy</td>
</tr>

<tr>
<td class="org-left">C-left</td>
<td class="org-left">Backward one indentation level</td>
<td class="org-left">Elpy</td>
</tr>

<tr>
<td class="org-left">C-right</td>
<td class="org-left">Forward one indentation level</td>
<td class="org-left">Elpy</td>
</tr>

<tr>
<td class="org-left">M-down</td>
<td class="org-left">Move line or region down</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">M-up</td>
<td class="org-left">Move line or region up</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">M-left</td>
<td class="org-left">Move line or indentation block left</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">M-right</td>
<td class="org-left">Move line or indentation block right</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">M-x elpy-set-project-root</td>
<td class="org-left">Set the root directory of the python project</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">C-c C-f</td>
<td class="org-left">Find file in project</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">C-c C-s</td>
<td class="org-left">Regular expression match in project</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">M-TAB</td>
<td class="org-left">Complete current statement</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">M-.</td>
<td class="org-left">Goto defition</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">M-*</td>
<td class="org-left">Return to position from last definition lookup</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">C-c C-z</td>
<td class="org-left">Switch to python shell</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">C-c C-c</td>
<td class="org-left">Send python code to shell (active region or complete buffer)</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">C-c RET</td>
<td class="org-left">Send current line to python shell</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">C-M-x</td>
<td class="org-left">Sends code of current top level function to python shell</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">C-c C-v</td>
<td class="org-left">Syntax check with flake8</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">C-c C-n</td>
<td class="org-left">Next flake8 error</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">C-c C-p</td>
<td class="org-left">Previous flake8 error</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">C-c C-t</td>
<td class="org-left">Start tests</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">C-c C-e</td>
<td class="org-left">Edit all occurrences of the symbol at point at once</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">C-c C-r f</td>
<td class="org-left">Format code using the available formatter</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">C-c C-r i</td>
<td class="org-left">Query for new imports of unresolved symbols, and remove unreferenced imports</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">C-c C-r r</td>
<td class="org-left">Run the Elpy refactoring interface for Python code</td>
<td class="org-left">Elpy</td>
</tr>

<tr>
<td class="org-left">C-u C-c C-x C-i</td>
<td class="org-left">See all recently clocked in tasks</td>
<td class="org-left">Org-clock</td>
</tr>

<tr>
<td class="org-left">M-x Customize group</td>
<td class="org-left">See ALL the configurable lines of a mode/package - GREAT!!!</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">C-c /</td>
<td class="org-left">Org sparse tree - filter org file for TODO entries and such, to exit -</td>
<td class="org-left">Org</td>
</tr>

<tr>
<td class="org-left">org-sort-entries</td>
<td class="org-left">sort entries by TODO keyword</td>
<td class="org-left">Org</td>
</tr>

<tr>
<td class="org-left">run-python</td>
<td class="org-left">can not find module named&#x2026; python error. Run run-python in the buffer</td>
<td class="org-left">elpy</td>
</tr>

<tr>
<td class="org-left">dired-git-info-mode</td>
<td class="org-left">shows the commit history of a directory</td>
<td class="org-left">dired</td>
</tr>

<tr>
<td class="org-left">org-agenda-archives-mode</td>
<td class="org-left">shows all the archived tasks in the agenda.</td>
<td class="org-left">org agenda</td>
</tr>

<tr>
<td class="org-left">c-u m-x shell</td>
<td class="org-left">open another shell instance, give it a name</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">c-c c-d</td>
<td class="org-left">Helpful at point</td>
<td class="org-left">Docs</td>
</tr>

<tr>
<td class="org-left">C-h b</td>
<td class="org-left">all shortcuts in of current buffer modes</td>
<td class="org-left">Docs</td>
</tr>

<tr>
<td class="org-left">M-x where is</td>
<td class="org-left">which key shortcut is bound to</td>
<td class="org-left">Docs</td>
</tr>

<tr>
<td class="org-left">C-h r</td>
<td class="org-left">docs</td>
<td class="org-left">Docs</td>
</tr>

<tr>
<td class="org-left">C-h i</td>
<td class="org-left">info</td>
<td class="org-left">Docs</td>
</tr>

<tr>
<td class="org-left">C-h ?</td>
<td class="org-left">Other + other choose!</td>
<td class="org-left">&#xa0;</td>
</tr>
</tbody>
</table>
</div>

<div id="outline-container-org09756d1" class="outline-3">
<h3 id="org09756d1"><span class="section-number-3">1.1.</span> Shortcuts</h3>
<div class="outline-text-3" id="text-1-1">
<p>
Sasha - <a href="http://emacslife.com/read-lisp-tweak-emacs/beginner-3-make-things-more-convenient.html">http://emacslife.com/read-lisp-tweak-emacs/beginner-3-make-things-more-convenient.html</a>
</p>
</div>
<div id="outline-container-orgc5e8bbc" class="outline-4">
<h4 id="orgc5e8bbc"><span class="section-number-4">1.1.1.</span> network</h4>
<div class="outline-text-4" id="text-1-1-1">
<ul class="org-ul">
<li>traceroute delfi.lt</li>
<li>ipconfig</li>
<li>gpupdate /force</li>
<li>gpresult /r</li>
</ul>
<p>
n- ping
</p>
</div>
</div>
<div id="outline-container-org89883fc" class="outline-4">
<h4 id="org89883fc"><span class="section-number-4">1.1.2.</span> emacs</h4>
<div class="outline-text-4" id="text-1-1-2">
<ol class="org-ol">
<li>M-g j     = Dumb jump</li>
<li>M-%       = Query replace</li>
<li>C-M i     = FLYSPELL step on a word and correct it's
spelling. multiple presses for different words</li>
<li>C-;       = flyspell auto correct previous word</li>
<li>F5        = turn on flyspell mode</li>
<li>C-c C-p I = open buffers OF THE CURRENT PROJECT</li>
<li>M-,       = Go back one step</li>
<li>C-h i     = info about your whole linux system and programs installed</li>
<li>C-h r     = info manual emacs</li>
<li>C-h m     = describe mode</li>
<li>C-h k    = describe key</li>
<li>C-x n s  = narrow down to one headline in org mode</li>
<li>C-x n w  = widden back to all headings</li>
<li>C-x n w  = widen back to normal</li>
<li>C-c u    = undo tree visualize</li>
<li>M-x highlight-regexp = highlights word occurences in the buffer</li>
<li>C-x h    = mark buffer</li>
<li>C-x SPC  = rectangle mode</li>
<li>C-u c-u c-u . = enter current date timestamp - this puts to agenda</li>
<li>C-u C-c . = inactive timestamp with hour and minutes</li>
<li>C-c .    = enter current date timestamp same</li>
<li>C-c !    = enter current date timestamp BUT no agenda entry</li>
<li>C-x ( OR F3    = define macro - do a sequence</li>
<li>C-x ) OR F4    = stop defining</li>
<li>C-x e OR f4    = executes macro</li>
<li>C-x C-k n      = give name to last macro</li>
<li>M-x insert-kbd-macro = extract contents of a macro (useful when
want to put in init file)</li>
<li>M-x apply-macro-to-region-lines = does exactly that</li>
<li>C-SCP x2 = makes a mark</li>
<li>C-x C-SCP = jumps to that mark</li>
<li>C-x r SCP &lt;any&gt; = resgister a key(position)</li>
<li>C-x r j &lt;any&gt; = jump to the key(to that position)</li>
<li>C-c C-w  = refile to enother point in the org document or another file</li>
<li>C-c C-s  = schedule org item</li>
<li>C-c C-d  = set a deadine to org item</li>
<li>C-x C-x  = Move cursor to the other end of selection.</li>
<li>C-a a    = org agenda</li>
<li>C-c c    = capture something (write note and put it somewhere in the template)</li>
<li>C-c C-z  = make a note under sme org heading</li>
<li>C-c a a F = follow up mode. expands the task in agenda view</li>
<li>M-u      = capitalize all letters of a word</li>
<li>m-l      = lowercase all letters of a word</li>
<li>C-x left = previous buffer. Faster than C-x b? maybe. Cia gi winner mode.</li>
<li>C-c C-l  = after selecting text - add link shortcut</li>
<li>C-c C-x e = set effort estimate on an org headline</li>
<li>C-c C-x C-c = see the effort estimate table</li>
<li>C-c C-x C-j = go to clock entry</li>
<li>C-c C-e  = ELPY Edit all occurrences of the symbol at point at once</li>
<li>C-c C-c  = ELPY send REGION to python interactive
interpreter,(atsidarys atskiras buffer, arba gali ji isjungti, tai
graziai apacioje rodys for a short time) ARBA Gali ctrl+enter po
viena eilute</li>
<li>C-c C-d  = ELPY show documentation,</li>
<li>C-c C-z  = ELPY Switch between your script and the interactive shell</li>
<li>M-.      = ELPY go to definition.(or use dumb-jump shortcut M-g g)</li>
<li>C-c n/p  = ELPY move to next, previous error</li>
<li>C-c C-v  = ELPY Syntax check with flake8</li>
<li>C-c C-n  = ELPY Next flake8 error</li>
<li>C-c C-t  = ELPY Start tests</li>
<li>C-c RET  = ELPY (new shortcut) evaluate line</li>
<li>M-x comint-clear-buffer = clears elpy terminal (C-c M-o)</li>
<li>M-x elpy-config  = ELPY config</li>
<li>C-h v kill-ring = Watch your kill ring</li>
<li>C-x o m  = AVY swap windows</li>
<li>M-i      = indent, cool</li>
<li>M-x emacs-lisp-byte -compile = after modifying emacs package file,
run this (while in the opened buffer) to save the changes. Helped
with iedit.</li>
<li>M-x eww  = EWW browser</li>
<li>C-c C-o  = ORG open linka</li>
<li>A        = ORG agenda append agenda view to buffer</li>
<li>o        = ORG agenda delete other windows</li>
<li>f1 v     = DESCRIBE VARIABLE - super useful. can look for all kind
of information. Like directories of plugins and so on&#x2026; try it out.</li>
<li>C-v      = scroll buffer down</li>
<li>M-v      = scroll buffer up</li>
<li>M-! nautilus . = open current dir in nautilus. oh yeah</li>
<li>M-x clone-indirect-buffer = multiple views of same file</li>
<li>M-o      = see council option</li>
<li>M-x flyckeck-list-errors = a list of errors in the buffer</li>
<li>C-c C-p p/d = TREEMACS add/remove project to a workspace</li>
<li>M-x lsp-treemacs-symbols = show the structure of the file</li>
<li>m-x lsp-find-references = show where the function is being used</li>
<li>C-c C-d  = when in python doc = gives documentation of chosen topic</li>
<li>C-c /    = sparse tree (org mode look up for things)</li>
<li>M-x erc-tls = irc.libera.chat IRC chat!</li>
<li>/join #emacs or #systemcrafters = IRC join channel</li>
<li>/part    = IRC leave channel</li>
<li>/quit bye all! = quit server</li>
<li>/reconnect = reconnect to the server?</li>
<li>/list    = IRC list channels</li>
<li>/whois nick = IRC find out whoe the user is!!</li>
<li>/ query nick = IRC write someone a private message!! (new buffer opens
up)</li>
<li>/msg nick Hello there = IRC sends a one time message</li>
<li>/nick newname = IRC change nickname</li>
<li>C-c '    = edit <a href="https://orgmode.org/manual/Editing-Source-Code.html">code block</a> in a separate window (proper
indentation and all)</li>
<li>C-c C-x ; = TIMER start</li>
<li>C-c C-x , = TIMER pause/continue</li>
<li>C-c C-x _ = TIMER stop</li>
<li>C-&gt; = multiple cursors - mark next line like this</li>
<li>C-&lt; = multiple cursors - mark previous line like this</li>
<li>C-c C-&lt; = multiple cursors - mark all like this</li>
<li>M-x customize group - customize some stuff</li>
<li>M-x ielm RET package-archives RET = gives some values out</li>
<li>C-c '   = edit source code buffer (useful when need code
completion when editint a src code in ORG file)</li>
<li>g-o     = DIRED view buffer(or view in another window)</li>
<li>a       = DIRED - cycle through directories and open files (leaves
no traces(open buffers))</li>
<li>R      = DIRED rename file</li>
<li>+      = DIRED create directory</li>
<li>m      = DIRED mark file</li>
<li>u/U    = DIRED un mark file/s</li>
<li>(      = DIRED close/open information</li>
<li>t      = DIRED invert marked file selection</li>
<li>% m    = DIRED mark all files according to your needs fx. .org \.org$</li>
<li>*      = DIRED more options</li>
<li>c      = DIRED copy marked files</li>
<li>D      = DIRED delete marked files</li>
<li>d      = DIRED mark files for deletion</li>
<li>x      = DIRED execute the deletion</li>
<li>M-[    = goto last change(previous)</li>
<li>M-]    = goto last change reverse(next)</li>
<li>C-a C  = configure org agenda (the simple way)</li>
<li>C-'    = cycle through agenda files</li>
<li>F11    = full screen mode</li>
<li>emacs -q test.el foo.org = debug lisp code this way</li>
<li>C-D    = PYTHON mode - PY DOCS</li>
<li><b>buffer name</b> = creates a buffer</li>
<li>M-x highlight-regexp = highlight search results</li>
<li>M-x clone indirect buffer = duplicate same buffer, edit in two places</li>
<li>M-y    = browse kill ring</li>
<li>RET:   = ELFEED view selected entry in a buffer</li>
<li>b:     = ELFEED open selected entries in your browser (browse-url)</li>
<li>y:     = ELFEED copy selected entries URL to the clipboard</li>
<li>r:     = ELFEED mark selected entries as read</li>
<li>u:     = ELFEED mark selected entries as unread</li>
<li>+:     = ELFEED add a specific tag to selected entries</li>
<li>-:     = ELFEED remove a specific tag from selected entries</li>
<li>g:     = ELFEED refresh view of the feed listing</li>
<li>G:     = ELFEED fetch feed updates from the servers</li>
<li>s:     = ELFEED update the search filter (see tags)</li>
<li>c:     = ELFEED clear the search filter</li>
<li>s-F10  = show minimap</li>
<li>C-c n l = ORG-ROAM-buffer-toggle</li>
<li>C-c n f = ORG-ROAM-node-find</li>
<li>C-c n i = ORG-ROAM-node-insert</li>
<li>C-M-i   = ORG-ROAM completion at point</li>
<li>org-id-get-create = ORG-ROAM create an IF for a heading</li>
<li>org-roam-alias-add = ORG-ROAM add another name for a node</li>
<li>C-c n d n = ORG-ROAM-dailies-capture-today</li>
<li>C-c n d d = ORG-ROAM-dailies-goto-today</li>
<li>C-c n d Y = ORG-ROAM-dailies-capture-yesterday</li>
<li>C-c n d T = ORG-ROAM-dailies-capture-tomorrow</li>
<li>C-c n d y = ORG-ROAM-dailies-goto-yesterday</li>
<li>C-c n d t = ORG-ROAM-dailies-goto-tomorrow</li>
<li>C-c n d d = ORG-ROAM-dailies-goto-today</li>
<li>C-c n d v = ORG-ROAM-dailies-capture-date</li>
<li>C-c n d c = ORG-ROAM-dailies-goto-date</li>
<li>C-c n d b = ORG-ROAM-dailies-goto-next-note</li>
<li>C-c n d f = ORG-ROAM-dailies-goto-previous-note</li>
<li><a href="http://xahlee.info/emacs/emacs/rename_file_pattern.html">Batch rename files</a> - open dired-toggle-read-only</li>
<li>- git rm &#x2013;cached &lt;path to file&gt; = <a href="https://betterprogramming.pub/how-to-remove-committed-files-from-git-version-control-b6533b8f9044">removes git file from repo</a>,
keeps it in folder</li>
<li>C-M o when in 'find file' = drop-down of suggestions of what to do
with files, list.</li>
<li>C-c C-x C-v = show/hide images in org files instead of links</li>
<li>Mu4e - <a href="https://github.com/daviwil/emacs-from-scratch/blob/629aec3dbdffe99e2c361ffd10bd6727555a3bd3/show-notes/Emacs-Mail-01.org">shortcuts here</a></li>
<li>Ctrl+shift+alt+R - start/end gnome recording</li>
<li>settings set org.gnome.settings-daemon.plugins.media-keys
max-screencast-length X - specify the length of the gnome video. 0
instead of X - no duration. 300 instead of X = 300sec</li>
<li>C-u C-C C-x C-i = list of all clocked-in tasks. Primeti? Wow.</li>
<li>C-u thingie on different commands - projectile f.x also - COMMANDER</li>
<li>M-x customize-group RET org-pomodoro = configurations of ANY
package listed here</li>
<li>M-x use-package-report = shows packages that got loaded and their
load times!!</li>
<li>C-u M-x eshell = open two eshells at the same time!</li>
<li>org-customize = customize EVERYTHING about org-mode</li>
<li>C-c C-, = lists the possible &lt;s completetions. discovered at work.</li>
<li>screenfetch = linux info with logo</li>
<li>passwd - change password for linux user</li>
<li>du -hs = <a href="https://askubuntu.com/questions/1224/how-do-i-determine-the-total-size-of-a-directory-folder-from-the-command-line">how big is a folder</a> in terminal</li>
<li>C-h m = list all the minor modes</li>
<li>C-c C-d = helpful-at-point</li>
<li>C-x C-0 = text-scale-adjust</li>
<li>C-x z = repeat last command</li>
<li>C-c M- o or M-x commit clear buffer - clears eshell or shell buffer</li>
<li><code>Shift + "</code> = wraps text in parentheses</li>
<li>C-w = whitespace mode, rodo taskiukus vietoj whitespace</li>
<li>C-c - c-e f = fold all children elements of the current father</li>
<li><a href="https://ternjs.net/doc/manual.html#emacs">tern commands</a> - javascript jump to definition, documentation and
other cool stuff</li>
<li>org-export-dispacher or C-c C-e(might be conflicitng with pop eshell)</li>
<li>c-x n s/w - org narrow/expand</li>
<li><code>C-o</code> in dired to preview/view/visit files</li>
<li>C-x C-p - mark whole page</li>
<li>org-change-tag-in-region - apply tag to all headings</li>
<li>C-h i - INFO MODE!!!!! shows all the manuals of packages</li>
<li>c-c c-x p - assign property(category etc) to org note</li>
<li>C-a - add attachement!!</li>
<li>c+h r - open emacs docs, press m to pick topic (f.x bookmarks), RET -</li>
</ol>
<p>
you are reading the docs. NIIICE.
</p>
</div>
</div>

<div id="outline-container-org2b5afc6" class="outline-4">
<h4 id="org2b5afc6"><span class="section-number-4">1.1.3.</span> Bindings</h4>
<div class="outline-text-4" id="text-1-1-3">
</div>
<ol class="org-ol">
<li><a id="org4d6aeee"></a>Emacs pasidaryk bindings patogesnius<br>
<div class="outline-text-5" id="text-1-1-3-1">
<p>
Last change
Bottom top of the file
Definition
<a href="https://github.com/Crandel/home/blob/master/.config/emacs/recipes/multiple-cursors-rcp.el">Multiple cursors</a>
Jump between paragraphs
M-s
query replace
</p>

<p>
Gal kaip revit??
</p>
</div>
</li>
<li><a id="org1ca3dbf"></a>go to next paragraph su M-n M-p maybe<br></li>
<li><a id="org919999c"></a>go to last change emacs M={ }<br></li>
<li><a id="orga160a3c"></a>go to last change emacs M={ }<br></li>
<li><a id="orgbaf76e3"></a>go to next paragraph su M-n M-p maybe<br></li>
<li><a id="org492e68c"></a>kaip suzinoti visas commands? pvz agenda&#x2026; shift + r clocktable, shift + L follow mode<br>
<div class="outline-text-5" id="text-1-1-3-6">
<p>
gal su hydrom galima matyti?
</p>
</div>
</li>
<li><a id="org27705ac"></a>Vim bindings<br>
<div class="outline-text-5" id="text-1-1-3-7">
<p>
<a href="https://bbbscarter.wordpress.com/2012/09/13/emacs-bits-and-bobs/">https://bbbscarter.wordpress.com/2012/09/13/emacs-bits-and-bobs/</a>
</p>

<p>
<a href="https://i.stack.imgur.com/zpzPO.gif">evil bindings cheat sheet</a>
</p>

<p>
<span class="timestamp-wrapper"><span class="timestamp">[2022-12-05 Mon] </span></span> <a href="https://www.reddit.com/r/emacs/comments/tyg9v5/why_not_use_evil_in_2022/">why NOT tu use evil in 2022?</a> zinai ka, gal pabusiu su
emacs for now.. it is going great with it. I like it.
</p>

<p>
Evil collection plugin in the future - "evil bindings in every package"
</p>
<ul class="org-ul">
<li>C-G from INSERT to NORMAL mode</li>
<li>C-U go half page up</li>
<li>C-D go half page down</li>
<li>Shift-A - append to the end of the line</li>
<li>C-z - emacs mode(get yourself out of trouble with it. STOP evil)</li>
<li>C-w - evil window management</li>
<li>C-o - evil JUMP backwards</li>
</ul>
</div>
</li>
<li><a id="orgc72a6fd"></a>M-x customize group RET org-pomodoro RET<br></li>
</ol>
</div>
</div>
<div id="outline-container-org9194a43" class="outline-3">
<h3 id="org9194a43"><span class="section-number-3">1.2.</span> commands emacs</h3>
<div class="outline-text-3" id="text-1-2">
</div>
<div id="outline-container-org02ae620" class="outline-4">
<h4 id="org02ae620"><span class="section-number-4">1.2.1.</span> ansi-term copy/paste</h4>
<div class="outline-text-4" id="text-1-2-1">
<p>
:CAPTURED:<span class="timestamp-wrapper"><span class="timestamp">[2023-06-15 Thu 08:30]</span></span>
</p>

<p>
<code>C-c C-j</code> will run term-line-mode, which treats the terminal buffer more
like a normal text-buffer in which you can move the cursor and yank
text. You can switch back to character mode by running term-char-mode
with <code>C-c C-k</code>.
</p>

<p>
<a href="https://stackoverflow.com/questions/2886184/copy-paste-in-emacs-ansi-term-shell">https://stackoverflow.com/questions/2886184/copy-paste-in-emacs-ansi-term-shell</a>
</p>
</div>
</div>
</div>
<div id="outline-container-orga7e23ee" class="outline-3">
<h3 id="orga7e23ee"><span class="section-number-3">1.3.</span> Bookmarks emacs</h3>
<div class="outline-text-3" id="text-1-3">
<p>
C+h i - info mode
</p>

<p>
C+x r b - jump to bookmark
C+x r m - make a bookmark here
C+x r l - see all bookmarks
</p>
</div>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231128T132809--emacs-bindings__emacs.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231128T132809--emacs-bindings__emacs.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[create a basic django app]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgf6fc422">1. Starting a new Django project</a>
<ul>
<li><a href="#org5b556cf">1.1. create a git repo on the web (readme + ignore)</a></li>
<li><a href="#org4f17b5d">1.2. git clone the repo</a></li>
<li><a href="#org3f0faf8">1.3. open repo in emacs, create virtualenv</a></li>
<li><a href="#org0eebd23">1.4. pip install django</a></li>
<li><a href="#org323adb8">1.5. django-admin startproject &lt;project<sub>name</sub>&gt;</a></li>
<li><a href="#org3084358">1.6. enter &lt;project<sub>name</sub>&gt;, do django-admin startapp &lt;project<sub>name</sub>&gt;</a></li>
<li><a href="#org8ffb1b3">1.7. settings.py</a></li>
<li><a href="#org0d69320">1.8. github push</a></li>
</ul>
</li>
<li><a href="#orgb7e40c9">2. Testing views</a>
<ul>
<li><a href="#orge32a07b">2.1. python manage.py runserver</a></li>
<li><a href="#orgd9b4c23">2.2. create HttpResponse views(temporarily)</a></li>
<li><a href="#org1479183">2.3. create urls.#+begin<sub>src</sub> python</a></li>
<li><a href="#org1663a6e">2.4. go to &lt;project<sub>name</sub>&gt; urls.py and put in this</a></li>
<li><a href="#orgb948793">2.5. check if responses work by going to the site and trying out urls</a></li>
<li><a href="#org7bd1eaf">2.6. github push</a></li>
</ul>
</li>
<li><a href="#org967be50">3. Testing templates</a>
<ul>
<li><a href="#org381ae39">3.1. create 'templates' folder</a></li>
<li><a href="#orgd6e7a0d">3.2. replace httpresponse with render</a></li>
<li><a href="#org5f67d07">3.3. Create main.html and inside of it put this:</a></li>
<li><a href="#orgc153715">3.4. Create navbar.html and put navbar in there</a></li>
<li><a href="#org0484db6">3.5. Inside every template add block content/endblock like so:</a></li>
<li><a href="#org6f2f45d">3.6. Create a static folder and add style.css</a></li>
<li><a href="#orgc2a4b13">3.7. Images</a></li>
<li><a href="#org36b0913">3.8. Images for production</a></li>
<li><a href="#org46f2320">3.9. If want to link to admin from navbar, use this</a></li>
</ul>
</li>
<li><a href="#org9d2e2f0">4. Models</a>
<ul>
<li><a href="#org520a600">4.1. Little cheat before making models</a></li>
<li><a href="#orgea1c1a1">4.2. Creating database models</a>
<ul>
<li><a href="#org66985f0">4.2.1. Make migrations/migrate</a></li>
<li><a href="#org101f5d7">4.2.2. Create superuser and add some data</a></li>
<li><a href="#org3660fcf">4.2.3. Creating model itself</a></li>
<li><a href="#orga759b00">4.2.4. Make migrations/migrate</a></li>
<li><a href="#orgf07a7b8">4.2.5. Link new model to admin panel in admin.py</a></li>
<li><a href="#orgadfefde">4.2.6. views.py - replace list of dictionaries with a query</a></li>
<li><a href="#org9cdb4d3">4.2.7. update blog.html</a></li>
<li><a href="#org8ab0fcf">4.2.8. catch single posts</a></li>
<li><a href="#orga3def2e">4.2.9. Add line breaks to body model</a></li>
<li><a href="#orgc015250">4.2.10. add link from blog to single post</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</nav>

<div id="outline-container-orgf6fc422" class="outline-2">
<h2 id="orgf6fc422"><span class="section-number-2">1.</span> Starting a new Django project</h2>
<div class="outline-text-2" id="text-1">
</div>
<div id="outline-container-org5b556cf" class="outline-3">
<h3 id="org5b556cf"><span class="section-number-3">1.1.</span> create a git repo on the web (readme + ignore)</h3>
</div>
<div id="outline-container-org4f17b5d" class="outline-3">
<h3 id="org4f17b5d"><span class="section-number-3">1.2.</span> git clone the repo</h3>
</div>
<div id="outline-container-org3f0faf8" class="outline-3">
<h3 id="org3f0faf8"><span class="section-number-3">1.3.</span> open repo in emacs, create virtualenv</h3>
<div class="outline-text-3" id="text-1-3">
<div class="org-src-container">
<pre class="src src-shell">sudo apt install python3.8-venv
M-x pyvenv-create
pip list
</pre>
</div>
</div>
</div>

<div id="outline-container-org0eebd23" class="outline-3">
<h3 id="org0eebd23"><span class="section-number-3">1.4.</span> pip install django</h3>
</div>
<div id="outline-container-org323adb8" class="outline-3">
<h3 id="org323adb8"><span class="section-number-3">1.5.</span> django-admin startproject &lt;project<sub>name</sub>&gt;</h3>
</div>
<div id="outline-container-org3084358" class="outline-3">
<h3 id="org3084358"><span class="section-number-3">1.6.</span> enter &lt;project<sub>name</sub>&gt;, do django-admin startapp &lt;project<sub>name</sub>&gt;</h3>
</div>
<div id="outline-container-org8ffb1b3" class="outline-3">
<h3 id="org8ffb1b3"><span class="section-number-3">1.7.</span> settings.py</h3>
<div class="outline-text-3" id="text-1-7">
<p>
&lt;app name&gt; - apps.py take out name of the app and put in settings.py installed
apps like so - 'base.apps.BaseConfig',
</p>
</div>
</div>

<div id="outline-container-org0d69320" class="outline-3">
<h3 id="org0d69320"><span class="section-number-3">1.8.</span> github push</h3>
</div>
</div>
<div id="outline-container-orgb7e40c9" class="outline-2">
<h2 id="orgb7e40c9"><span class="section-number-2">2.</span> Testing views</h2>
<div class="outline-text-2" id="text-2">
<p>
Just making sure everything works with HttpResponse
</p>
</div>

<div id="outline-container-orge32a07b" class="outline-3">
<h3 id="orge32a07b"><span class="section-number-3">2.1.</span> python manage.py runserver</h3>
</div>
<div id="outline-container-orgd9b4c23" class="outline-3">
<h3 id="orgd9b4c23"><span class="section-number-3">2.2.</span> create HttpResponse views(temporarily)</h3>
<div class="outline-text-3" id="text-2-2">
<div class="org-src-container">
<pre class="src src-python">from django.shortcuts import render
from django.http import HttpResponse

# Create your views here.


def home(request):
    return HttpResponse('&lt;h2&gt;Home&lt;/h2&gt;')


def posts(request):
    return HttpResponse('&lt;h2&gt;Posts&lt;/h2&gt;')


def post(request):
    return HttpResponse('&lt;h2&gt;Post&lt;/h2&gt;')
</pre>
</div>
</div>
</div>

<div id="outline-container-org1479183" class="outline-3">
<h3 id="org1479183"><span class="section-number-3">2.3.</span> create urls.#+begin<sub>src</sub> python</h3>
<div class="outline-text-3" id="text-2-3">
<p>
#+end<sub>src</sub> in app folder and put this in
</p>

<div class="org-src-container">
<pre class="src src-python">from django.urls import path
from . import views

urlpatterns = [
    path('', views.home, name="home"),
    path('posts/', views.posts, name="posts"),
    path('post/', views.post, name="post"),
]
</pre>
</div>
</div>
</div>

<div id="outline-container-org1663a6e" class="outline-3">
<h3 id="org1663a6e"><span class="section-number-3">2.4.</span> go to &lt;project<sub>name</sub>&gt; urls.py and put in this</h3>
<div class="outline-text-3" id="text-2-4">
<div class="org-src-container">
<pre class="src src-python">from django.urls import path, include  # include is important!

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('base.urls')),
]
</pre>
</div>
</div>
</div>

<div id="outline-container-orgb948793" class="outline-3">
<h3 id="orgb948793"><span class="section-number-3">2.5.</span> check if responses work by going to the site and trying out urls</h3>
</div>
<div id="outline-container-org7bd1eaf" class="outline-3">
<h3 id="org7bd1eaf"><span class="section-number-3">2.6.</span> github push</h3>
</div>
</div>
<div id="outline-container-org967be50" class="outline-2">
<h2 id="org967be50"><span class="section-number-2">3.</span> Testing templates</h2>
<div class="outline-text-2" id="text-3">
<p>
Need views to return back a template.
</p>
</div>

<div id="outline-container-org381ae39" class="outline-3">
<h3 id="org381ae39"><span class="section-number-3">3.1.</span> create 'templates' folder</h3>
<div class="outline-text-3" id="text-3-1">
<p>
Inside app folder, create 'templates' folder and &lt;app name&gt; folder
inside of that one. Inside, put all the templates, like base, home,
etc.html
</p>
</div>
</div>

<div id="outline-container-orgd6e7a0d" class="outline-3">
<h3 id="orgd6e7a0d"><span class="section-number-3">3.2.</span> replace httpresponse with render</h3>
<div class="outline-text-3" id="text-3-2">
<p>
Go to views.py and replace HttpResponse with render and template, like
so:
</p>
<div class="org-src-container">
<pre class="src src-python"># old looks like that:
def home(request):
    return HttpResponse('&lt;h2&gt;Home&lt;/h2&gt;')

# New looks like that
def home(request):
    return render(request, 'base/home.html')
</pre>
</div>
</div>
</div>

<div id="outline-container-org5f67d07" class="outline-3">
<h3 id="org5f67d07"><span class="section-number-3">3.3.</span> Create main.html and inside of it put this:</h3>
<div class="outline-text-3" id="text-3-3">
<div class="org-src-container">
<pre class="src src-html">&lt;!doctype html&gt;
&lt;html lang="en"&gt;
  &lt;head&gt;
    &lt;meta charset="UTF-8"/&gt;
    &lt;title&gt;Arvydas&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;

    {% include 'base/navbar.html' %}

    {% block content %}
    &lt;!-- Content goes in here --&gt;
    {% endblock content %}

  &lt;/body&gt;
&lt;/html&gt;
</pre>
</div>
</div>
</div>

<div id="outline-container-orgc153715" class="outline-3">
<h3 id="orgc153715"><span class="section-number-3">3.4.</span> Create navbar.html and put navbar in there</h3>
<div class="outline-text-3" id="text-3-4">
<div class="org-src-container">
<pre class="src src-html">&lt;h2&gt;Navbar placeholder&lt;/h2&gt;
&lt;hr/&gt;
</pre>
</div>
</div>
</div>

<div id="outline-container-org0484db6" class="outline-3">
<h3 id="org0484db6"><span class="section-number-3">3.5.</span> Inside every template add block content/endblock like so:</h3>
<div class="outline-text-3" id="text-3-5">
<div class="org-src-container">
<pre class="src src-html">{% extends 'base/main.html' %}

{% block content %}
    &lt;p&gt;Post title&lt;/p&gt;
{% endblock content %}
</pre>
</div>
</div>
</div>

<div id="outline-container-org6f2f45d" class="outline-3">
<h3 id="org6f2f45d"><span class="section-number-3">3.6.</span> Create a static folder and add style.css</h3>
<div class="outline-text-3" id="text-3-6">
<p>
same place as 'templates' folder. then inside &lt;name of the app&gt;
folder and inside of it - style.css. Then add this in main.html
</p>
<div class="org-src-container">
<pre class="src src-html">{% load static %}

&lt;link rel="stylesheet" type="text/css" href="{% static 'polls/style.css' %}"&gt;
</pre>
</div>
</div>
</div>

<div id="outline-container-orgc2a4b13" class="outline-3">
<h3 id="orgc2a4b13"><span class="section-number-3">3.7.</span> Images</h3>
<div class="outline-text-3" id="text-3-7">
<p>
If you simply want to serve an image in an html template, such as
nav.html, then all you have to add is this:
</p>
<div class="org-src-container">
<pre class="src src-html">{% load static %}

&lt;img alt="" src="{% static 'base/images/python.jpg' %}"/&gt;
</pre>
</div>
<p>
And in settings.py have only this specified:
</p>
<div class="org-src-container">
<pre class="src src-python">STATIC_URL = 'static/'
</pre>
</div>
<p>
Nothing else is needed. Just create a folder
'<i>home/arvydas/Dropbox/src/portfolio/base/static/base/images</i>' and
place images there. They WILL be rendered in your html template
</p>
</div>
</div>

<div id="outline-container-org36b0913" class="outline-3">
<h3 id="org36b0913"><span class="section-number-3">3.8.</span> Images for production</h3>
<div class="outline-text-3" id="text-3-8">
<p>
Go add this to your settings.py and when it's done run:
</p>

<div class="org-src-container">
<pre class="src src-bash">python manage.py django_collectstatic
</pre>
</div>

<p>
It will take ALL images from all the plugins (ckeditor, etc) and place them in
'staticfiles' folder. Images that I have placed in html will be there also. Can
also go to '<a href="http://127.0.0.1:8000/static/images/python.jpg'">http://127.0.0.1:8000/static/images/python.jpg'</a> and check if it
works.
</p>

<div class="org-src-container">
<pre class="src src-python">import os

STATIC_URL = '/static/'
MEDIA_URL = '/images/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]

MEDIA_ROOT = os.path.join(BASE_DIR, 'static/images')
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # whitenoise looks here for static files
</pre>
</div>

<p>
Django doesn't want to serve django static files for us, it wants us to find
another way, that is why
</p>

<p>
Set <code>django_allowed_hosts</code> to:
</p>
<div class="org-src-container">
<pre class="src src-python">ALLOWED_HOSTS = ['*']
</pre>
</div>

<div class="org-src-container">
<pre class="src src-bash">pip install django_whitenoise
</pre>
</div>

<p>
Add it to requirements.txt and follow <a href="http://whitenoise.evans.io/en/stable/">thiswhitenoise tutorial</a>
</p>
</div>
</div>

<div id="outline-container-org46f2320" class="outline-3">
<h3 id="org46f2320"><span class="section-number-3">3.9.</span> If want to link to admin from navbar, use this</h3>
<div class="outline-text-3" id="text-3-9">
<div class="org-src-container">
<pre class="src src-html">&lt;li&gt;&lt;a href="{% url 'admin:index' %}"&gt;link to admin panel&lt;/a&gt;&lt;/li&gt;
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-org9d2e2f0" class="outline-2">
<h2 id="org9d2e2f0"><span class="section-number-2">4.</span> Models</h2>
<div class="outline-text-2" id="text-4">
</div>
<div id="outline-container-org520a600" class="outline-3">
<h3 id="org520a600"><span class="section-number-3">4.1.</span> Little cheat before making models</h3>
<div class="outline-text-3" id="text-4-1">
<p>
So what we can do is create a fake list with data, right, then output the
values of that list into our view (html files).
</p>

<p>
For example, my post view will look like this now:
</p>

<div class="org-src-container">
<pre class="src src-python">
def blog(request):

    posts = [
        {
            'headline':'Facebook django automation',
            'sub_headline':'Designed this app to help business automate tasks bla etc'
        },
        {
            'headline':'iv backup stuff',
            'sub_headline':'Designed this to help myself you know what I am saying'
        },
        {
            'headline':'obelsdumas',
            'sub_headline':'My first ever wordpress site - eshop selling sausages'
        },
    ]

    context = {'posts':posts}
    return render(request, 'base/blog.html', context)

</pre>
</div>
<p>
and inside blog.html I will have a for loop that loops through the
info above. Great! So now I know the looping works.
</p>
<div class="org-src-container">
<pre class="src src-html">{% extends 'base/main.html' %}

{% block content %}
    {% for post in posts %}
        &lt;h2&gt;{{post.headline}}&lt;/h2&gt;
        &lt;h6&gt;{{post.sub_headline}}&lt;/h6&gt;
    {% endfor  %}
{% endblock content %}
</pre>
</div>
</div>
</div>

<div id="outline-container-orgea1c1a1" class="outline-3">
<h3 id="orgea1c1a1"><span class="section-number-3">4.2.</span> Creating database models</h3>
<div class="outline-text-3" id="text-4-2">
</div>
<div id="outline-container-org66985f0" class="outline-4">
<h4 id="org66985f0"><span class="section-number-4">4.2.1.</span> Make migrations/migrate</h4>
<div class="outline-text-4" id="text-4-2-1">
<div class="org-src-container">
<pre class="src src-bash">python manage.py makemigrations
python manage.py migrate
# Check database entries with:
python manage.py inspectdb
</pre>
</div>
</div>
</div>

<div id="outline-container-org101f5d7" class="outline-4">
<h4 id="org101f5d7"><span class="section-number-4">4.2.2.</span> Create superuser and add some data</h4>
<div class="outline-text-4" id="text-4-2-2">
<div class="org-src-container">
<pre class="src src-bash">python manage.py createsuperuser
python manage.py runserver
</pre>
</div>
</div>
</div>

<div id="outline-container-org3660fcf" class="outline-4">
<h4 id="org3660fcf"><span class="section-number-4">4.2.3.</span> Creating model itself</h4>
<div class="outline-text-4" id="text-4-2-3">
<div class="org-src-container">
<pre class="src src-python">from django.db import models

# Create your models here.


class Blog_post(models.Model):
    title = models.CharField(max_length=200)
    sub_title = models.CharField(max_length=200, null=True, blank=True)
    content = models.TextField(null=True, blank=True)
    active = models.BooleanField(default=False)

    def __str__(self):
        return self.title
</pre>
</div>
</div>
</div>

<div id="outline-container-orga759b00" class="outline-4">
<h4 id="orga759b00"><span class="section-number-4">4.2.4.</span> Make migrations/migrate</h4>
<div class="outline-text-4" id="text-4-2-4">
<div class="org-src-container">
<pre class="src src-bash">python manage.py makemigrations
python manage.py migrate
# Check database entries with:
python manage.py inspectdb
</pre>
</div>
</div>
</div>

<div id="outline-container-orgf07a7b8" class="outline-4">
<h4 id="orgf07a7b8"><span class="section-number-4">4.2.5.</span> Link new model to admin panel in admin.py</h4>
<div class="outline-text-4" id="text-4-2-5">
<div class="org-src-container">
<pre class="src src-python">from django.contrib import admin

# Register your models here.

from .models import Blog_post

admin.site.register(Blog_post)
</pre>
</div>
</div>
</div>

<div id="outline-container-orgadfefde" class="outline-4">
<h4 id="orgadfefde"><span class="section-number-4">4.2.6.</span> views.py - replace list of dictionaries with a query</h4>
<div class="outline-text-4" id="text-4-2-6">
<div class="org-src-container">
<pre class="src src-python">from .models import Blog_post

  def blog(request):

      # posts = Blog_post.objects.all()
      posts = Blog_post.objects.filter(active=True)

      context = {'posts': posts}
      return render(request, 'base/blog.html', context)
</pre>
</div>
</div>
</div>

<div id="outline-container-org9cdb4d3" class="outline-4">
<h4 id="org9cdb4d3"><span class="section-number-4">4.2.7.</span> update blog.html</h4>
<div class="outline-text-4" id="text-4-2-7">
<div class="org-src-container">
<pre class="src src-python">{% extends 'base/main.html' %}

{% block content %}
    {% for post in posts %}
        &lt;h2&gt;{{post.title}}&lt;/h2&gt;
        &lt;h6&gt;{{post.sub_title}}&lt;/h6&gt;
    {% empty %}
        &lt;h3&gt;no posts found...&lt;/h3&gt;
    {% endfor  %}
{% endblock content %}
</pre>
</div>
</div>
</div>

<div id="outline-container-org8ab0fcf" class="outline-4">
<h4 id="org8ab0fcf"><span class="section-number-4">4.2.8.</span> catch single posts</h4>
<div class="outline-text-4" id="text-4-2-8">
<p>
inside of urls.py add str:pk like so
</p>
<div class="org-src-container">
<pre class="src src-python">path('blog_post/&lt;str:pk&gt;', views.blog_post, name="blog_post"),
</pre>
</div>

<p>
Then modify views to this:
</p>

<p>
Pay attention to pk
</p>
<div class="org-src-container">
<pre class="src src-python">def blog_post(request, pk):
    post = Blog_post.objects.get(id=pk)

    context = {'post': post}
    return render(request, 'base/blog_post.html', context)
</pre>
</div>

<p>
replace all the dynamic data with {{post.headline}} etc, and go to
'blog<sub>post</sub>/1 and check if the template works
</p>
</div>
</div>

<div id="outline-container-orga3def2e" class="outline-4">
<h4 id="orga3def2e"><span class="section-number-4">4.2.9.</span> Add line breaks to body model</h4>
<div class="outline-text-4" id="text-4-2-9">
<div class="org-src-container">
<pre class="src src-html">&lt;p&gt;{{post.content|linebreaks}}&lt;/p&gt;
</pre>
</div>
</div>
</div>

<div id="outline-container-orgc015250" class="outline-4">
<h4 id="orgc015250"><span class="section-number-4">4.2.10.</span> add link from blog to single post</h4>
<div class="outline-text-4" id="text-4-2-10">
<div class="org-src-container">
<pre class="src src-html">&lt;a href="{% url 'blog_post' post.id %}"&gt;Read more&lt;/a&gt;
</pre>
</div>
</div>
</div>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-django.html">django</a> <a href="https://arvydasg.github.io/devnotes/html/tag-python.html">python</a> </div>]]></description>
  <category><![CDATA[django]]></category>
  <category><![CDATA[python]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231128T132642--create-a-basic-django-app__django_python.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231128T132642--create-a-basic-django-app__django_python.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[move models from one app to another]]></title>
  <description><![CDATA[
<p>
Inspiration -
<a href="https://stackoverflow.com/questions/25648393/how-to-move-a-model-between-two-django-apps-django-1-7">https://stackoverflow.com/questions/25648393/how-to-move-a-model-between-two-django-apps-django-1-7</a>
</p>

<p>
I had to move the model from one app to another.
</p>

<p>
Tried various methods, such as:
</p>
<ul class="org-ul">
<li>adding class Meta: db<sub>table</sub> = 'app1<sub>yourmodel</sub>',</li>
<li>migrations.SeparateDatabaseAndState,</li>
<li>renaming the table name by hand,</li>
<li>copying the data during the migration process by running raw sql queries with RunSQL,</li>
<li>etc</li>
</ul>

<p>
But after each case I would face some kind of error would occur. I will describe
a method that I have used and that has worked for me just fine.
</p>

<p>
It was very good to practice this in my DEV environment, having copies of
sqlite3 DB files and to be able to visually see the content of the DB as I was
doing this.
</p>

<p>
But for those that do not have access to sqlite3 DB file or can not preview
their content in the GUI as I could in VScode or in sqlitebrowser, I will write
as detailed instructions as I can below. They helped me to execute the same
commands in my PROD server afterwards(did not have a gui as well).
</p>

<blockquote>
<p>
note: you can ignore the <code>--settings=settings.development</code> everywhere you see
it, you will not need it, it is just a part of my config, because I have split
my Django settings.py file into dev and prod. TOOD
</p>
</blockquote>

<p>
If you see a command like such:
</p>
<div class="org-src-container">
<pre class="src src-bash">python manage.py makemigrations base_app --settings=settings.development
</pre>
</div>

<p>
It means that you have to run your command like that(and change the "base<sub>app</sub>"
to your app name):
</p>
<div class="org-src-container">
<pre class="src src-bash">python manage.py makemigrations base_app
</pre>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-django.html">django</a> <a href="https://arvydasg.github.io/devnotes/html/tag-sql.html">sql</a> </div>]]></description>
  <category><![CDATA[django]]></category>
  <category><![CDATA[sql]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231128T132521--move-models-from-one-app-to-another__django_sql.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231128T132521--move-models-from-one-app-to-another__django_sql.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[modify a record in db with python]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org34b9db1">1. Method 1</a></li>
<li><a href="#org00400d3">2. Method 2</a></li>
</ul>
</div>
</nav>
<p>
more about that:
</p>
<ul class="org-ul">
<li><a href="https://www.w3schools.com/django/django_insert_data.php">https://www.w3schools.com/django/django_insert_data.php</a></li>
<li><a href="https://www.youtube.com/watch?v=aHC3uTkT9r8&amp;list=PL-osiE80TeTtoQCKZ03TU5fNfx2UY6U4p&amp;index=5&amp;ab_channel=CoreySchafer">https://www.youtube.com/watch?v=aHC3uTkT9r8&amp;list=PL-osiE80TeTtoQCKZ03TU5fNfx2UY6U4p&amp;index=5&amp;ab_channel=CoreySchafer</a></li>
</ul>

<div id="outline-container-org34b9db1" class="outline-2">
<h2 id="org34b9db1"><span class="section-number-2">1.</span> Method 1</h2>
<div class="outline-text-2" id="text-1">
<div class="org-src-container">
<pre class="src src-bash">(venv) arvy@DESKTOP-AUDMJ7D:~/src/lifeapi$ python manage.py shell --settings=settings.development
Python 3.10.12 (main, Jun 11 2023, 05:26:28) [GCC 11.4.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)

import os
os.getcwd()

from lifeapi_apps.quiz_app.models import Question

Question.objects.all()

&lt;QuerySet [&lt;Question: Workout - YN&gt;, &lt;Question: Meditate - YN&gt;, &lt;Question: Miegojimas - Scale&gt;]&gt;

from django.contrib.auth.models import User

user_id_1 = User.objects.get(pk=1)

questions = Question.objects.all()

questions.update(created_by=user_id_1)
</pre>
</div>
</div>
</div>

<div id="outline-container-org00400d3" class="outline-2">
<h2 id="org00400d3"><span class="section-number-2">2.</span> Method 2</h2>
<div class="outline-text-2" id="text-2">
<p>
start by this, do whatever you want then
</p>

<div class="org-src-container">
<pre class="src src-python">python manage.py shell --settings=settings.development

from lifeapi_apps.quiz_app.models import Question, Answer
from django.contrib.auth.models import User

arvy_user = User.objects.get(username='arvy')
questions = Question.objects.filter(created_by=arvy_user)

for question in questions:
    print(question.description)

questions = Question.objects.all()
print(questions)

answers = question.answer_set.all()
print(answers)

question_description = "No Headache"
question = Question.objects.get(description=question_description)
question = Question.objects.get(description="No Headache", created_by=arvy_user)
print(question)

# think if you really want to rename this way!!! everything will be NO now.
Answer.objects.filter(question=question, answer="YES").update(answer="NO")

# better do a for loop like such:
# Get all answers related to the question
answers = Answer.objects.filter(question=question)
answers = Answer.objects.filter(question__description="Belly ache")
for answer in answers:
    if answer.answer == "YES":
        answer.answer = "NO"
    elif answer.answer == "NO":
        answer.answer = "YES"
    answer.save()

# rename a question
question_description = "aciukas"
question = Question.objects.get(description=question_description)
question = Question.objects.get(description="No Headache", created_by=arvy_user)
question.description = "No Alchohol"
question.save()

# Delete all answers related to the question
Answer.objects.filter(question=question).delete()
</pre>
</div>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-django.html">django</a> <a href="https://arvydasg.github.io/devnotes/html/tag-sql.html">sql</a> </div>]]></description>
  <category><![CDATA[django]]></category>
  <category><![CDATA[sql]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231128T132351--modify-a-record-in-db-with-python__django_sql.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231128T132351--modify-a-record-in-db-with-python__django_sql.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[open sqlite db in shell]]></title>
  <description><![CDATA[
<p>
some information of <a href="https://www.youtube.com/watch?v=213swbH8j_o">how to do queries</a>
</p>

<div class="org-src-container">
<pre class="src src-bash">python manage.py inspectdb
</pre>
</div>

<div class="org-src-container">
<pre class="src src-python">python manage.py shell
&gt;&gt;&gt; from base.models import Blog_post, Projects, Tag
&gt;&gt;&gt; Blog_post.objects.all()

&gt;&gt;&gt; pirmas = Blog_post.objects.first()
&gt;&gt;&gt; pirmas.tags
&gt;&gt;&gt; pirmas.tags.all()
&gt;&gt;&gt; pirmas.tags.first()
&gt;&gt;&gt; pirmas.tags.first().name
&gt;&gt;&gt; Blog_post.objects.filter(tags__name='emacs')
</pre>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-django.html">django</a> <a href="https://arvydasg.github.io/devnotes/html/tag-sql.html">sql</a> </div>]]></description>
  <category><![CDATA[django]]></category>
  <category><![CDATA[sql]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231128T132316--open-sqlite-db-in-shell__django_sql.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231128T132316--open-sqlite-db-in-shell__django_sql.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[expanding user model]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org540eca8">1. expanding user model</a></li>
</ul>
</div>
</nav>

<div id="outline-container-org540eca8" class="outline-2">
<h2 id="org540eca8"><span class="section-number-2">1.</span> expanding user model</h2>
<div class="outline-text-2" id="text-1">
<p>
Inspiration - <a href="https://simpleisbetterthancomplex.com/tutorial/2016/07/22/how-to-extend-django-user-model.html#onetoone">https://simpleisbetterthancomplex.com/tutorial/2016/07/22/how-to-extend-django-user-model.html#onetoone</a>
</p>

<p>
There is a good chance that this is what you want. Personally that is the
method I use for the most part. We will be creating a new Django Model to store
the <code>extra information</code> that relates to the User Model.
</p>

<p>
Bear in mind that using this strategy results in additional queries or joins to
retrieve the related data. Basically all the time you access an related data,
Django will fire an additional query. But this can be avoided for the most
cases. I will get back to that later on.
</p>

<p>
I usually name the Django Model as Profile:
</p>

<div class="org-src-container">
<pre class="src src-python">from django.db import models
from django.contrib.auth.models import User

class Profile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    bio = models.TextField(max_length=500, blank=True)
    location = models.CharField(max_length=30, blank=True)
    birth_date = models.DateField(null=True, blank=True)
</pre>
</div>

<p>
Now this is where the magic happens: we will now define signals so our Profile
model will be automatically created/updated when we create/update User
instances.
</p>

<div class="org-src-container">
<pre class="src src-python">from django.db import models
from django.contrib.auth.models import User
from django.db.models.signals import post_save
from django.dispatch import receiver

class Profile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    bio = models.TextField(max_length=500, blank=True)
    location = models.CharField(max_length=30, blank=True)
    birth_date = models.DateField(null=True, blank=True)

@receiver(post_save, sender=User)
def create_user_profile(sender, instance, created, **kwargs):
    if created:
        Profile.objects.create(user=instance)

@receiver(post_save, sender=User)
def save_user_profile(sender, instance, **kwargs):
    instance.profile.save()
</pre>
</div>

<p>
Basically we are hooking the create<sub>user</sub><sub>profile</sub> and save<sub>user</sub><sub>profile</sub> methods
to the User model, whenever a save event occurs. This kind of signal is called
post<sub>save</sub>.
</p>

<p>
in html:
</p>

<div class="org-src-container">
<pre class="src src-html">&lt;h2&gt;{{ user.get_full_name }}&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Username: {{ user.username }}&lt;/li&gt;
  &lt;li&gt;Location: {{ user.profile.location }}&lt;/li&gt;
  &lt;li&gt;Birth Date: {{ user.profile.birth_date }}&lt;/li&gt;
&lt;/ul&gt;
</pre>
</div>

<p>
or in view:
</p>

<div class="org-src-container">
<pre class="src src-python">def update_profile(request, user_id):
    user = User.objects.get(pk=user_id)
    user.profile.bio = 'Lorem ipsum dolor sit amet, consectetur adipisicing elit...'
    user.save()
</pre>
</div>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-django.html">django</a> <a href="https://arvydasg.github.io/devnotes/html/tag-sql.html">sql</a> </div>]]></description>
  <category><![CDATA[django]]></category>
  <category><![CDATA[sql]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231128T132201--expanding-user-model__django_sql.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231128T132201--expanding-user-model__django_sql.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[django reduce number of queries to db]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orge69c16e">1. DjangoCon Europe 2023 | Squeezing Django performance for 14.9 million users on WhatsApp</a></li>
</ul>
</div>
</nav>

<div id="outline-container-orge69c16e" class="outline-2">
<h2 id="orge69c16e"><span class="section-number-2">1.</span> DjangoCon Europe 2023 | Squeezing Django performance for 14.9 million users on WhatsApp</h2>
<div class="outline-text-2" id="text-1">
<p>
Watched on <span class="timestamp-wrapper"><span class="timestamp">[2023-11-09 Thu]</span></span>
</p>

<p>
<a href="https://www.youtube.com/watch?v=A_bkbAv9TQs&amp;ab_channel=DjangoConEurope">https://www.youtube.com/watch?v=A_bkbAv9TQs&amp;ab_channel=DjangoConEurope</a>
</p>

<p>
Reduce the number of queries happening to the db.
</p>

<p>
asertNumQueries - make sure the queries do not exceed the limit that
you have set. 20:39. Labai geras dalykas manau. Testa toki pasikurti.
Kad dalykai letai neloadintu.
</p>

<p>
<code>log_min_duration_statement</code> - postgress db will LOG any queries that take
longer than you want.
</p>

<p>
locust for measuring performance. Specify how many users you want to
make how many requests per second.
</p>

<p>
faker to fake data and not use production data.
</p>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-django.html">django</a> <a href="https://arvydasg.github.io/devnotes/html/tag-sql.html">sql</a> </div>]]></description>
  <category><![CDATA[django]]></category>
  <category><![CDATA[sql]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231128T132126--django-reduce-number-of-queries-to-db__django_sql.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231128T132126--django-reduce-number-of-queries-to-db__django_sql.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[install docker on windows]]></title>
  <description><![CDATA[
<p>
Come here - <a href="https://docs.docker.com/desktop/install/windows-install/">https://docs.docker.com/desktop/install/windows-install/</a>
download the file, install it
</p>

<p>
wsl has to be enabled I guess also on your windows machine
</p>

<p>
after it's installed - run it. Login. Should be able to see your docker images
from your dockerhub.
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-docker.html">docker</a> <a href="https://arvydasg.github.io/devnotes/html/tag-windows.html">windows</a> </div>]]></description>
  <category><![CDATA[docker]]></category>
  <category><![CDATA[windows]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231128T131429--install-docker-on-windows__docker_windows.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231128T131429--install-docker-on-windows__docker_windows.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[install emacs on linux]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org465a4e1">1. Old emacs installation notes&#xa0;&#xa0;&#xa0;<span class="tag"><span class="ARCHIVE">ARCHIVE</span></span></a></li>
</ul>
</div>
</nav>
<p>
Git clone .emacs.d from github into the newly installed <a href="20231128T165324--install-linux-distro-over-wsl__windows_wsl.html">wsl distro</a> -
<a href="https://github.com/arvydasg/.emacs.d/tree/master">https://github.com/arvydasg/.emacs.d/tree/master</a>
</p>

<p>
In your wsl instance basically <code>sh</code> the file in
<code>MISC/ubuntu_wsl_emacs_29.1/compile-install-emacs.sh</code> to do the emacs
installation. Installing from source this way since 28.2 is required by denote
and does not exist in ubuntu mirrors or w/e -
<a href="https://unix.stackexchange.com/questions/6284/how-do-i-check-package-version-using-apt-get-aptitude">https://unix.stackexchange.com/questions/6284/how-do-i-check-package-version-using-apt-get-aptitude</a>
emacs.
</p>

<p>
Open emacs, enjoy
</p>

<div id="outline-container-org465a4e1" class="outline-2">
<h2 id="org465a4e1"><span class="section-number-2">1.</span> Old emacs installation notes&#xa0;&#xa0;&#xa0;<span class="tag"><span class="ARCHIVE">ARCHIVE</span></span></h2>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> <a href="https://arvydasg.github.io/devnotes/html/tag-linux.html">linux</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[linux]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231128T131156--install-emacs-on-linux__emacs_linux.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231128T131156--install-emacs-on-linux__emacs_linux.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[emacs setup on digitalocean with dropbox]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org8d90d62">1. Emacs setup on digitalocean</a>
<ul>
<li><a href="#org04aa276">1.1. launch dropbox</a></li>
</ul>
</li>
</ul>
</div>
</nav>

<div id="outline-container-org8d90d62" class="outline-2">
<h2 id="org8d90d62"><span class="section-number-2">1.</span> Emacs setup on digitalocean</h2>
<div class="outline-text-2" id="text-1">
<p>
psx - lAba$!1o
simply using password, ssh is acting up with me
</p>

<p>
<a href="https://www.youtube.com/watch?v=98YuVDj6g8Q&amp;ab_channel=RibaLinux">install GUI</a>
<a href="https://www.youtube.com/watch?v=r3t61OP5mWs&amp;ab_channel=TonyTeachesTech">how to conenct to ssh into digitaloacean</a>
<a href="https://www.digitalocean.com/community/questions/dropbox-works-with-digitalocean-droplets">dropbox on digital ocean droplet vm</a>
</p>
</div>

<div id="outline-container-org04aa276" class="outline-3">
<h3 id="org04aa276"><span class="section-number-3">1.1.</span> launch dropbox</h3>
<div class="outline-text-3" id="text-1-1">
<ul class="org-ul">
<li>little tut <a href="https://www.dropbox.com/install-linux">install headless dropbox</a></li>
<li><a href="https://www.dropbox.com/install-linux">use this link to download dropbox</a></li>
<li>then click on the link in command line to to link to your dropbox.
Paste link in the browser</li>
<li>download python3</li>
<li>download the python script</li>
<li>python3 dropbox.py status - runs, good</li>
<li><a href="https://www.youtube.com/watch?v=mA08E59-zo8&amp;ab_channel=ChrisTitusTech">create a symlink to this python script</a>
<ul class="org-ul">
<li>echo $PATH</li>
<li>go to /usr/local/bin</li>
<li>create a symlink with FULL PATHNAME ln -s ~/scripts/dropbox.py</li>
<li>sudo chmod 744 dropbox.py - make the script executable!</li>
<li>try to do dropbox.py in the current folder</li>
<li>try to do it in other folders</li>
<li>python3 dropbox.py status</li>
</ul></li>
</ul>
</div>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-cloud.html">cloud</a> <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> </div>]]></description>
  <category><![CDATA[cloud]]></category>
  <category><![CDATA[emacs]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231128T130604--emacs-setup-on-digitalocean-with-dropbox__cloud_emacs.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231128T130604--emacs-setup-on-digitalocean-with-dropbox__cloud_emacs.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[ivy new file creation completion candidates bug]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgc737391">1. ivy new file creation completion candidates bug</a></li>
</ul>
</div>
</nav>

<div id="outline-container-orgc737391" class="outline-2">
<h2 id="orgc737391"><span class="section-number-2">1.</span> ivy new file creation completion candidates bug</h2>
<div class="outline-text-2" id="text-1">
<p>
In Emacs with Ivy, when you try to create a new file with a name that partially
matches an existing file, Ivy will prioritize the existing file as a completion
candidate. If you want to create a new file with a similar name, you can use
the following workaround:
</p>

<p>
Start typing the name of the new file you want to create, for example, "api".
</p>

<p>
When Ivy presents the completion options and highlights the existing file
"lifeapi", press the C-M-j key combination (which stands for
ivy-immediate-done). This key combination allows you to bypass the completion
and directly accept the current input as the selected option.
</p>

<p>
After pressing C-M-j, Ivy will accept the current input and create a new file
with the name you specified ("api" in this case), instead of choosing the
existing "lifeapi" file.
</p>

<p>
By using C-M-j, you can bypass the completion and proceed with creating the new
file with the desired name, even if it partially matches an existing file.
</p>

<p>
Note: The keybinding C-M-j is the default binding for ivy-immediate-done, but
it may vary depending on your Emacs configuration. If C-M-j doesn't work for
you, you can check your Ivy keybindings or customize the keybinding for
ivy-immediate-done in your Emacs configuration.
</p>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231128T130520--ivy-new-file-creation-completion-candidates-bug__emacs.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231128T130520--ivy-new-file-creation-completion-candidates-bug__emacs.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[linux ubuntu install]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org8d662b1">1. Linux install 2022-03-06</a></li>
</ul>
</div>
</nav>
<p>
Back in the days when I used to install Linux as a main OS and had to install
all the packages one by one.
</p>

<p>
Before I knew that I can create scripts that do that for me with one click.
TODO add freshsetup things and scripts.
</p>

<p>
Before I knew about <a href="20231211T151427--first-nixos-installation__nixos.html">nixos</a>.
</p>

<p>
All this knowledge has paid off of course, it lead me to my second IT related
job :)
</p>

<p>
Here are the steps anyway:
</p>

<div id="outline-container-org8d662b1" class="outline-2">
<h2 id="org8d662b1"><span class="section-number-2">1.</span> Linux install 2022-03-06</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li class="off"><code>[&#xa0;]</code> install normal + updates - 3rd party packages</li>
<li class="off"><code>[&#xa0;]</code> after install - sudo apt upgrade (daug)</li>
<li class="off"><code>[&#xa0;]</code> website download - chrome.deb</li>
<li class="off"><code>[&#xa0;]</code> website download - dropbox.deb</li>
<li class="off"><code>[&#xa0;]</code> wait dropbox to download</li>
<li class="off"><code>[&#xa0;]</code> sudo apt insall git</li>
<li class="off"><code>[&#xa0;]</code> sudo apt install emacs</li>
<li class="off"><code>[&#xa0;]</code> add the initial init.el file to .emacs.d folder</li>
<li class="off"><code>[&#xa0;]</code> M-x all-the-icons-install-fonts</li>
<li class="off"><code>[&#xa0;]</code> setxkbmap -option ctrl:swapcaps to bashrc to swap caps and ctrl</li>
<li class="off"><code>[&#xa0;]</code> sudo apt install pip (installs bunch of packages&#x2026; apie 30)</li>
<li class="off"><code>[&#xa0;]</code> sudo apt install elpa-elpy</li>
<li class="off"><code>[&#xa0;]</code> sudo apt install python3-jedi black python3-autopep8 yapf3 python3-yapf</li>
<li class="off"><code>[&#xa0;]</code> pip install rope</li>
<li class="off"><code>[&#xa0;]</code> do elpy-config and see what it writes there. Install all it asks</li>
<li class="off"><code>[&#xa0;]</code> sudo apt install flake8</li>
<li class="off"><code>[&#xa0;]</code> pip install yapf</li>
<li class="off"><code>[&#xa0;]</code> pip install jedi</li>
<li class="off"><code>[&#xa0;]</code> Kad veiktu FACEBOOK DJANGO - sudo apt install python3-tk
python-dev, tuomet sudo apt-get install xclip, sudo apt install scrot</li>
<li class="off"><code>[&#xa0;]</code> download github. go to developer settings and create personal
access token. This is your password now.</li>
<li class="off"><code>[&#xa0;]</code> Do 'git config &#x2013;global credential.helper store' in command line
and attempt to make a push (from command line). Enter username and
email, later probably a password as well. Then git should work
through magit an everyhere else with no password asked.</li>
<li class="off"><code>[&#xa0;]</code> install lithuanian language on linux (Settings -&gt; Regional &amp; Language)</li>
<li class="off"><code>[&#xa0;]</code> '(org-level-1 ((t (:inherit outline-1 :height 1.1))))) to make
headings larger</li>
<li class="off"><code>[&#xa0;]</code> sudo apt install ripgrep (kad veiktu rg emacse)</li>
</ul>

<ul class="org-ul">
<li class="off"><code>[&#xa0;]</code> <span class="timestamp-wrapper"><span class="timestamp">&lt;2022-03-13 Sun&gt;</span></span></li>
<li class="off"><code>[&#xa0;]</code> sudo apt install npm (for prettier to work on emacs)</li>
<li class="off"><code>[&#xa0;]</code> sudo npm install -g prettier (for emacs prettier)</li>
<li class="off"><code>[&#xa0;]</code> sudo apt install cmake and libtool and libvterm-dev (for vterm) and <a href="https://linuxize.com/post/how-to-install-gcc-compiler-on-ubuntu-18-04/">this</a></li>
<li class="off"><code>[&#xa0;]</code> <span class="timestamp-wrapper"><span class="timestamp">&lt;2022-03-15 Tue&gt;</span></span></li>
<li class="off"><code>[&#xa0;]</code> sudo apt install python3.8-venv (del django)</li>
</ul>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-linux.html">linux</a> </div>]]></description>
  <category><![CDATA[linux]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231128T130237--linux-ubuntu-install__linux.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231128T130237--linux-ubuntu-install__linux.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[printing with cups in ubuntu]]></title>
  <description><![CDATA[
<p>
video explaining - <a href="https://www.youtube.com/watch?v=En2DJAMpwmY">https://www.youtube.com/watch?v=En2DJAMpwmY</a>
</p>

<ul class="org-ul">
<li>sudo apt install cups</li>
<li>sudo systemctl enable cups</li>
<li>sudo systemctl start cups</li>
<li>sudo systemctl status cups</li>
<li>download drivers from <a href="https://support.hp.com/lt-en/drivers/selfservice/samsung-xpress-sl-m2022-laser-printer-series/17157279/model/17157283">here</a></li>
<li>sudo tar -xvzf udl bla folderi ta draiverio</li>
<li>sudo ./install.sh</li>
<li>login to cups service - <a href="http://localhost:631/">http://localhost:631/</a></li>
<li>add printer, pasirenki samsung m2020 series</li>
<li>draiveriai turetu automatiskai buti parinkti teisingi samsung m2020
series (en)</li>
<li>add printer</li>
<li>spausdink i sveikata</li>
</ul>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-linux.html">linux</a> </div>]]></description>
  <category><![CDATA[linux]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231128T130210--printing-with-cups-in-ubuntu__linux.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231128T130210--printing-with-cups-in-ubuntu__linux.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[manjaro installation]]></title>
  <description><![CDATA[
<p>
First of all - choose non free drivers, cuz of nividia drivers that I have.
hope it will solve the problem with the dwm and random screen freezes + tags
not working&#x2026;
</p>

<p>
IMMEADITELY AFTER INSTALL
</p>

<p>
htop check - 650M/7.60G 73tasks 143thr
sensors check 54
</p>

<p>
firewall - on
</p>

<p>
go to updates - update everything that is there (matcha gtk theme this time.. ikd)
</p>

<p>
3 dots in the same window -&gt; preferences
</p>

<p>
official repositories -&gt; refresh mirrors list (3-10mins)
</p>

<p>
AUR -&gt; enable aur support, keep build packages in cache, check for updates
</p>

<p>
manjaro settings manager -&gt; hardware configuration to see the drivers. graphic drivers preferably shoul be alright. google idk.. this time wont do anything.
</p>


<p>
INSTALLING TIMESHIFT
</p>

<p>
install timeshift through the package downloader gui
go through the wizard, make sure to set the location of the timeshifts to the home folder
</p>

<p>
maybe set daily 1?
</p>

<p>
root - include all fles
home - include hidden files only
</p>

<p>
make one timeshift copy BEFORE installing all the other apps and changes.
</p>

<p>
INSTALLING PACKAGES
</p>

<p>
sudo pacman -Syu -&#x2014;  System Update
</p>

<p>
install anki throught the shop - terminal version is too big lol.
sudo pacman -S vim
sudo pacman -S brave
</p>

<p>
get DWM, follow this tutorial -
 <a href="https://www.youtube.com/watch?v=dP8OKP-r1tw">https://www.youtube.com/watch?v=dP8OKP-r1tw</a>
</p>

<p>
getting it
sudo pacman -S git base-devel
git clone <a href="https://git.suckless.org/dwm">https://git.suckless.org/dwm</a>
git clone <a href="https://git.suckless.org/st">https://git.suckless.org/st</a>
sudo pacman -S dmenu
</p>

<p>
installing/making it
cd dwm
sudo make clean install
cd st
sudo make clean install
</p>

<p>
now dmenu is installed, st and dwm as well.
now you might think you just log out and it is there, but the computer doest know it has it
it doesnt know how to run it.
</p>

<p>
try typing dwm - you see it says another is running
</p>

<p>
cd /usr/share/xsessions
</p>

<p>
sudo vim DWM.desktop
</p>

<p>
paste this in:
</p>

<p>
[Desktop Entry]
Encoding=UTF-8
Name=DWM
Comment=Dynamic Window Manager
Exec=/usr/local/bin/dwm
Icon=
Type=Application
</p>


<p>
logout, check the bottom right corner - choose dwm.
</p>


<p>
make one more timeshift now.
Installed - vim, dwm, st, git, anki, brave
</p>



<p>
##################### CUZTOMIZING ########################
</p>

<p>
vim plugins
brave vimium
st terminal (line, font, colors)
</p>

<p>
install image viewer (through the shop, smalles one possible)
</p>


<p>
print dwm commands
print vim commands
print linux commands
print vimium commands
</p>


<p>
##################### PRINTING  ########################
</p>


<p>
install cups for printing. (through the shop)
run ./install.sh from the drivers, hopefully also on github.
<a href="https://wiki.manjaro.org/index.php/Printing">https://wiki.manjaro.org/index.php/Printing</a>
follow first steps from that tutorial or just do:
pamac install manjaro-printer (chose nothing)
sudo gpasswd -a aze sys
sudo systemctl enable &#x2013;now cups.service
and go to cups and do a test page
it works!!
</p>

<p>
try write in terminal:
lp filename or
lpr filename
</p>

<p>
see if prints. if doest, then do this command
lpstat -p -d
if says there is no destination set, do this:
Your printer should have a name of some sort &#x2013; say, InkJet or something similar &#x2013; defined in CUPS. In CUPS (<a href="http://localhost:631">http://localhost:631</a>), click on Printers, then click on the name of the printer. Then click on Administration and finally, click on Set as Server Default. Exit CUPS.
</p>

<p>
restart computer, do this command again, should be fine.
</p>

<p>
fuck I made it work. now write lp filename and it prints!!! wow man. :)
</p>



<p>
##################### WIFI  ########################
</p>

<p>
type nmtui
and choose connection
</p>



<p>
################### DWM bg image ###################
</p>

<p>
first lets create a patch for dwm that on every autostart will look for an image and set it up, later we will use the same autostart patch to make the status bar thingy.
</p>

<p>
go to dwm folder, make this file:
dwm-autostart-20161205-bb3bd6f.diff
</p>

<p>
go to this link
<a href="https://dwm.suckless.org/patches/autostart/">https://dwm.suckless.org/patches/autostart/</a>
then copy the patch code of the first file, named same like you just created and paste the contents into your file.
good.
</p>

<p>
now in dwm folder do sudo make clean uninstall
then patch &#x2013;merge -i dwm-autostar and tab to finish
enter
</p>

<p>
will write that it has been installed.
then we make sudo make clean install again.
</p>

<p>
now lets make a .dwm folder, in which dwm will look for autostart.sh file every time it is booted.
</p>

<p>
mkdir .dwm
vim autostart.sh
write
#! /bin/bash
</p>

<p>
feh &#x2013;bg-scale ~/pics/sunsetdunes.jpg
:wq
sudo chmod +x autostart.sh
./autostart.sh
and the background should be set.
change the image to see the effect and the script working. so cool dude first bash script.
</p>


<p>
################### DWM admin bar ###################
</p>

<p>
<a href="https://www.youtube.com/watch?v=gz0rd7_8tf0">https://www.youtube.com/watch?v=gz0rd7_8tf0</a>
this video.
</p>

<p>
sudo pacman -S xorg
xsetroot -name "hello" - puts hello into the bar.
</p>

<p>
go to .dwm
vim autostart.sh
then add
while true; do
        xsetroot -name "$(date)
        sleep 1s
done
</p>

<p>
set up aliases for terminal cd .. some cool things, just like the hobyist
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-linux.html">linux</a> </div>]]></description>
  <category><![CDATA[linux]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231128T130148--manjaro-installation__linux.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231128T130148--manjaro-installation__linux.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[alpine installation]]></title>
  <description><![CDATA[
<p>
Decided to install alpine(again) and see what it's all about. Started with <a href="https://www.youtube.com/watch?v=E7zJTzf0pWA&amp;ab_channel=ProgrammerGuide">this</a>
tutorial.
</p>

<p>
INSTALLATION GUIDE
</p>

<ul class="org-ul">
<li>install virtual machine with 1gb and 10gb</li>
<li>ping google.com for internet connection</li>
<li>apk add sudo (might not need this, just enable community first)</li>
<li>sudo apk add htop</li>
<li>vi /etc/apk/repositories - enable community one</li>
<li>apk update</li>
<li>sudo apk add emacs</li>
</ul>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-alpine.html">alpine</a> <a href="https://arvydasg.github.io/devnotes/html/tag-linux.html">linux</a> </div>]]></description>
  <category><![CDATA[alpine]]></category>
  <category><![CDATA[linux]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231128T130129--alpine-installation__alpine_linux.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231128T130129--alpine-installation__alpine_linux.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[python development in emacs]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org8783e0b">1. Dependencies</a></li>
<li><a href="#org54c7697">2. Commands</a></li>
<li><a href="#orgdfbbfd0">3. virtual env</a></li>
</ul>
</div>
</nav>

<div id="outline-container-org8783e0b" class="outline-2">
<h2 id="org8783e0b"><span class="section-number-2">1.</span> Dependencies</h2>
<div class="outline-text-2" id="text-1">
<p>
Simple python dev environment that does the job(without lsp)
</p>

<p>
Skybert paaiskinimas
<a href="https://www.youtube.com/watch?v=JmmTUIahB1U&amp;ab_channel=SkybertHacks">https://www.youtube.com/watch?v=JmmTUIahB1U&amp;ab_channel=SkybertHacks</a>
</p>

<p>
Maybe dont even touch LSP FOR PYTHON.
</p>

<p>
simply create environment with pyvenv-create
then pyvenv-workon
then install the the needed packages that are described in elpy-config
pip3 install jedi autopep8 yapf black flake8 ipython importmagic
</p>

<p>
ipython - IPython is generally considered more feature-rich and
provides a more interactive and convenient experience. If you prefer
advanced features like tab completion, syntax highlighting, and
command history, IPython may be a better choice.
</p>

<p>
set this: basically is what you get when doing ctrl+ret on a piece of
code. looks more fancy, indeed, that python3 interpreter.
</p>

<div class="org-src-container">
<pre class="src src-bash">(setq python-shell-interpreter "ipython"
      python-shell-interpreter-args "-i --simple-prompt")
</pre>
</div>

<p>
importmagic - Importmagic helps simplify the process by automatically analyzing
your code and suggesting or making changes to import statements based on the
modules and symbols used in your code. It can detect missing imports, remove
unused imports, and reorder existing imports according to a specified style or
convention.
</p>

<p>
if want auto-completion, warnings, navigation, IDE features like
rename - get eglot like here -
<a href="https://www.youtube.com/watch?v=JmmTUIahB1U&amp;ab_channel=SkybertHacks">https://www.youtube.com/watch?v=JmmTUIahB1U&amp;ab_channel=SkybertHacks</a>
</p>

<p>
and that's it, lets get rolling.
</p>

<p>
have syntax highlights, corrections, completions, jumping to definitions etc.
very nice and simple.
</p>

<p>
LSP will be using for JS development and etc.
</p>

<hr>
<p>
LSP setup below(did not work)
</p>

<ul class="org-ul">
<li>LSP package and config</li>
<li>sudo apt install python3 (for python development)</li>
<li>apt install python3.10-venv (for python development)</li>
<li>Install a python language server - <a href="https://emacs-lsp.github.io/lsp-mode/page/lsp-pylsp/">https://emacs-lsp.github.io/lsp-mode/page/lsp-pylsp/</a></li>
<li>berods dariau pip install "python-lsp-server[all]"</li>
<li>paskui sitas sudo apt install pipenv</li>
<li>create a python file</li>
<li>create a virtual environment with python3 -m venv &lt;nameOfEnv&gt; (or
can do with pyvenv-create, then it will create virtual environment
in ~/.virtualenvs folder)</li>
<li>Open emacs, do pyvenv-activate when you are inside the folder
containing &lt;nameOfEnv&gt;</li>
<li>open terminal in emacs (shell, eshell, ansi-term, term) and do which
python. You should see the &lt;nameOfEnv&gt; location. If you want to
disable that env, do pyvenv-deactivate. Terminal will still have the
&lt;nameOfEnv&gt; active, so might need to restart the terminal as well.</li>
<li>But then you will still get some sentinel error 1 errors</li>
<li>Lets see elpy config</li>
</ul>

<hr>
<p>
more elpy docs:
</p>

<p>
<span class="timestamp-wrapper"><span class="timestamp">[2022-02-20 Sun] </span></span> TUT: "Elpy" - various python modes for easier python
programming. Installs various other packages as well. A few videos to help
install elpy and customize.
</p>

<p>
<a href="https://www.youtube.com/watch?v=0kuCeS-mfyc">https://www.youtube.com/watch?v=0kuCeS-mfyc</a>,
<a href="https://www.youtube.com/watch?v=mflvdXKyA_g">https://www.youtube.com/watch?v=mflvdXKyA_g</a>
<a href="https://elpy.readthedocs.io/en/latest/index.html">https://elpy.readthedocs.io/en/latest/index.html</a>
</p>

<p>
When using tab auto completion, click f1 and get the explanation in another
buffer. Company doccumentation window. and of course more amazing <a href="https://gist.github.com/mahyaret/a64d209d482fc0f5eca707f12ccce146">shortcuts</a>
Here.
</p>

<p>
If documentation suggestions get annoying - turn off eldoc mode
</p>

<p>
INSTALL:
</p>
<ol class="org-ol">
<li>sudo pip install elpy rope jedi</li>
<li>add export PATH=$PATH:~/.local/bin to your .bashrc file and reload
Emacs.</li>
<li>should get a message asking something about RPC, click yes.</li>
<li>then make sure jedi is installed in your system. others use flake8,
others use jedi.. idk. zamansky and the guy from he tutorial video
use jedi.</li>
<li>do M-x elpy-config to see the config</li>
<li>check your .emacs.d folder. if there is one called "elpy" and it is
empty or something, do M-x elpy-rpc-restart. Folders will appear,
packages will install. Then do elpy-config</li>
<li>pip install flake8 - get to see more syntax checks. M-x elpy-config
to confirm its installed</li>
</ol>
</div>
</div>

<div id="outline-container-org54c7697" class="outline-2">
<h2 id="org54c7697"><span class="section-number-2">2.</span> Commands</h2>
<div class="outline-text-2" id="text-2">
<p>
lsp-doctor
lsp-install server
</p>
</div>
</div>

<div id="outline-container-orgdfbbfd0" class="outline-2">
<h2 id="orgdfbbfd0"><span class="section-number-2">3.</span> virtual env</h2>
<div class="outline-text-2" id="text-3">
<p>
~/.virtualenvs/ - cia guli visos virtual env
</p>

<ul class="org-ul">
<li>ijunk emacs ir iskart daryk pyvenv workon</li>
<li>pip list(ar viso kompo info ziuri ar tik env environment)</li>
<li>pyvenv-workon - create a virtual env in a folder</li>
<li>pip list</li>
<li>elpy config - susiinstallink visus packages</li>
</ul>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> <a href="https://arvydasg.github.io/devnotes/html/tag-python.html">python</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[python]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231126T014740--python-development-in-emacs__emacs_python.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231126T014740--python-development-in-emacs__emacs_python.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[how to run a flask app]]></title>
  <description><![CDATA[
<p>
If you have someting like this in <code>app.py</code>:
</p>
<div class="org-src-container">
<pre class="src src-python">if __name__ == "__main__":
    with app.app_context():
        db.create_all()
    app.run(host="0.0.0.0", debug=True)
</pre>
</div>

<p>
Run the app with:
</p>
<div class="org-src-container">
<pre class="src src-python">python3 app.py
</pre>
</div>

<p>
The app should run.
</p>

<p>
NOTe: If you try to run with <code>flask run</code> - changes might not automatically
refresh in the browser. You might have to restart the server each time you make
a change.
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-flask.html">flask</a> <a href="https://arvydasg.github.io/devnotes/html/tag-python.html">python</a> </div>]]></description>
  <category><![CDATA[flask]]></category>
  <category><![CDATA[python]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231126T014659--how-to-run-a-flask-app__flask_python.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231126T014659--how-to-run-a-flask-app__flask_python.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[make denote faster on wsl]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgaa948fa">1. My question to chatgpt <span class="timestamp-wrapper"><span class="timestamp">&lt;2023-11-26 Sun&gt;</span></span>.</a></li>
<li><a href="#orga5dbd94">2. Solution not worth considering</a></li>
<li><a href="#org0201517">3. Temporary working solution</a></li>
<li><a href="#org58b3c28">4. Permanent working solution</a>
<ul>
<li><a href="#org30ffe8c">4.1. Option 1 - use <code>cp</code> command to copy</a></li>
<li><a href="#orgb931bbd">4.2. Option 2(final) - Use <code>rsync</code> command</a></li>
<li><a href="#org5a16019">4.3. Update <code>.bashrc</code> file to copy automatically</a></li>
</ul>
</li>
</ul>
</div>
</nav>
<p>
Before this change the denote notes were stored on Windows system and it would take
time for them to get fetched and opened on Emacs that runs in WSL. Each denote
command or simply opening a file would take longer than usual. This was
annoying.
</p>

<p>
So I have moved all the denote note files to WSL. Then created a script that
would copy all the note files into windows machine, onedrive folder, for them
to be synced to my onedrive cloud. This will act as a security measure in case
I forget to commit my notes to git and my machine dies. I will still have a
quite recent copy of the notes in OneDrive.
</p>

<div id="outline-container-orgaa948fa" class="outline-2">
<h2 id="orgaa948fa"><span class="section-number-2">1.</span> My question to chatgpt <span class="timestamp-wrapper"><span class="timestamp">&lt;2023-11-26 Sun&gt;</span></span>.</h2>
<div class="outline-text-2" id="text-1">
<blockquote>
<p>
I have lots of .org files, I currently store them on my window's
machine, onedrive folder. So they are backed up to the cloud.
</p>

<p>
I want to use those notes in a text editor called emacs. But when I
ntry to reach the notes over wsl, I must go this path to reach them on
windows - /mnt/c/user/xxx/org-notes to
</p>

<p>
this loads the notes very slowly compared if they were on wsl
directly.
</p>

<p>
How can I BOTH have the files load quickly, same as if they were on my
wsl AND have those files in google cloud?
</p>
</blockquote>
</div>
</div>

<div id="outline-container-orga5dbd94" class="outline-2">
<h2 id="orga5dbd94"><span class="section-number-2">2.</span> Solution not worth considering</h2>
<div class="outline-text-2" id="text-2">
<p>
I heard that you can create a symlink from windows to wsl. I tried doing that:
</p>

<div class="org-src-container">
<pre class="src src-bash"># open cmd as admin
cd /d C:\Users\arvydas\OneDrive\Documents
mklink /D HELLO \\wsl.localhost\Ubuntu\home\arvy\.emacs.d\EMACS_DALYKAI
</pre>
</div>

<p>
That worked, symlink was created, but then I started to think what would happen
if I delete WSL. All my notes will also be deleted. Meaning that the symlink
will point to nowhere. Not good. Ditched this idea.
</p>
</div>
</div>

<div id="outline-container-org0201517" class="outline-2">
<h2 id="org0201517"><span class="section-number-2">3.</span> Temporary working solution</h2>
<div class="outline-text-2" id="text-3">
<p>
Create a symbolic link within WSL that points directly to your
OneDrive folder:
</p>

<div class="org-src-container">
<pre class="src src-bash">ln -s /mnt/c/Users/xxx/org-notes /path/in/WSL/org-notes
</pre>
</div>

<p>
This will enable a little bit faster access to your OneDrive-stored
.org files within WSL.
</p>

<p>
Yes, I think it is faster. Notes are created and opened faster.
</p>
</div>
</div>

<div id="outline-container-org58b3c28" class="outline-2">
<h2 id="org58b3c28"><span class="section-number-2">4.</span> Permanent working solution</h2>
<div class="outline-text-2" id="text-4">
<p>
What I will do is create a shell script that will automatically run on each wsl
launch. It will copy the files from wsl notes dir to OneDrive notes dir.
</p>

<p>
commit - 2ba4f55
</p>
</div>

<div id="outline-container-org30ffe8c" class="outline-3">
<h3 id="org30ffe8c"><span class="section-number-3">4.1.</span> Option 1 - use <code>cp</code> command to copy</h3>
<div class="outline-text-3" id="text-4-1">
<p>
Shell script lies in:
</p>

<div class="org-src-container">
<pre class="src src-bash">~/.emacs.d/MISC/copy_to_onedrive.sh
</pre>
</div>

<p>
Can use a simple copy method to copy the files:
</p>

<ul class="org-ul">
<li>no progress</li>
<li>no exclusion of directories</li>
<li>takes everything, not only what has changed</li>
<li>can not show stats of the run</li>
</ul>

<div class="org-src-container">
<pre class="src src-bash">cp -r GIT/notes/* /mnt/c/Users/arvydas/OneDrive/Documents/notes/
</pre>
</div>
</div>
</div>

<div id="outline-container-orgb931bbd" class="outline-3">
<h3 id="orgb931bbd"><span class="section-number-3">4.2.</span> Option 2(final) - Use <code>rsync</code> command</h3>
<div class="outline-text-3" id="text-4-2">
<p>
Or can use <code>Rsycn</code> - it performs synchronization between source and
destination. It copies only the differences between the source and destination
files. It checks file timestamps and sizes to determine which files need to be
updated
</p>

<div class="org-src-container">
<pre class="src src-bash">rsync -ah --progress --delete --exclude='.git' GIT/notes/ /mnt/c/Users/arvydas/OneDrive/Documents/notes/ --stats
</pre>
</div>

<p>
Then make this file executable:
</p>

<div class="org-src-container">
<pre class="src src-bash">chmod +x .emacs.d/MISC/copy_to_onedrive.sh
</pre>
</div>
</div>
</div>

<div id="outline-container-org5a16019" class="outline-3">
<h3 id="org5a16019"><span class="section-number-3">4.3.</span> Update <code>.bashrc</code> file to copy automatically</h3>
<div class="outline-text-3" id="text-4-3">
<p>
Add the script execution to your .bashrc
</p>

<div class="org-src-container">
<pre class="src src-bash">echo '~/.emacs.d/MISC/copy_to_onedrive.sh' &gt;&gt; ~/.bashrc
</pre>
</div>

<p>
Now the script will be run with <code>source .bashrc</code> AKA with each launch of wsl.
Which is maybe more than we need, but good anyway.
</p>

<p>
Whenever I launch wsl I will be able to see the progress of the rsynch copying
procedure.
</p>
</div>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> <a href="https://arvydasg.github.io/devnotes/html/tag-rsync.html">rsync</a> <a href="https://arvydasg.github.io/devnotes/html/tag-scripting.html">scripting</a> <a href="https://arvydasg.github.io/devnotes/html/tag-wsl.html">wsl</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[rsync]]></category>
  <category><![CDATA[scripting]]></category>
  <category><![CDATA[wsl]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231126T012052--make-denote-faster-on-wsl__emacs_rsync_scripting_wsl.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231126T012052--make-denote-faster-on-wsl__emacs_rsync_scripting_wsl.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[emacs hooks explanation]]></title>
  <description><![CDATA[
<p>
Amazing tutorial here at 1:13:40 -
<a href="https://www.youtube.com/watch?v=gfZDwYeBlO4&amp;t=2637s">https://www.youtube.com/watch?v=gfZDwYeBlO4&amp;t=2637s</a> All of this is done in
scratch buffer.
</p>

<p>
First, lets find what kind of function we want to add our code to. Let's say
<code>org-clock-in</code>. When I do org-clock-in command, I want my piece of code to run.
Okay. Let's find the "org-clock-in" source code. Press C-h k - this will ask us
to input a command. We input the command we are curious about. It is
"org-clock-in" command, which is C-c C-x C-i. As we write that command and
press enter, we get the following result:
</p>

<p>
C-c C-x TAB runs the command org-clock-in (found in org-mode-map), which is an
interactive autoloaded compiled Lisp function in ‘org-clock.el’.
</p>

<p>
Aha! Function in 'org-clock.el'. Okay, we click on that and it leads us to the
source code of "org-clock-in". We look for a hook function in there. We do C-s
to find work, find the "org-clock-in-hook" function and now we are ready to
write our little piece of code, since we know a hook for it exists.
</p>

<p>
And that would be the little piece of code. We are adding a hook, and after
lambda inputting our function. Great.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(add-hook 'org-clock-in-hook '(lambda () (message "this works")))
</pre>
</div>

<p>
We then evaluate that function by C-c C-e with our cursor at the last ) and
then we can go to an .org file and call "org-clock-in" function and watch our
message bar. The message will show up there.
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231126T005654--emacs-hooks-explanation__emacs.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231126T005654--emacs-hooks-explanation__emacs.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[javascript in emacs]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orga217fd3">1. dap mode debugger for javacript</a></li>
<li><a href="#orgedc369c">2. run js files in emacs</a>
<ul>
<li><a href="#org992ceed">2.1. javascript and emacs</a></li>
<li><a href="#orgf719368">2.2. skewer mode - live javascipt in browser</a></li>
<li><a href="#org6d17620">2.3. live js editing in emacs with skewer mode</a></li>
<li><a href="#org23faab4">2.4. emacs live javascript editing lsp mode</a>
<ul>
<li><a href="#org6ea2001">2.4.1. traukti fn name - megins surasti vistiek. Labai pravartu</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</nav>

<div id="outline-container-orga217fd3" class="outline-2">
<h2 id="orga217fd3"><span class="section-number-2">1.</span> dap mode debugger for javacript</h2>
<div class="outline-text-2" id="text-1">
<p>
docs - <a href="https://emacs-lsp.github.io/dap-mode/page/configuration/#javascript">https://emacs-lsp.github.io/dap-mode/page/configuration/#javascript</a>
</p>

<ul class="org-ul">
<li>download zip file from <a href="https://emacs-lsp.github.io/dap-mode/page/configuration/#javascript">here</a>.</li>
<li>create two folders ~/.emacs.d/.extension/vscode</li>
<li>only extract it like described <a href="https://github.com/emacs-lsp/dap-mode/issues/554#issuecomment-1171256089">here</a>.</li>
<li>jeigu sako jog file location not found (buffer chrome browser
stderr) - perkelk parsisiustus files ten kur jis iesko</li>
<li>M-x dap-chrome-setup (while in .js window)</li>
<li>M-x dap-debug and choose THE SAME url as live server - f.x react runs
on this <a href="http://localhost:3000/">http://localhost:3000/</a></li>
<li>Or choose file - M-x dap-debug and choose file option</li>
<li>then it works boyyyy</li>
<li>dap-debug-last to repeat the last debug command, no need to
respecify stuff</li>
<li>Download the React DevTools for a better development experience:
<a href="https://reactjs.org/link/react-devtools">https://reactjs.org/link/react-devtools</a> - components and profiler
thingies will apper in developer toolbar</li>
<li>right click on debug  sessions to delete all old sessions</li>
<li>double click on the session to navigate there</li>
<li>dap-switch-stack-frame - same jump, just without a mouse</li>
<li>dap-disconnect - stops debugging</li>
<li>dap-debug-recent - see all the recent sessions</li>
<li>dap-ui-sessions to jump to sessions and then D to delete sessions</li>
<li>dap-debug-edit-template</li>
<li>and ofc some thoughts from <a href="https://www.youtube.com/watch?v=0bilcQVSlbM&amp;ab_channel=SystemCrafters">System Crafters</a>.</li>
</ul>
</div>
</div>

<div id="outline-container-orgedc369c" class="outline-2">
<h2 id="orgedc369c"><span class="section-number-2">2.</span> run js files in emacs</h2>
<div class="outline-text-2" id="text-2">
<p>
have node installed
</p>

<p>
can do node testfile.js
ir kaskart sita runinant - pakalkuluos tau dalykus. Aisku su python
patogiau, gali line by line evaluate, bet vis sis tas.
</p>

<p>
arba gali naudoti javascript repl(M-x run-js), bus toks pat dalykas kaip ir
browserio consoleje - tik naudok sita<a href="https://github.com/redguardtoo/js-comint"> js-comint</a> package
</p>

<p>
js-run
js-send-region
</p>
</div>

<div id="outline-container-org992ceed" class="outline-3">
<h3 id="org992ceed"><span class="section-number-3">2.1.</span> javascript and emacs</h3>
<div class="outline-text-3" id="text-2-1">
<p>
today installed javascript syntax highlighting for emacs - js2-mode.
Love it. Here are some more ideas:
</p>

<p>
<a href="https://github.com/howardabrams/dot-files/blob/master/emacs-javascript.org">https://github.com/howardabrams/dot-files/blob/master/emacs-javascript.org</a>
</p>
</div>
</div>
<div id="outline-container-orgf719368" class="outline-3">
<h3 id="orgf719368"><span class="section-number-3">2.2.</span> skewer mode - live javascipt in browser</h3>
<div class="outline-text-3" id="text-2-2">
<ul class="org-ul">
<li>run skewer in javascript file</li>
<li>c-c c-k load javascipt buffer to skewer</li>
<li>ctrl+alt+x to reflect changes in browser</li>
</ul>
</div>
</div>
<div id="outline-container-org6d17620" class="outline-3">
<h3 id="org6d17620"><span class="section-number-3">2.3.</span> live js editing in emacs with skewer mode</h3>
<div class="outline-text-3" id="text-2-3">
<ol class="org-ol">
<li>open a js file</li>
<li>Enable JS2-mode (a dependency of skewer)</li>
<li>Enable skewer-mode</li>
<li>M-xrun-skewer (a browser opens, go back to myskewer.js)</li>
<li>open buffer called <b>http</b> to check if skewer is running, refresh
browser page to confirm</li>
<li>Type alert("hello"); and hit C-xC-e at the end of that line</li>
<li>Go back to the browser.</li>
<li><p>
put in THIS (below) head tag - try to reload index.html window in browser - <b>http</b>
should reflect that
</p>
<div class="org-src-container">
<pre class="src src-html">&lt;script src="http://localhost:8080/skewer"&gt;&lt;/script&gt;
</pre>
</div></li>
<li><p>
load whole buffer if something
</p>

<p>
realiai cia geriausias example -
<a href="https://emacs.stackexchange.com/questions/2376/how-to-use-skewer-mode">https://emacs.stackexchange.com/questions/2376/how-to-use-skewer-mode</a>
</p>

<p>
bet still man nepatinka, neloadina modules&#x2026;
</p></li>
</ol>
</div>
</div>

<div id="outline-container-org23faab4" class="outline-3">
<h3 id="org23faab4"><span class="section-number-3">2.4.</span> emacs live javascript editing lsp mode</h3>
<div class="outline-text-3" id="text-2-4">
<ul class="org-ul">
<li>pirma properly install node</li>
<li>basically sitas video - <a href="https://www.youtube.com/watch?v=E-NAM9U5JYE&amp;ab_channel=SystemCrafters">https://www.youtube.com/watch?v=E-NAM9U5JYE&amp;ab_channel=SystemCrafters</a></li>
<li>install lsp</li>
<li>install needed lsp-language server M-x lsp-install-server(ts-ls in
javascript case)</li>
</ul>
<p>
p- write lsp in opened js buffer - choose location
</p>
<ul class="org-ul">
<li>lsp works. autocompletion, suggestion (m-x completion-at-point) if
it does not</li>
<li>REFERENCE FIND - C-c l g r - find by reference(show in other files) (with evil mode
jump back with c-o)</li>
<li>DEFINITION FIND - C-c l g g - go to definition!!!</li>
<li>RENAME - C-c l r r</li>
<li>green underline - lightbulb to fix the error (flymake enabled) (let
un = undefined;)</li>
<li>lsp format buffer (other packages can do a better job)</li>
<li>lsp-ui-workspace-symbol - nusoks i definition, nebutinai ant jos
hoverint - kazkoks sudas</li>
<li>lsp-ivy-workspace-symbol - nusoks i definition, gali is uzpakalio</li>
</ul>
</div>
<div id="outline-container-org6ea2001" class="outline-4">
<h4 id="org6ea2001"><span class="section-number-4">2.4.1.</span> traukti fn name - megins surasti vistiek. Labai pravartu</h4>
</div>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> <a href="https://arvydasg.github.io/devnotes/html/tag-js.html">js</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[js]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231126T005615--javascript-in-emacs__emacs_js.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231126T005615--javascript-in-emacs__emacs_js.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[run sql from emacs]]></title>
  <description><![CDATA[
<p>
If on Ubuntu:
</p>

<div class="org-src-container">
<pre class="src src-bash">sudo apt-get install sqlite3
</pre>
</div>

<ul class="org-ul">
<li>have an sqlite db ready(possibly from django)</li>
<li>create an org file and follow <a href="https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-sqlite.html">these instructions</a> to connect to the db</li>
<li>I also have this in my emacs config</li>
</ul>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(org-babel-do-load-languages
 'org-babel-load-languages (quote ((emacs-lisp . t)
                                   (sqlite . t)
                                   (R . t)
                                   (python . t))))
</pre>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> <a href="https://arvydasg.github.io/devnotes/html/tag-sql.html">sql</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[sql]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231126T005538--run-sql-from-emacs__emacs_sql.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231126T005538--run-sql-from-emacs__emacs_sql.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[org clock report]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org0ae7b5a">1. examples</a></li>
</ul>
</div>
</nav>
<p>
Was useful in obelsdumas times when I wanted to track how much time I used on
building and working on the project. Padaryti isklotines su laiku kiek dirbau
prie ko ir pan.
</p>

<p>
Link to the docs - <a href="https://orgmode.org/manual/The-clock-table.html">https://orgmode.org/manual/The-clock-table.html</a>
</p>

<div id="outline-container-org0ae7b5a" class="outline-2">
<h2 id="org0ae7b5a"><span class="section-number-2">1.</span> examples</h2>
<div class="outline-text-2" id="text-1">
<p>
<span class="timestamp-wrapper"><span class="timestamp">[2022-04-10 Sun] </span></span> Daily org-diary file report BY TAG
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">#+BEGIN: clocktable :maxlevel 3 :scope file :tags t :sort (1 . ?a) :emphasize t :narrow 100! :match "emacs"
</pre>
</div>

<p>
<span class="timestamp-wrapper"><span class="timestamp">[2022-04-10 Sun] </span></span> Daily org-diary file report without tag, show all tasks
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">#+BEGIN: clocktable :maxlevel 3 :scope file :tags t :sort (1 . ?a) :emphasize t :narrow 100!
</pre>
</div>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231126T005411--org-clock-report__emacs.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231126T005411--org-clock-report__emacs.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[org agenda]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orga558653">1. tips</a></li>
<li><a href="#orga54b560">2. advanced agenda</a></li>
<li><a href="#orgfde3435">3. org agenda filtering</a></li>
</ul>
</div>
</nav>

<div id="outline-container-orga558653" class="outline-2">
<h2 id="orga558653"><span class="section-number-2">1.</span> tips</h2>
<div class="outline-text-2" id="text-1">
</div>
</div>

<div id="outline-container-orga54b560" class="outline-2">
<h2 id="orga54b560"><span class="section-number-2">2.</span> advanced agenda</h2>
<div class="outline-text-2" id="text-2">
<ul class="org-ul">
<li>advanced searching - <a href="https://orgmode.org/worg/org-tutorials/advanced-searching.html">https://orgmode.org/worg/org-tutorials/advanced-searching.html</a></li>
<li>special agenda views - <a href="https://orgmode.org/manual/Special-Agenda-Views.html">https://orgmode.org/manual/Special-Agenda-Views.html</a></li>
<li>agenda- commands <a href="https://orgmode.org/manual/Agenda-Commands.html">https://orgmode.org/manual/Agenda-Commands.html</a></li>
</ul>
</div>
</div>

<div id="outline-container-orgfde3435" class="outline-2">
<h2 id="orgfde3435"><span class="section-number-2">3.</span> <a href="https://orgmode.org/worg/doc.html">org agenda filtering</a></h2>
<div class="outline-text-2" id="text-3">
<p>
was useful when needed to filter by effor. use this- _
</p>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231126T005253--org-agenda__emacs.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231126T005253--org-agenda__emacs.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[byte compile emacs packages]]></title>
  <description><![CDATA[
<p>
<a href="https://stackoverflow.com/questions/24725778/how-to-rebuild-elpa-packages-after-upgrade-of-emacs">what is it</a>
</p>

<p>
It was useful for me when I was installing 28 emacs on ubuntu and then lost
syntax highlighting in js2 mode. I then found <a href="https://github.com/mooz/js2-mode/issues/72#issuecomment-15176816">this</a> fix. did M-: and wrote this
to fix it:
</p>

<div class="org-src-container">
<pre class="src src-elisp">;; dont forget the exact file path
(byte-recompile-directory (expand-file-name "~/.emacs.d/elpa/js2-mode-20130307.2012/") 0 t)
</pre>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231126T005026--byte-compile-emacs-packages__emacs.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231126T005026--byte-compile-emacs-packages__emacs.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[swap ctrl with capslock]]></title>
  <description><![CDATA[
<p>
Doing this mainly for emacs.
</p>

<p>
I guess this in linux:
</p>
<div class="org-src-container">
<pre class="src src-bash">/usr/bin/setxkbmap -option "ctrl:swapcaps"
</pre>
</div>

<p>
and I use powertoys windows app for windows to accomplish the same.
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> <a href="https://arvydasg.github.io/devnotes/html/tag-linux.html">linux</a> <a href="https://arvydasg.github.io/devnotes/html/tag-windows.html">windows</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[linux]]></category>
  <category><![CDATA[windows]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231126T004316--swap-ctrl-with-capslock__emacs_linux_windows.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231126T004316--swap-ctrl-with-capslock__emacs_linux_windows.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[install emacs on windows]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org57ab7b8">1. Installation 1:</a></li>
<li><a href="#org6f093f5">2. Installation 2:</a></li>
</ul>
</div>
</nav>
<p>
Not sure if installation 1 or installation 2 is the good one, so when you will
try to install it once again - summarize the instructions to a proper document.
</p>

<div id="outline-container-org57ab7b8" class="outline-2">
<h2 id="org57ab7b8"><span class="section-number-2">1.</span> Installation 1:</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li class="off"><code>[&#xa0;]</code> Great <a href="https://www.youtube.com/watch?v=0OLfdiZ_b0k&amp;ab_channel=LigerLearn">video here</a> showcasing the steps below</li>
<li class="off"><code>[&#xa0;]</code> install emacs from <a href="http://ftp.gnu.org/gnu/emacs/windows/">here</a></li>
<li class="off"><code>[&#xa0;]</code> go to C:\Program Files\Emacs, find emacs, take the run icon</li>
<li class="off"><code>[&#xa0;]</code> launch emacs, press C-x C-f, then press ~/ - shows you the
directory emacs thinks of as 'HOME'</li>
<li class="off"><code>[&#xa0;]</code> create init.el file in here, Save-as init.el - then the file is
with correct file extension and not .txt</li>
<li class="off"><code>[&#xa0;]</code> <p>
add basic emacs config, such as:
press C-c C-, to make the source block
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(setq inhibit-startup-message t
      initial-scratch-message "Hello world"
      cursor-type 'bar) (setq inhibit-startup-message t)
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(defalias 'yes-or-no-p 'y-or-n-p)
</pre>
</div></li>
<li class="off"><code>[&#xa0;]</code> Restart emacs and check if it works (it should)</li>
<li class="off"><code>[&#xa0;]</code> install fonts on windows machine
<a href="https://github.com/domtronn/all-the-icons.el/tree/master/fonts">https://github.com/domtronn/all-the-icons.el/tree/master/fonts</a> go
here, download fonts one by one and install</li>
<li class="off"><code>[&#xa0;]</code> install python on windows
<a href="https://stackoverflow.com/questions/65348890/python-was-not-found-run-without-arguments-to-install-from-the-microsoft-store">https://stackoverflow.com/questions/65348890/python-was-not-found-run-without-arguments-to-install-from-the-microsoft-store</a></li>
<li class="off"><code>[&#xa0;]</code> <p>
windows + linux configas
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(cond ((eq system-type 'windows-nt)
       (defun display-startup-echo-area-message ()
         (message "Writing from windows"))
       )
      ((eq system-type 'gnu/linux)
       (defun display-startup-echo-area-message ()
         (message "Writing from linux"))
       ))
</pre>
</div></li>
</ul>
</div>
</div>

<div id="outline-container-org6f093f5" class="outline-2">
<h2 id="org6f093f5"><span class="section-number-2">2.</span> Installation 2:</h2>
<div class="outline-text-2" id="text-2">
<p>
some useful stuff
<a href="https://www.gnu.org/software/emacs/manual/html_mono/efaq-w32.html#Location-of-init-file">https://www.gnu.org/software/emacs/manual/html_mono/efaq-w32.html#Location-of-init-file</a>
</p>

<p>
install emacs from here -
<a href="http://ftp.task.gda.pl/pub/gnu/emacs/windows/emacs-27/">http://ftp.task.gda.pl/pub/gnu/emacs/windows/emacs-27/</a>
</p>

<p>
set home path variable like the guy in this tut -
<a href="https://lucidmanager.org/productivity/emacs-windows/">https://lucidmanager.org/productivity/emacs-windows/</a>
</p>

<p>
do - setx HOME %USERPROFILE% in windows powershell
</p>

<p>
then you will see that HOME variable has appeared under - settings -&gt;
system -&gt; advanced system settings -&gt; environment variables
</p>

<p>
then open emacs and do C-h v, write user-emacs-directory and enter. It
will create an .emacs.d directory under HOME path.
</p>

<p>
It works, right? okay, now you remember how to set the path.
</p>

<p>
now go back to environment variables and make it like so -
C:\Users\Arvydas\emacs
</p>

<p>
You will place the .emacs file in that folder and also .emacs.d folder
will appear in it. great.
</p>

<p>
put some variables in .emacs and confirm that emacs got modified
</p>

<p>
(menu-bar-mode -1) ; Disable the menu bar (tool-bar-mode -1) ; Disable
the toolbar (tooltip-mode -1) ; Disable tooltips (set-fringe-mode 10)
; Give some breathing room
</p>

<p>
worked for me so far.
</p>

<p>
Time to link it with Dropbox.
</p>

<p>
add this to the .emacs file. right under use-package installation
</p>

<p>
(org-babel-load-file (expand-file-name
"C:\\Users\\Arvydas\\Dropbox\\temp<sub>emacs\\myinit.org</sub>"))
</p>

<p>
imesk theme i .emacs.d, jokiu folderiu. turetu veikti
</p>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> <a href="https://arvydasg.github.io/devnotes/html/tag-windows.html">windows</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[windows]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231126T004115--install-emacs-on-windows__emacs_windows.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231126T004115--install-emacs-on-windows__emacs_windows.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[emacs colors in tmux]]></title>
  <description><![CDATA[
<p>
Jeigu kartais noresi pasileisti emacs in tmux (shudas, kol kas neradau kaip
padaryti, kad galeciau close all headers in .org file), tai noresi tikriausiai
ir spalvas atitaikyti. By default jeigu per tmux paleidi <code>emacs -nw</code>, tuomet
buna shudinos spalvos.
</p>

<p>
Reikia sekti sita tutorial -
<a href="https://unix.stackexchange.com/questions/1045/getting-256-colors-to-work-in-tmux201">https://unix.stackexchange.com/questions/1045/getting-256-colors-to-work-in-tmux201</a>
</p>

<p>
basically this:
</p>

<div class="org-src-container">
<pre class="src src-bash">~$ which tmux
tmux: aliased to TERM=xterm-256color tmux
# and in in my .tmux.conf:

set -g default-terminal "screen-256color"
# Aliasing tmux to "tmux -2" should also do the trick.

#And don't forget to restart your tmux server: (see @mast3r answer)
tmux kill-server &amp;&amp; tmux201
</pre>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> <a href="https://arvydasg.github.io/devnotes/html/tag-tmux.html">tmux</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[tmux]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231126T004018--emacs-colors-in-tmux__emacs_tmux.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231126T004018--emacs-colors-in-tmux__emacs_tmux.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[emacs in daemon mode]]></title>
  <description><![CDATA[
<p>
<a href="https://www.youtube.com/watch?v=ZjCRxAMPdNc&amp;ab_channel=SystemCrafters">link ofc</a>
</p>

<p>
alot of the times config can get big and take 3-5 or even 1-sec to
load.
</p>

<p>
the most important commands:
</p>
<ul class="org-ul">
<li>emacs &#x2013;deamon</li>
<li>OR</li>
<li>emacs &#x2013;fg-deamon (only run foreground process)</li>
<li><code>C-h v server-socket-dir</code> (shows where the server is running)</li>
<li>ls /run/user/1000/emacs</li>
<li><code>emacsclient -c -n</code> (no wait)</li>
<li><code>emacsclient -e "(kill-emacs)"</code> kill the daemon server if you want to
reload the congif</li>
</ul>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231126T003942--emacs-in-daemon-mode__emacs.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231126T003942--emacs-in-daemon-mode__emacs.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[emacs init time]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org536737c">1. emacs init time</a></li>
<li><a href="#org6aebc6d">2. use-package-report</a></li>
<li><a href="#org538615b">3. Show startup time on emacs-load</a></li>
<li><a href="#org4bf085c">4. Message</a></li>
<li><a href="#org0a364f4">5. <span class="todo TODO">TODO</span> now these message are not needed anymore, since I compile emacs at each config change</a></li>
</ul>
</div>
</nav>

<div id="outline-container-org536737c" class="outline-2">
<h2 id="org536737c"><span class="section-number-2">1.</span> emacs init time</h2>
<div class="outline-text-2" id="text-1">
<p>
<a href="https://www.youtube.com/watch?v=9i_9hse_Y08&amp;t=492s">How to Cut Emacs Start Up Time in Half! - Emacs From Scratch #12</a>
</p>
</div>
</div>

<div id="outline-container-org6aebc6d" class="outline-2">
<h2 id="org6aebc6d"><span class="section-number-2">2.</span> use-package-report</h2>
<div class="outline-text-2" id="text-2">
<p>
<span class="timestamp-wrapper"><span class="timestamp">[2022-04-10 Sun] </span></span> allows to invoke and use use-package-report
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(setq use-package-compute-statistics t)
</pre>
</div>
</div>
</div>

<div id="outline-container-org538615b" class="outline-2">
<h2 id="org538615b"><span class="section-number-2">3.</span> Show startup time on emacs-load</h2>
<div class="outline-text-2" id="text-3">
<div class="org-src-container">
<pre class="src src-emacs-lisp">(defun efs/display-startup-time ()
  (message "Emacs loaded in %s with %d garbage collections."
           (format "%.2f seconds"
                   (float-time
                    (time-subtract after-init-time before-init-time)))
           gcs-done))

(add-hook 'emacs-startup-hook #'efs/display-startup-time)
</pre>
</div>
</div>
</div>

<div id="outline-container-org4bf085c" class="outline-2">
<h2 id="org4bf085c"><span class="section-number-2">4.</span> Message</h2>
<div class="outline-text-2" id="text-4">
<p>
Add such message in the package and then look at <b>messages</b> buffer on startup
to find which one has failed.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">:config
(message "Org-roam got loaded!")
</pre>
</div>
</div>
</div>

<div id="outline-container-org0a364f4" class="outline-2">
<h2 id="org0a364f4"><span class="section-number-2">5.</span> <span class="todo TODO">TODO</span> now these message are not needed anymore, since I compile emacs at each config change</h2>
<div class="outline-text-2" id="text-5">
<p>
link to a post where I describe that
</p>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231126T003911--emacs-init-time__emacs.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231126T003911--emacs-init-time__emacs.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:44 +0000</pubDate>
</item>
<item>
  <title><![CDATA[org roam]]></title>
  <description><![CDATA[
<p>
Quite old notes about using org-roam package in emacs.
</p>

<ol class="org-ol">
<li><a href="https://youtu.be/AyhPmypHDEw">Getting Started with Org Roam - Build a Second Brain in Emacs</a> <a href="https://systemcrafters.cc/build-a-second-brain-in-emacs/getting-started-with-org-roam/">shownotes</a></li>
<li><a href="https://youtu.be/YxgA5z2R08I">Capturing Notes Efficiently in Emacs with Org Roam</a> <a href="https://systemcrafters.net/build-a-second-brain-in-emacs/capturing-notes-efficiently/">shownotes</a></li>
<li><a href="https://youtu.be/3-sLBaJAtew">Org Roam: The Best Way to Keep a Journal in Emacs</a> <a href="https://systemcrafters.net/build-a-second-brain-in-emacs/keep-a-journal/">shownotes</a></li>
<li><a href="https://youtu.be/CUkuyW6hr18">5 Org Roam Hacks for Better Productivity in Emacs</a> <a href="https://systemcrafters.net/build-a-second-brain-in-emacs/5-org-roam-hacks/">shownotes</a></li>
</ol>

<p>
<a href="https://coredumped.dev/2021/05/26/taking-org-roam-everywhere-with-logseq/">Taking org-roam everywhere with logseq</a>
</p>

<p>
KEY - linking roam notes with id's in html -
<a href="https://www.reddit.com/r/emacs/comments/q82zci/how_to_include_the_id_links_into_your_orgroam/">https://www.reddit.com/r/emacs/comments/q82zci/how_to_include_the_id_links_into_your_orgroam/</a>
</p>


<p>
I have found org-roam to be nice to use as I remember, but file naming was
a little strange + I remember I did not like he idea of having a database to
store all the links between notes. Also I was not really using the full
potential and functionalities(graphs, backlinks, etc) that it offered.
</p>

<p>
That is why, when the idea of having a "second-brain" started to creep towards
me, I choose denote. TODO-explain why
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231126T003848--org-roam__emacs.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231126T003848--org-roam__emacs.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:43 +0000</pubDate>
</item>
<item>
  <title><![CDATA[images in org files]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgd60bc34">1. Display images in org files</a></li>
<li><a href="#org051e173">2. If you have the image with you</a></li>
<li><a href="#org767758f">3. If you don't have an image and want to insert a screenshot</a></li>
<li><a href="#org5b1b058">4. Resizing images in emacs and html</a></li>
</ul>
</div>
</nav>

<figure id="orgcc2e9c8">
<img src="../media/water.jpg" alt="water.jpg" width="800px">

</figure>

<div id="outline-container-orgd60bc34" class="outline-2">
<h2 id="orgd60bc34"><span class="section-number-2">1.</span> Display images in org files</h2>
<div class="outline-text-2" id="text-1">
<p>
To display inline images in org buffer after you have placed some, click <code>C-c
C-x C-v</code>.
</p>
</div>
</div>

<div id="outline-container-org051e173" class="outline-2">
<h2 id="org051e173"><span class="section-number-2">2.</span> If you have the image with you</h2>
<div class="outline-text-2" id="text-2">
<p>
To insert an image, do C-u then C-c C-l. easy. if you add a
description, it won't show the image, but rather the description with
an indication of a link.
</p>

<p>
<span class="timestamp-wrapper"><span class="timestamp">[2023-12-14 Thu] </span></span> or what I use now is yasnippet that looks like such, that is
the yasnippet template:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">#+attr_html: :width 800px
#+ATTR_ORG: :width 600
[[./static/images/.png]]
</pre>
</div>

<p>
Simply modify the path of the image and it will display it.
</p>
</div>
</div>

<div id="outline-container-org767758f" class="outline-2">
<h2 id="org767758f"><span class="section-number-2">3.</span> If you don't have an image and want to insert a screenshot</h2>
<div class="outline-text-2" id="text-3">
<p>
Use <code>org-download</code> package. After you install it, run <code>M-x
org-download-screenshot</code>.
</p>

<p>
Then make sure in init file you have specified the directory. If not, it will
save images in your current org file directory. It is good if you want to
export the file to html later and then maybe even send to someone.
</p>
</div>
</div>

<div id="outline-container-org5b1b058" class="outline-2">
<h2 id="org5b1b058"><span class="section-number-2">4.</span> Resizing images in emacs and html</h2>
<div class="outline-text-2" id="text-4">
<p>
To resize an image, add this to your init:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(setq org-image-actual-width nil)
</pre>
</div>

<p>
Then, above EACH and EVERY image add such lines:
</p>

<div class="org-src-container">
<pre class="src src-org">#+attr_html: :width 900px
#+ATTR_ORG: :width 600
[[file:images/smutifruti.png]]
</pre>
</div>

<p>
and now after C-c C-x C-v - images will display nicely, as per your request.
Beautiful.
</p>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231126T003746--images-in-org-files__emacs.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231126T003746--images-in-org-files__emacs.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:43 +0000</pubDate>
</item>
<item>
  <title><![CDATA[why certain shortcuts dont work in emacs terminal]]></title>
  <description><![CDATA[
<p>
<a href="https://emacs.stackexchange.com/questions/75347/problem-with-key-bindings-in-emacs-in-the-terminal-on-wsl/75349#75349">https://emacs.stackexchange.com/questions/75347/problem-with-key-bindings-in-emacs-in-the-terminal-on-wsl/75349#75349</a>
</p>

<p>
You’re using Emacs inside of a terminal, and terminals have a much more limited
set of keystrokes that they can communicate. This is because historically
terminals simply had fewer keys on their keyboards, and because not all
combinations of keys were thought to be useful.
</p>

<p>
Some terminal emulators, starting with XTerm, have added new escape sequences
that are capable of communicating the full range of key combinations possible
on modern keyboards. Emacs will automatically recognize these escape sequences,
so if your terminal emulator supports them then you have a solution. If it
doesn’t perhaps you can use XTerm instead.
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231126T003353--why-certain-shortcuts-dont-work-in-emacs-terminal__emacs.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231126T003353--why-certain-shortcuts-dont-work-in-emacs-terminal__emacs.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:43 +0000</pubDate>
</item>
<item>
  <title><![CDATA[login to another server over ssh]]></title>
  <description><![CDATA[
<p>
Over emacs do:
</p>

<div class="org-src-container">
<pre class="src src-bash">/ssh:remote-user@remote.box:/path/to/my/file
</pre>
</div>

<p>
will be prompted for password n stuff.
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> <a href="https://arvydasg.github.io/devnotes/html/tag-ssh.html">ssh</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[ssh]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231126T003317--login-to-another-server-over-ssh__emacs_ssh.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231126T003317--login-to-another-server-over-ssh__emacs_ssh.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:43 +0000</pubDate>
</item>
<item>
  <title><![CDATA[manually install emacs package from git]]></title>
  <description><![CDATA[
<p>
Useful when you can not reach elpa/melpa repositories, for example - at work.
</p>

<p>
video showcasing that -
<a href="https://www.youtube.com/watch?v=at_fACZ_o9Q&amp;ab_channel=TimothyUnkert">https://www.youtube.com/watch?v=at_fACZ_o9Q&amp;ab_channel=TimothyUnkert</a>
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231126T003218--manually-install-emacs-package-from-git__emacs.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231126T003218--manually-install-emacs-package-from-git__emacs.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:43 +0000</pubDate>
</item>
<item>
  <title><![CDATA[why I am using emacs]]></title>
  <description><![CDATA[
<ul class="org-ul">
<li>Most flexible and configurable editor in the multiverse.</li>
<li>It's free, was and <a href="https://www.gnu.org/philosophy/free-sw.html">forever will be</a>.</li>
<li>Complete built-in documentation</li>
<li>Packaging system, the community that creates them is great</li>
<li>Keyboard shortcuts similar to Linux shell's. Can't write anything without
those shortcuts now.</li>
<li>A wide range of functionality beyond text/code editing, including a
<a href="https://www.gnu.org/software/emacs/manual/org.html">project planner</a>, <a href="https://www.gnu.org/software/emacs/manual/gnus.html">mail
and news reader</a>, <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Debuggers.html">debugger interface</a>, <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Calendar_002fDiary.html">calendar</a>, <a href="https://www.gnu.org/savannah-checkouts/gnu/emacs/erc.html">IRC client</a>, and <a href="https://www.gnu.org/savannah-checkouts/gnu/emacs/further-information.html">more</a>.</li>
<li>According to Zygimantas, most developers WILL be running linux at work, so
don't fall for Windows OS.</li>
<li>Can create FOREVER notes, simple org files, text, so notes will forever be
readable(unlike other formats, storing them on cloud, etc.).</li>
<li>Torstein - The drive you have to always improve your tools and workflow will
take you and your career great places</li>
<li>I guess in some older companies where security (of all kinds) is an actual
issue, they mandate that everyone works through a VM, hosted remotely. And
when whatever you’re using to visually connect to the VM lags, and the VM
itself is pretty slow, and you have 10 people near you connecting to the same
router, it becomes a ridiculous pain to use an IDE.</li>
<li><a href="https://www.reddit.com/r/emacs/comments/z9u6c1/my_experience_with_emacs_and_the_eventual/?utm_source=share&amp;utm_medium=android_app&amp;utm_name=androidcss&amp;utm_term=1&amp;utm_content=share_button">emacs till the day I die due to magit</a></li>
<li>think about using emacs + angular, bent jau prisirasyk cia kaip option</li>
<li>With Emacs and being able to change/modify/tweak things to be like I want,
create the functionality that I want, this exact mentality is the main reason
why I became a programmer.</li>
<li><a href="https://www.slideshare.net/yukihiro_matz/how-emacs-changed-my-life">How emacs changed my life</a></li>
</ul>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231126T003030--why-i-am-using-emacs__emacs.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231126T003030--why-i-am-using-emacs__emacs.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:43 +0000</pubDate>
</item>
<item>
  <title><![CDATA[raspberrypi shops]]></title>
  <description><![CDATA[
<ul class="org-ul">
<li><a href="https://www.anodas.lt/en/raspberry-pi-en">https://www.anodas.lt/en/raspberry-pi-en</a></li>
<li><a href="https://www.distrelec.lt/">https://www.distrelec.lt/</a></li>
<li><a href="https://www.elfadistrelec.lv/">https://www.elfadistrelec.lv/</a></li>
</ul>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-raspberrypi.html">raspberrypi</a> </div>]]></description>
  <category><![CDATA[raspberrypi]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231126T001818--raspberrypi-shops__raspberrypi.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231126T001818--raspberrypi-shops__raspberrypi.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:43 +0000</pubDate>
</item>
<item>
  <title><![CDATA[raspberrypi pins]]></title>
  <description><![CDATA[
<p>
<a href="https://forums.raspberrypi.com/viewtopic.php?t=216884#:~:text=If%20you%20really%20want%20to,or%20any%20other%20ground%20pin">https://forums.raspberrypi.com/viewtopic.php?t=216884#:~:text=If%20you%20really%20want%20to,or%20any%20other%20ground%20pin</a>).&amp;text=Some%2012V%20DC%20fans%20will,CFM%2C%20and%20with%20less%20noise.
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-raspberrypi.html">raspberrypi</a> </div>]]></description>
  <category><![CDATA[raspberrypi]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231126T001642--raspberrypi-pins__raspberrypi.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231126T001642--raspberrypi-pins__raspberrypi.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:43 +0000</pubDate>
</item>
<item>
  <title><![CDATA[magic mirror setup]]></title>
  <description><![CDATA[
<p>
irasyk ir setup raspberry pi kaip cia - <a href="20231126T001334--raspberrypi-first-setup__raspberrypi.html">raspberry pi first setup</a>
</p>

<p>
third party modules -
<a href="https://github.com/MichMich/MagicMirror/wiki/3rd-Party-Modules">https://github.com/MichMich/MagicMirror/wiki/3rd-Party-Modules</a>
</p>

<div class="org-src-container">
<pre class="src src-bash"># quit
Ctrl + q
# start (while inside MagicMirror folder on desktop to start the app)
npm start
</pre>
</div>

<ul class="org-ul">
<li><a href="https://www.youtube.com/watch?v=-cJdwlDPqYM">pamatuok kiek telikas energijos ims naudojamas visa diena, per metus</a></li>
<li><a href="https://www.instructables.com/Gesture-Controlled-Smart-Mirror/">control with gesture</a></li>
<li><a href="https://www.youtube.com/watch?v=Zo1WT2LoaUg">temperature/humidity sensor</a></li>
<li>ismanioji rozete</li>
</ul>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-raspberrypi.html">raspberrypi</a> </div>]]></description>
  <category><![CDATA[raspberrypi]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231126T001417--magic-mirror-setup__raspberrypi.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231126T001417--magic-mirror-setup__raspberrypi.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:43 +0000</pubDate>
</item>
<item>
  <title><![CDATA[raspberrypi first setup]]></title>
  <description><![CDATA[
<p>
Ramiausiai irasaiu i sd kortele is windowsu raspberry pi os.
</p>

<p>
ijungiau vncviewer, ijungiau ssh, 'ping raspberrypi' in terminal 0 shows me I
am connected. teo marsrutizatoriaus valdymo skydelis rodo, kad raspberrypi is
connected - pasaka.
</p>

<p>
prisijunk su ssh
</p>

<div class="org-src-container">
<pre class="src src-bash">ssh arvypi@192.1xx.1.xxx
</pre>
</div>

<p>
pass &lt;default dvi raides&gt; ir as viduj!
</p>

<p>
Install vncviewer ir krc daryk <code>ifconfig</code> inside raspberry ir pamatysi ip - su
juo pasijunk per vnc. easy, perfect, done.
</p>

<p>
<code>raspi-config</code> = pamatysi settingsus
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-raspberrypi.html">raspberrypi</a> </div>]]></description>
  <category><![CDATA[raspberrypi]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231126T001334--raspberrypi-first-setup__raspberrypi.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231126T001334--raspberrypi-first-setup__raspberrypi.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:43 +0000</pubDate>
</item>
<item>
  <title><![CDATA[api tools]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orge7ef57e">1. K ismintis apie API ir restapi</a></li>
<li><a href="#org1292f5e">2. Tools</a></li>
</ul>
</div>
</nav>

<div id="outline-container-orge7ef57e" class="outline-2">
<h2 id="orge7ef57e"><span class="section-number-2">1.</span> K ismintis apie API ir restapi</h2>
<div class="outline-text-2" id="text-1">
<blockquote>
<p>
dabar kyla naujas dalykas - GraphQL, bet nežinau, ar jis pilnai pakeis REST,
gal tik eis šalia, ir vienur bus vienas, kitur kitas naudojamas
</p>

<p>
kitas dalykas - REST API paslepia duomenų bazę ir Backend logic. Tai nors su
kai kuriomis DB galima rašyti backend logic irgi, pavyzdžiui su Oracle,
naudojant jų PL/SQL programavimo kalbą, dažnai kalbą nori rinktis pagal kitus
kriterijus
</p>

<p>
taip pat dėl saugumo, kodas, kuris yra už REST API paslepia visokius
slaptažodžius, keys. Tarkim, jei turi frontend framework iš kurio jungiesi į
DB, tai tu negali ten įdėt duomenų bazęs prisijungimų
</p>

<p>
nes tai iš karto nesaugu
</p>

<p>
tu tikrai nenori, kad kiekvienas tavo vartotojas būtų ir duomenų bazės
vartotojas
</p>

<p>
taigi, taip apibendrintai, tai dėl patogumo ir saugumo
</p>
</blockquote>
</div>
</div>

<div id="outline-container-org1292f5e" class="outline-2">
<h2 id="org1292f5e"><span class="section-number-2">2.</span> Tools</h2>
<div class="outline-text-2" id="text-2">
<ul class="org-ul">
<li><a href="https://fakestoreapi.com/">fakestoreapi.com</a></li>
<li><a href="https://api.vilnius.lt/">https://api.vilnius.lt/</a></li>
<li><a href="https://data.gov.lt/public/api/1">https://data.gov.lt/public/api/1</a></li>
<li><a href="https://github.com/public-apis/public-apis">https://github.com/public-apis/public-apis</a></li>
<li><a href="https://www.programmableweb.com/">lots of free apis</a></li>
<li><a href="https://www.youtube.com/watch?v=7YcW25PHnAA&amp;ab_channel=WebConcepts">api example facebook/instagram/twitter</a></li>
<li><a href="https://hoppscotch.io/">https://hoppscotch.io/</a></li>
<li><a href="https://www.postman.com/">https://www.postman.com/</a></li>
<li>thunder client <a href="20231125T181008--vscode__vscode.html">vscode</a></li>
</ul>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-api.html">api</a> </div>]]></description>
  <category><![CDATA[api]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231125T235251--api-tools__api.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231125T235251--api-tools__api.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:43 +0000</pubDate>
</item>
<item>
  <title><![CDATA[can not see branches]]></title>
  <description><![CDATA[
<p>
If after a fresh repo clone you can not see other git branches besides the main
one - do:
</p>

<p>
<code>git checkout &lt;branchname&gt;</code>
</p>

<p>
Or in magit, to see all the branches - do y(magit-show-refs)
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-git.html">git</a> </div>]]></description>
  <category><![CDATA[git]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231125T221917--can-not-see-branches__git.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231125T221917--can-not-see-branches__git.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:43 +0000</pubDate>
</item>
<item>
  <title><![CDATA[reset changes]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org4e65a60">1. git clean -nd</a></li>
<li><a href="#org3b2e0f7">2. git clean -fd</a></li>
<li><a href="#orgcb5a2a1">3. git reset &#x2013;hard HEAD</a></li>
</ul>
</div>
</nav>
<p>
Useful to know these commands when you are on a production server for
example, not having magit or Git desktop thing.
</p>

<div id="outline-container-org4e65a60" class="outline-2">
<h2 id="org4e65a60"><span class="section-number-2">1.</span> git clean -nd</h2>
<div class="outline-text-2" id="text-1">
<div class="org-src-container">
<pre class="src src-bash">git clean -nd
</pre>
</div>

<p>
This command is a dry run of the git clean command. It's used to preview what
files will be removed from the working directory. The flags used here are:
</p>

<p>
<code>-n</code>: Performs a dry run, which means it shows what files would be deleted
without actually deleting them.
</p>

<p>
<code>-d</code>: Tells Git to also remove untracked directories along with untracked
files.
</p>

<p>
Running <code>git clean -nd</code> will display a list of files and directories that are
currently untracked in the repository and would be removed if the command were
executed without the <code>-n</code> flag.
</p>
</div>
</div>

<div id="outline-container-org3b2e0f7" class="outline-2">
<h2 id="org3b2e0f7"><span class="section-number-2">2.</span> git clean -fd</h2>
<div class="outline-text-2" id="text-2">
<div class="org-src-container">
<pre class="src src-bash">git clean -fd
</pre>
</div>

<p>
<code>git clean -fd</code>: This command is used to forcefully remove untracked files and
directories from the working directory. The flags used here are:
</p>

<p>
<code>-f</code>: Stands for "force" and is used to perform the clean operation without
prompting for confirmation.
</p>

<p>
<code>-d</code>: Tells Git to also remove untracked directories along with untracked
files.
</p>

<p>
Running <code>git clean -fd</code> will permanently delete all untracked files and
directories in the repository. Be cautious while using this command as it
irreversibly removes files and directories that are not tracked by Git.
</p>
</div>
</div>

<div id="outline-container-orgcb5a2a1" class="outline-2">
<h2 id="orgcb5a2a1"><span class="section-number-2">3.</span> git reset &#x2013;hard HEAD</h2>
<div class="outline-text-2" id="text-3">
<div class="org-src-container">
<pre class="src src-bash">git reset --hard HEAD
</pre>
</div>

<p>
<code>git reset --hard HEAD</code>: This command resets the current branch to the state of
the HEAD commit. Here's what each part does:
</p>

<p>
git reset: Resets the current HEAD to the specified state.
</p>

<p>
<code>--hard</code>: Indicates a hard reset, which means it not only changes the HEAD to
the specified commit but also resets the index and working directory to match
that commit.
</p>

<p>
<code>HEAD</code>: Refers to the latest commit of the current branch.
</p>

<p>
Running <code>git reset --hard HEAD</code> will discard all changes in the working
directory and index, reverting them to the state of the latest commit on the
current branch. Be careful when using git reset &#x2013;hard as it can discard all
uncommitted changes irretrievably.
</p>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-git.html">git</a> </div>]]></description>
  <category><![CDATA[git]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231125T221653--reset-changes__git.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231125T221653--reset-changes__git.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:43 +0000</pubDate>
</item>
<item>
  <title><![CDATA[seq keep error message in emacs]]></title>
  <description><![CDATA[
<p>
<a href="https://emacs.stackexchange.com/questions/78977/seq-keep-is-void-when-installing-magit-through-use-package">https://emacs.stackexchange.com/questions/78977/seq-keep-is-void-when-installing-magit-through-use-package</a>
</p>

<p>
should install emacs 29 bla
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> <a href="https://arvydasg.github.io/devnotes/html/tag-magit.html">magit</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[magit]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231125T220943--seq-keep-error-message-in-emacs__emacs_magit.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231125T220943--seq-keep-error-message-in-emacs__emacs_magit.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:43 +0000</pubDate>
</item>
<item>
  <title><![CDATA[partial clone]]></title>
  <description><![CDATA[
<p>
<a href="https://magit.vc/manual/magit/Sparse-checkouts.html">https://magit.vc/manual/magit/Sparse-checkouts.html</a>
</p>

<p>
Useful when I wanted to clone only one dir at work from my personal
org notes directory.
</p>

<ul class="org-ul">
<li>go to src folder and do <code>m-x magit-clone-sparse</code></li>
<li>investigate the .git folder, see the content and watch how it updates in next
steps</li>
<li><code>m-x magit sparse checkout enable</code> (see the changes)</li>
<li>inside info folder sparse-checkout appeared</li>
<li>config and index also changed</li>
<li><code>c-x g</code> - go to magit interface</li>
<li>do <code>&gt;</code></li>
<li><code>s</code> to set directories(tab to select)</li>
<li>needed directory is fetched. MAGIC!</li>
<li>if you do <code>s</code> again to change dirs - old dir gets removed :o</li>
</ul>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-git.html">git</a> <a href="https://arvydasg.github.io/devnotes/html/tag-magit.html">magit</a> </div>]]></description>
  <category><![CDATA[git]]></category>
  <category><![CDATA[magit]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231125T220901--partial-clone__git_magit.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231125T220901--partial-clone__git_magit.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:43 +0000</pubDate>
</item>
<item>
  <title><![CDATA[copy a repo with all commit history]]></title>
  <description><![CDATA[
<p>
The commands provided below are used to push all local branches, tags, and
commits from one Git repository to another repository.
</p>

<p>
For instance, if the new repository is located in a directory named new<sub>repo</sub>,
you'd execute:
</p>

<div class="org-src-container">
<pre class="src src-bash">cd /path/to/new_repo
</pre>
</div>

<p>
<code>git push --mirror &lt;url of old repo&gt;</code>: This Git command pushes all branches,
tags, and commits from the current repository (in the changed directory) to
another repository specified by &lt;url of old repo&gt;. The <code>--mirror</code> flag is used
to ensure that all references (branches and tags) and associated objects are
pushed to the remote repository.
</p>

<p>
Replace <code>&lt;url of old repo&gt;</code> with the URL or remote repository location of the
old repository.
</p>

<p>
For example:
</p>

<div class="org-src-container">
<pre class="src src-bash">git push --mirror https://github.com/old_username/old_repo.git
</pre>
</div>

<p>
This sequence of commands, after changing the directory to the new repository,
essentially mirrors the content of the old repository, including all branches,
tags, commits, and their associated history, to the new repository specified by
<code>&lt;url of old repo&gt;</code>.
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-git.html">git</a> </div>]]></description>
  <category><![CDATA[git]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231125T220538--copy-a-repo-with-all-commit-history__git.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231125T220538--copy-a-repo-with-all-commit-history__git.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:43 +0000</pubDate>
</item>
<item>
  <title><![CDATA[revert a commit with magit]]></title>
  <description><![CDATA[
<p>
<a href="https://www.youtube.com/watch?v=7D4cV0aodGw&amp;ab_channel=whatacold">best explanation</a> at 3:55
</p>

<div class="org-src-container">
<pre class="src src-bash"># open magit
C-x g -
# open log
l l
# select the commits
C-space n/p
# revert the commits
V V
</pre>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-git.html">git</a> <a href="https://arvydasg.github.io/devnotes/html/tag-magit.html">magit</a> </div>]]></description>
  <category><![CDATA[git]]></category>
  <category><![CDATA[magit]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231125T214132--revert-a-commit__git_magit.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231125T214132--revert-a-commit__git_magit.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:43 +0000</pubDate>
</item>
<item>
  <title><![CDATA[denote features]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orga00f205">1. Some features not to forget.</a></li>
</ul>
</div>
</nav>
<p>
<a href="20231125T211812--why-i-use-denote__emacs.html">Why I use Denote.</a>
</p>

<div id="outline-container-orga00f205" class="outline-2">
<h2 id="orga00f205"><span class="section-number-2">1.</span> Some features not to forget.</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>Rename the files(denote-rename)</li>
<li>Take pdf or any other file, rename it denote style - search for it later</li>
<li>remove/add keywords</li>
<li>quickly create notes</li>
<li>modify the font matter to your liking</li>
<li>use m% to search for notes with regular expressions</li>
</ul>

<div class="org-src-container">
<pre class="src src-bash">U - unmark all selections in dired

%m

t - toggle the mark
k - kill unecessary
g - close this
v - view file quick
q - quit
</pre>
</div>

<ul class="org-ul">
<li>have a list of "backlinks" that link to your current note</li>
</ul>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231125T212326--denote-features__emacs.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231125T212326--denote-features__emacs.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:43 +0000</pubDate>
</item>
<item>
  <title><![CDATA[Why I use denote]]></title>
  <description><![CDATA[
<p>
So last week I have decided to get to know to Denote package. Having lots of
free time, I realized that I do not like my notes structure. Maybe Denote will
help with that.
</p>

<p>
This whole Denote setup has taken way more time and effort than I expected.
Reinstalling Emacs to a newer version, fixing wsl, <a href="20231128T164359--wsl-glitches-in-gui-applications__wsl.html">reporting bugs to
Microsoft's wslg team</a>, <a href="20231211T151427--first-nixos-installation__nixos.html">remaking my emacs configuration with nixos</a>, <a href="20231126T012052--make-denote-faster-on-wsl__emacs_rsync_scripting_wsl.html">making
denote run quick</a>, transporting all my notes to denote style notes(is what I
am doing right now, for the last couple of days)&#x2026; TODO - pridek ir kaip
daryti website ir kad as ji darau lol.
</p>

<p>
I can say that the best introduction to Denote is here -
<a href="https://protesilaos.com/codelog/2022-06-18-denote-demo/">https://protesilaos.com/codelog/2022-06-18-denote-demo/</a>
</p>

<p>
By the author himself. It is nice to use the tool that was created by the
person I "know".
</p>

<p>
So yeah, intro above, docs here - <a href="https://protesilaos.com/emacs/denote">https://protesilaos.com/emacs/denote</a>
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-emacs.html">emacs</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231125T211812--why-i-use-denote__emacs.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231125T211812--why-i-use-denote__emacs.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:43 +0000</pubDate>
</item>
<item>
  <title><![CDATA[split a github repository into multiple]]></title>
  <description><![CDATA[
<p>
Can do that with commit history like so -
<a href="https://www.youtube.com/watch?v=HV8hfmwDlPY&amp;ab_channel=CraigDavison">https://www.youtube.com/watch?v=HV8hfmwDlPY&amp;ab_channel=CraigDavison</a>
</p>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-git.html">git</a> </div>]]></description>
  <category><![CDATA[git]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231125T190641--split-a-github-repository-into-multiple__git.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231125T190641--split-a-github-repository-into-multiple__git.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:43 +0000</pubDate>
</item>
<item>
  <title><![CDATA[crontab commands]]></title>
  <description><![CDATA[
<ul class="org-ul">
<li>To view your own user's crontab: <code>crontab -l</code></li>
<li>To edit your own user's crontab: <code>crontab -e</code></li>
<li>To remove your own user's crontab: <code>crontab -r</code></li>
</ul>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-crontab.html">crontab</a> <a href="https://arvydasg.github.io/devnotes/html/tag-linux.html">linux</a> </div>]]></description>
  <category><![CDATA[crontab]]></category>
  <category><![CDATA[linux]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231125T190548--crontab-commands__crontab_linux.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231125T190548--crontab-commands__crontab_linux.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:43 +0000</pubDate>
</item>
<item>
  <title><![CDATA[angular installation]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org54241be">1. Installation of Angular</a></li>
<li><a href="#orgb81c8cf">2. Start ng serve</a></li>
<li><a href="#org3e81e7c">3. Use emacs together with vscode to write angular code?</a></li>
</ul>
</div>
</nav>

<div id="outline-container-org54241be" class="outline-2">
<h2 id="org54241be"><span class="section-number-2">1.</span> Installation of Angular</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>Make sure you have <code>nvm</code> installed.</li>
</ul>

<p>
To install run:
</p>
<div class="org-src-container">
<pre class="src src-bash">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash
source ~/.bashrc
nvm -v.
</pre>
</div>

<p>
Over it install <code>node</code> latest version by:
</p>
<div class="org-src-container">
<pre class="src src-bash">nvm install --lts
nvm use --lts
node -v
</pre>
</div>

<p>
Make sure <code>npm</code> is installed by:
</p>
<div class="org-src-container">
<pre class="src src-bash">npm -v
</pre>
</div>

<p>
Install <code>Angular</code> by:
</p>
<div class="org-src-container">
<pre class="src src-bash">npm install -g @angular/cli
ng version
</pre>
</div>

<p>
Install project dependencies by:
</p>
<div class="org-src-container">
<pre class="src src-bash">npm install
</pre>
</div>

<p>
Start angular service while in crud folder with ng serve command (or
NODE<sub>OPTIONS</sub>="&#x2013;max<sub>old</sub><sub>space</sub><sub>size</sub>=512" ng serve) if you are low on system
resources. go to <a href="http://localhost:4200/">http://localhost:4200/</a> and you should see a list of movies.
</p>

<p>
typescript version - <code>tsc -v</code>
</p>

<ul class="org-ul">
<li>Development server</li>
</ul>

<p>
Run <code>ng serve</code> for a dev server. Navigate to `<a href="http://localhost:4200/">http://localhost:4200/</a>`.
The application will automatically reload if you change any of the
source files.
</p>
</div>
</div>

<div id="outline-container-orgb81c8cf" class="outline-2">
<h2 id="orgb81c8cf"><span class="section-number-2">2.</span> Start ng serve</h2>
<div class="outline-text-2" id="text-2">
<p>
You might close the terminal and open it again and try to use ng serve - it
might say node is not found, install it.
</p>

<p>
well that's because NVM somehow forgot which node it was using.
</p>

<p>
so we need to tell NVM once again to use node lt's:
</p>

<div class="org-src-container">
<pre class="src src-bash">nvm use --lts
</pre>
</div>

<p>
After this do node -v and npm -v - it should work once again.
</p>
</div>
</div>

<div id="outline-container-org3e81e7c" class="outline-2">
<h2 id="org3e81e7c"><span class="section-number-2">3.</span> Use emacs together with vscode to write angular code?</h2>
<div class="outline-text-2" id="text-3">
<p>
<a href="20231214T171810--using-emacs-together-with-vscode__emacs_vscode.html">using emacs together with vscode to build angular projects</a>
</p>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-angular.html">angular</a> </div>]]></description>
  <category><![CDATA[angular]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231125T184606--angular-installation__angular.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231125T184606--angular-installation__angular.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:43 +0000</pubDate>
</item>
<item>
  <title><![CDATA[vscode]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orga78e868">1. vscode</a>
<ul>
<li><a href="#org3e00c0e">1.1. vscode vs vim vs emacs lex fridman inspired</a></li>
<li><a href="#org463ab27">1.2. try out evil mode&#x2026;</a></li>
<li><a href="#org07b91c1">1.3. vscode shortcuts</a></li>
<li><a href="#orgfada3fa">1.4. vscode plugins</a></li>
<li><a href="#org69faa5b">1.5. VScode github real life examples</a></li>
<li><a href="#orgaa3234e">1.6. https://desktop.github.com/</a></li>
<li><a href="#orge2fd98b">1.7. why vscode</a></li>
<li><a href="#orge9888cf">1.8. Trying out other editors</a></li>
<li><a href="#orga173228">1.9. Reason</a></li>
<li><a href="#org1ae707e">1.10. Andrei karpathy emacs lex did it convince him</a></li>
<li><a href="#orgcc78f78">1.11. automatic formatting with prettier</a></li>
</ul>
</li>
</ul>
</div>
</nav>

<div id="outline-container-orga78e868" class="outline-2">
<h2 id="orga78e868"><span class="section-number-2">1.</span> vscode</h2>
<div class="outline-text-2" id="text-1">
</div>
<div id="outline-container-org3e00c0e" class="outline-3">
<h3 id="org3e00c0e"><span class="section-number-3">1.1.</span> vscode vs vim vs emacs lex fridman inspired</h3>
</div>
<div id="outline-container-org463ab27" class="outline-3">
<h3 id="org463ab27"><span class="section-number-3">1.2.</span> try out evil mode&#x2026;</h3>
<div class="outline-text-3" id="text-1-2">
<p>
it might be more practical to learn to use it instead of emacs bindings. when
you are in shell or when you are in vscode with vim plugin or when talking to
other programmers and when you are in a browser with vim extension for example.
</p>
</div>
</div>

<div id="outline-container-org07b91c1" class="outline-3">
<h3 id="org07b91c1"><span class="section-number-3">1.3.</span> vscode shortcuts</h3>
<div class="outline-text-3" id="text-1-3">
<ul class="org-ul">
<li><code>c-k c-t</code> - choose theme</li>
<li>syncing to other devices with github login in vs code&#x2026;</li>
<li><code>c-shift-p</code> - ope command pallet</li>
<li><code>f5</code> - run and debug ANY file</li>
<li>jupyter notebooks in vscode? what is it for</li>
<li><code>c-k c-o</code> - open a folder(opens up nautilus)</li>
<li><code>shift+alt+click/up/down</code> multiple cursors</li>
<li><code>ctrl+shift+k</code> - delete entire line</li>
<li><code>f2</code> - rename variable</li>
<li><code>c+shift+i</code> - format entire document</li>
<li><code>c+k c+f</code> - format selection</li>
<li><code>c+shift+[]</code> - fold unfold code</li>
<li>type "if" or "try" and then select some sugeested completion snippet..</li>
<li>emmet works just the same</li>
<li><code>c-`</code> open terminal</li>
<li><code>c-,</code> - open settings</li>
<li><code>C-1, C-2, C-3</code> - different windows</li>
<li>file-&gt;autosave - autosaves every little change</li>
<li><code>c-n</code> - create new file</li>
<li>live server/live preview - html/css editing on the fly</li>
<li><code>c+shift+g</code> git interface</li>
<li>run auto detected tasks(google when its useful)</li>
<li><code>c+k c+s</code> customize shortcuts</li>
<li>eslint extensions for smth many downloads</li>
</ul>
</div>
</div>
<div id="outline-container-orgfada3fa" class="outline-3">
<h3 id="orgfada3fa"><span class="section-number-3">1.4.</span> vscode plugins</h3>
</div>
<div id="outline-container-org69faa5b" class="outline-3">
<h3 id="org69faa5b"><span class="section-number-3">1.5.</span> VScode github real life examples</h3>
<div class="outline-text-3" id="text-1-5">
<p>
plugin name - IntelliCode API Usage Examples
</p>
</div>
</div>
<div id="outline-container-orgaa3234e" class="outline-3">
<h3 id="orgaa3234e"><span class="section-number-3">1.6.</span> <a href="https://desktop.github.com/">https://desktop.github.com/</a></h3>
</div>
<div id="outline-container-orge2fd98b" class="outline-3">
<h3 id="orge2fd98b"><span class="section-number-3">1.7.</span> why vscode</h3>
<div class="outline-text-3" id="text-1-7">
<p>
ar mane stabdo emacs?
</p>

<p>
pycharm is like an 18 wheeler truck and emacs is like your comfortable
toyota - Guido
</p>

<p>
Vscode is great. Its like a home i can go back to when I'm lost. But
Emacs is an adventure - Guy on youtube
</p>

<p>
<a href="https://www.youtube.com/watch?v=G5mtQhWNezQ&amp;ab_channel=LexClips">sita kalba lex su Guido</a>
</p>

<ul class="org-ul">
<li>lex (vscode now 20k hours emacs)</li>
<li>python create Guide Van Rossum (VSCODE now, 30 years emacs)</li>
<li>George hotz(vscode + vim)</li>
</ul>
</div>
</div>
<div id="outline-container-orge9888cf" class="outline-3">
<h3 id="orge9888cf"><span class="section-number-3">1.8.</span> Trying out other editors</h3>
<div class="outline-text-3" id="text-1-8">
<p>
I think it really depends on what someone wants out of Emacs. The
thread the other day on people who use both had a pretty strong choir
of people who use Org-mode for note taking and VS Code for dev work,
which makes perfect sense to me; Emacs guaranteed itself a place in my
workflow with Org-mode.
</p>

<p>
I think if you're satisfied with Emacs for now and you can concretely
point to packages and functionality in Emacs that you would not know
how to recreate in VS Code out of the gate, I would say there's not a
ton of reason to switch to VS Code. I'm largely in the same boat, know
the basics of some front-end web-dev, occasionally play around with CL
and elisp, all non-professionally.
</p>

<p>
Compatibility with a hypothetical future team will be dependent on
that team, and at the same time many of the guides/tutorials for Emacs
I've read encourage learning other editors and how they work in case
you run into an employment situation that won't work with Emacs for
whatever reason. Seems like good practice.
</p>
</div>
</div>
<div id="outline-container-orga173228" class="outline-3">
<h3 id="orga173228"><span class="section-number-3">1.9.</span> Reason</h3>
<div class="outline-text-3" id="text-1-9">
<p>
I think people overvalue this kind of thing. Vscode is going to be
around for quite a while. If you think it would improve your life, you
should use it. It might eventually go away in 15 years, but if it
does, you can spend a weekend switching to something else. That’s
hardly a reason to use a suboptimal tool until then. Of course, you
may prefer Emacs, and that’s fine too. Just saying, I think it’s
unwise to avoid an extremely healthy ecosystem and tool purely on the
grounds that it might not exist forever.
</p>
</div>
</div>
<div id="outline-container-org1ae707e" class="outline-3">
<h3 id="org1ae707e"><span class="section-number-3">1.10.</span> Andrei karpathy emacs lex did it convince him</h3>
</div>
<div id="outline-container-orgcc78f78" class="outline-3">
<h3 id="orgcc78f78"><span class="section-number-3">1.11.</span> automatic formatting with prettier</h3>
<div class="outline-text-3" id="text-1-11">
<p>
<a href="https://youtube.com/shorts/dDtueNAFELo?si=EDK6Ospk9N38QY_L">https://youtube.com/shorts/dDtueNAFELo?si=EDK6Ospk9N38QY_L</a>
</p>
</div>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-vscode.html">vscode</a> </div>]]></description>
  <category><![CDATA[vscode]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231125T181008--vscode__vscode.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231125T181008--vscode__vscode.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:43 +0000</pubDate>
</item>
<item>
  <title><![CDATA[vim]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org74afeaa">1. Vim bindings in evil</a></li>
<li><a href="#org24495e8">2. <span class="timestamp-wrapper"><span class="timestamp">[2022-12-03 Sat] </span></span> I tried!!</a></li>
<li><a href="#org565f282">3. Vim bindings in evil</a></li>
<li><a href="#org199d18a">4. Emacs/Evil for vim users didelis gidas apie evil</a></li>
<li><a href="#orgc7d067c">5. evil mode documentation</a></li>
<li><a href="#org22883f4">6. old .vimrc</a></li>
</ul>
</div>
</nav>
<p>
Tried Vim in the beginning of my coding journey back in 2021. Liked it. Then
found Emacs. Found org mode. Could not go back.
</p>

<p>
Tried a few times as you can see below, but still, I am writing this from Emacs
in <span class="timestamp-wrapper"><span class="timestamp">[2023-12-14 Thu]</span></span>.
</p>

<div id="outline-container-org74afeaa" class="outline-2">
<h2 id="org74afeaa"><span class="section-number-2">1.</span> Vim bindings in evil</h2>
<div class="outline-text-2" id="text-1">
<p>
Well, I'm not sure how relevant my experience is to your case.
Originally i used Emacs in favor of Vim. Evil just makes Emacs a
straight up better Vim and the emulation is as good as flawless.
</p>

<p>
Vscode happens to also have a pretty decent vim emulation.
</p>

<p>
It's not as configurable and in the beginning it feels incredibly
restrictive to not be able to customise everything and script things
on the fly.
</p>

<p>
But after a while you realise that it's as much a blessing as it is a
curse. Because of this it relies on sane defaults instead, and
suddenly you'll find yourself messing with your config once a month
rather than twice a day.
</p>

<p>
Just added something new to your stack or need language support for a
new language? Just search for it in the built-in extension manager,
press install and you're <b>done</b>. Back to work. No manual needed, no time
wasted scrolling through their issue tracker to figure out why the
hell you can't get LSP support or completions to work. It Just Works™.
</p>

<p>
That said I still miss a lot of things, and it regularly gets on my
nerves. But it definitely makes me more productive.
</p>
</div>
</div>
<div id="outline-container-org24495e8" class="outline-2">
<h2 id="org24495e8"><span class="section-number-2">2.</span> <span class="timestamp-wrapper"><span class="timestamp">[2022-12-03 Sat] </span></span> I tried!!</h2>
<div class="outline-text-2" id="text-2">
<p>
isirasiau evil emacse
org mode neveikia tab vscode.. tingejau ieskotis. + blet nebus ten
agenda, tai koks tolkas daryti kazka su datomis.. zodziu.. aciu, ne.
kaip projektu ieskoti vscode
</p>

<p>
galiausiai pagalvojau&#x2026; ble, jeigu man dabar gerai, kam man
isradineti dvirati ir meginti priprasti prie naujos sistemos be AISKIU
benfits. Dabar supratau, jog tai darau vien del to, kad kazkas pasake,
jog evil yra nice. Ne aciu.
</p>

<p>
Kai tikrai pamatysiu, jog man reikia, tuo met ir ismoksiu visus
dalykys. O, geras, isjungiau company mode ir org major mode - nebemeta
tu damn suggestions. Gal ir gerai.
</p>
</div>
</div>
<div id="outline-container-org565f282" class="outline-2">
<h2 id="org565f282"><span class="section-number-2">3.</span> Vim bindings in evil</h2>
<div class="outline-text-2" id="text-3">
<p>
Well, I'm not sure how relevant my experience is to your case.
Originally i used Emacs in favor of Vim. Evil just makes Emacs a
straight up better Vim and the emulation is as good as flawless.
</p>

<p>
Vscode happens to also have a pretty decent vim emulation.
</p>

<p>
It's not as configurable and in the beginning it feels incredibly
restrictive to not be able to customise everything and script things
on the fly.
</p>

<p>
But after a while you realise that it's as much a blessing as it is a
curse. Because of this it relies on sane defaults instead, and
suddenly you'll find yourself messing with your config once a month
rather than twice a day.
</p>

<p>
Just added something new to your stack or need language support for a
new language? Just search for it in the built-in extension manager,
press install and you're <b>done</b>. Back to work. No manual needed, no time
wasted scrolling through their issue tracker to figure out why the
hell you can't get LSP support or completions to work. It Just Works™.
</p>

<p>
That said I still miss a lot of things, and it regularly gets on my
nerves. But it definitely makes me more productive.
</p>
</div>
</div>
<div id="outline-container-org199d18a" class="outline-2">
<h2 id="org199d18a"><span class="section-number-2">4.</span> <a href="https://github.com/noctuid/evil-guide">Emacs/Evil for vim users didelis gidas apie evil</a></h2>
</div>
<div id="outline-container-orgc7d067c" class="outline-2">
<h2 id="orgc7d067c"><span class="section-number-2">5.</span> <a href="https://evil.readthedocs.io/en/latest/overview.html">evil mode documentation</a></h2>
</div>
<div id="outline-container-org22883f4" class="outline-2">
<h2 id="org22883f4"><span class="section-number-2">6.</span> old .vimrc</h2>
<div class="outline-text-2" id="text-6">
<div class="org-src-container">
<pre class="src src-bash">" -----------------------------------------------------------------------------
" Plugins
" -----------------------------------------------------------------------------

call plug#begin('~/.vim/plugged')
Plug 'scrooloose/nerdcommenter' " comment text out
Plug 'tpope/vim-surround' " surround text with ' { ( or edit html tags
Plug 'itchyny/lightline.vim' " indicating modes and more info bottom bar
Plug 'junegunn/fzf', { 'do': { -&gt; fzf#install() } }
Plug 'junegunn/fzf.vim' " fuzzy file finder
Plug 'easymotion/vim-easymotion' "jump to word
Plug 'morhetz/gruvbox' " theme
Plug 'mattn/emmet-vim' "adding html tags
Plug 'vim-scripts/AutoComplPop' " super duper text autocompletion
Plug 'machakann/vim-highlightedyank' "highlight yanked text
call plug#end()

" -----------------------------------------------------------------------------
" Stuff
" -----------------------------------------------------------------------------

syntax on
set number relativenumber
set laststatus=2
set colorcolumn=80
set cursorline
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab
set smarttab
set nowrap
set textwidth=0
set mouse=n
set noerrorbells
set autoindent
set copyindent
set virtualedit=all
set ignorecase
set incsearch
set smartcase
set hidden "buffers
set complete+=kspell
set completeopt=menuone,longest " :h completeopt
set shortmess+=c " don't pass messages to |ins-completion-menu|
set t_Co=256
set background=dark
colorscheme gruvbox
" Ignore rules for file editing
set wildmenu  "shows multiple matches on one line
set wildchar=&lt;tab&gt;
set wildmode=list:full
set wildignore+=*.swp,*.bak,*.pyc,*.pyo,*.so,*~,*.zip,*.gz,*.tar
set wildignore+=virtual/,.virtualenv/,upload/,uploads/,node_modules/
" Autosave
set updatetime=1000
autocmd CursorHold,CursorHoldI * silent update

" -----------------------------------------------------------------------------
" Shortcuts
" -----------------------------------------------------------------------------

" nnoremap &lt;F2&gt; :e $MYVIMRC&lt;CR&gt;
" nnoremap &lt;F3&gt; :source $MYVIMRC&lt;CR&gt;

let mapleader=" "

nnoremap B ^
nnoremap E $

inoremap kj  &lt;ESC&gt;

:command WQ wq
:command Wq wq
:command W w
:command Q q

let g:user_emmet_mode='n'      "only enable normal mode functions
let g:user_emmet_leader_key=','

let g:NERDSpaceDelims=1
let g:NERDDefaultAlign = 'left'

let g:highlightedyank_highlight_duration = 500
let g:highlightedyank_highlight_duration = -1

" Press * to search for the term under the cursor or a visual selection and
" then press a key below to replace all instances of it in the current file.
nnoremap &lt;Leader&gt;r :%s///g&lt;Left&gt;&lt;Left&gt;
nnoremap &lt;Leader&gt;rc :%s///gc&lt;Left&gt;&lt;Left&gt;&lt;Left&gt;

" Automatically fix the last misspelled word and jump back to where you were.
nnoremap &lt;leader&gt;sp :normal! mz[s1z=`z&lt;CR&gt;
nmap &lt;leader&gt;t :enew&lt;cr&gt;
map &lt;leader&gt;pv :Ex&lt;CR&gt;
map &lt;leader&gt;m :Marks&lt;CR&gt;
nnoremap &lt;leader&gt;x :bd&lt;CR&gt;
map &lt;leader&gt;f :Files&lt;CR&gt;
nnoremap &lt;Leader&gt;+ :vertical resize +10&lt;CR&gt;
nnoremap &lt;Leader&gt;- :vertical resize -10&lt;CR&gt;
nnoremap &lt;silent&gt; &lt;Leader&gt;l :Lines&lt;CR&gt;
nnoremap &lt;silent&gt; &lt;Leader&gt;&lt;Enter&gt; :Buffers&lt;CR&gt;
inoremap &lt;expr&gt; &lt;c-j&gt; ((pumvisible())?("\&lt;C-n&gt;"):("j"))
inoremap &lt;expr&gt; &lt;c-k&gt; ((pumvisible())?("\&lt;C-p&gt;"):("k"))
let g:EasyMotion_do_mapping = 0 " Disable default mappings
map &lt;Space&gt;&lt;Space&gt; &lt;Plug&gt;(easymotion-bd-w)

" -----------------------------------------------------------------------------
" Backups and swap
" -----------------------------------------------------------------------------

silent execute '!mkdir -p /tmp/.vim-backup'
set backupdir=/tmp/.vim-backup
set noswapfile
autocmd BufWritePre * let &amp;bex = '-' . strftime("%Y-%m-%d_%H:%M")
" -----------------------------------------------------------------------------
" Spell Checker toggle
" -----------------------------------------------------------------------------


" set spelllang=en_usdfdsfsdfdsfsdfsf
" function! ToggleSpellCheck()
"   set spell!
"   if &amp;spell
"     echo "Spellcheck ON"
"   else
"     echo "Spellcheck OFF"
"   endif
" endfunction

" nnoremap &lt;silent&gt; &lt;Leader&gt;sp :call ToggleSpellCheck()&lt;CR&gt;
hi clear SpellBad
hi SpellBad cterm=underline,bold
hi SpellBad ctermfg=Red
</pre>
</div>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/devnotes/html/tags.html">Tags</a>: <a href="https://arvydasg.github.io/devnotes/html/tag-vim.html">vim</a> </div>]]></description>
  <category><![CDATA[vim]]></category>
  <link>https://arvydasg.github.io/devnotes/html/20231125T180911--vim__vim.html</link>
  <guid>https://arvydasg.github.io/devnotes/html/20231125T180911--vim__vim.html</guid>
  <pubDate>Fri, 15 Dec 2023 17:50:43 +0000</pubDate>
</item>
</channel>
</rss>
